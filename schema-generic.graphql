# Subgraph Schema: Generic
# Version: 1.1.0

enum Network {
  ARBITRUM
  AURORA
  AVALANCHE
  BSC
  CELO
  CRONOS
  ETHEREUM
  FANTOM
  HARMONY
  MOONBEAM
  MOONRIVER
  OPTIMISM
  POLYGON
  XDAI
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

#############################
##### Protocol Metadata #####
#############################

type Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  network: Network!

  type: ProtocolType!

  " All pools that belong to this protocol "
  pools: [Pool!]! @derivedFrom(field: "protocol")

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  totalValueLockedUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  " # of unique daily active users "
  activeUsers: Int!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  " Total number of transaction occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  totalValueLockedUSD: BigDecimal!

  " Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  supplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  protocolSideRevenueUSD: BigDecimal!

  " Total revenue accrued by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  totalRevenueUSD: BigDecimal!
  
  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type Pool @entity {
  " Smart contract address of the pool "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  blockNumber: BigInt!

  timestamp: BigInt!

  " Pool snapshots "
  snapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")
}

type PoolDailySnapshot @entity {
  " { Smart contract address of the pool }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The pool this snapshot belongs to "
  pool: Pool!

  totalValueLockedUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

# An account is a unique Ethereum address
# Helps to accumulate total unique users
type Account @entity {
  " Address of the account "
  id: ID!
}

# Helper entity for calculating daily active users
type DailyActiveAccount @entity {
  " { Days since Unix epoch }-{ Address of the account } "
  id: ID!
}
