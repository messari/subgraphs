# Subgraph Schema: DEX AGG
# Version: 1.0.1
# See https://github.com/messari/subgraphs/blob/master/docs/SCHEMA.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  DEX_AGG
  # Will add more
}

enum TokenType {
  MULTIPLE
  UNKNOWN
  ERC20
  ERC721
  ERC1155
  BEP20
  BEP721
  BEP1155
  # Will add more
}

type Token @entity {
  " Smart contract address of the token "
  id: Bytes!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt

  " Field to track the cumulative volume of the token in native amounts - Only counts volume from the token being swapped with (tokenIn) "
  cumulativeVolume: BigInt!

  " Field to track the cumulative volume of the token in USD - Only counts volume from the token being swapped with (tokenIn) "
  cumulativeVolumeUSD: BigDecimal!

  " The type of token the protocol creates for positions "
  type: TokenType

  " Day ID of the most recent daily snapshot "
  lastSnapshotDayID: Int!

  " Timestamp of the last time this entity was updated "
  lastUpdateTimestamp: BigInt!

  " Block number of the last time this entity was updated "
  lastUpdateBlockNumber: BigInt!

  " All deposit (add liquidity) events occurred in this pool "
  tokenDailySnapshots: [TokenDailySnapshot!]! @derivedFrom(field: "token")
}

type TokenDailySnapshot @entity {
  "  { Smart contract address of the token }-{ # of days since Unix epoch time }  "
  id: ID!

  " Token address "
  token: Token!

  " Optional field to track the price of a token, mostly for caching purposes "
  priceUSD: BigDecimal

  " Field to track the daily volume of the token in native amounts "
  dailyVolume: BigInt!

  " Field to track the cumulative volume of the token in native amounts "
  cumulativeVolume: BigInt!

  " Field to track the daily volume of the token in USD "
  dailyVolumeUSD: BigDecimal!

  " Field to track the cumulative volume of the token in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT

  " For reward tokens awarded to borrowers "
  BORROW
}

type RewardToken @entity(immutable: true) {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: Bytes!

  " Reference to the actual token "
  token: Token!

  " The type of the reward token "
  type: RewardTokenType!
}

enum FeeType {
  " Protocol collects positive slippage that occurs as a result of a swap "
  POSITIVE_SLIPPAGE
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: Bytes!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type DexAggProtocol implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: Bytes!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  " The fee type for this protocol "
  feeType: FeeType!

  ##### Quantitative Data #####

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Field to track cumulative volume of tokens summed across swapped in USD - Takes preference for inward token volume in USD. Use outward volume in USD if inward price does not exist. "
  cumulativeNetVolumeUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Day ID of the most recent daily snapshot "
  lastSnapshotDayID: Int!

  " Timestamp of the last time this entity was updated "
  lastUpdateTimestamp: BigInt!

  " Block number of the last time this entity was updated "
  lastUpdateBlockNumber: BigInt!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

#########################
##### Virtual Pools #####
#########################
"""
Virtual Pools represent swapped token groups. DEX Aggs use liquidity pools from other protocols,
so we use virtual pools to track metrics for swaps between specific token groups.
"""
type VirtualPool @entity {
  " { `InputTokens: {Sorted token addresses separated by `-`}` + `OutputTokens: {Sorted token addresses separated by `-`}` } "
  id: Bytes!

  " The protocol this pool belongs to "
  protocol: DexAggProtocol!

  " Timestamp of the last swap of this type "
  timestamp: BigInt!

  " Block number of the last swap of this type "
  blockNumber: BigInt!

  " Input Tokens "
  tokensIn: [Token!]!

  " Output Tokens "
  tokensOut: [Token!]!

  " Field to track the cumulative volume of the inward tokens in native amounts "
  cumulativeVolumesIn: [BigInt!]!

  " Field to track the cumulative volume of the inward tokens in USD "
  cumulativeVolumesInUSD: [BigDecimal!]!

  " Field to track the cumulative volume of the outward tokens in native amounts "
  cumulativeVolumesOut: [BigInt!]!

  " Field to track the cumulative volume of the outward tokens in USD "
  cumulativeVolumesOutUSD: [BigDecimal!]!

  " Field to track cumulative volume of tokens summed across swapped in USD - Takes preference for inward token volume in USD. Use outward volume in USD if inward price does not exist. "
  cumulativeNetVolumeUSD: BigDecimal!

  ### Revenues do not count revenues towards the underlying DEXs used to execute the swap. ###

  " All revenue generated by the virtual pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the virtual pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the virtual pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  ##### Metrics #####

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Day ID of the most recent daily snapshot "
  lastSnapshotDayID: Int!

  " Timestamp of the last time this entity was updated "
  lastUpdateTimestamp: BigInt!

  " Block number of the last time this entity was updated "
  lastUpdateBlockNumber: BigInt!

  ##### Snapshots #####

  " Virtual pool daily snapshots "
  dailySnapshots: [VirtualPoolDailySnapshot!]!
    @derivedFrom(field: "virtualPool")
}

###################################
##### Virtual Pool Timeseries #####
###################################

type VirtualPoolDailySnapshot @entity {
  " { Address of the VirtualPool }-{ # of days since Unix epoch time } "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " VirtualPool "
  virtualPool: VirtualPool!

  " Field to track the daily volume of the inward tokens in native amounts "
  dailyVolumesIn: [BigInt!]!

  " Field to track the cumulative volume of the inward tokens in native amounts "
  cumulativeVolumesIn: [BigInt!]!

  " Field to track the daily volume of the inward tokens in USD "
  dailyVolumesInUSD: [BigDecimal!]!

  " Field to track the cumulative volume of the inward tokens in USD "
  cumulativeVolumesInUSD: [BigDecimal!]!

  " Field to track the daily volume of the outward tokens in native amounts "
  dailyVolumesOut: [BigInt!]!

  " Field to track the cumulative volume of the outward tokens in native amounts "
  cumulativeVolumesOut: [BigInt!]!

  " Field to track the daily volume of the outward tokens in USD "
  dailyVolumesOutUSD: [BigDecimal!]!

  " Field to track the cumulative volume of the outward tokens in USD "
  cumulativeVolumesOutUSD: [BigDecimal!]!

  " Field to track daily volume of tokens summed across all tokens in USD - Takes preference for inward token volume in USD. Use outward volume in USD if inward price does not exist. "
  dailyNetVolumeUSD: BigDecimal!

  " Field to track cumulative volume of tokens summed across swapped in USD - Takes preference for inward token volume in USD. Use outward volume in USD if inward price does not exist. "
  cumulativeNetVolumeUSD: BigDecimal!

  " Daily revenue generated by the virtual pool, accrued to the supply side. "
  dailySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the virtual pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily revenue generated by the virtual pool, accrued to the protocol. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the virtual pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the virtual pool. "
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the virtual pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  ##### Metrics #####

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: DexAggProtocol!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Total number of trades (swaps) in an hour "
  dailySwapCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type UsageMetricsHourlySnapshot @entity {
  " { # of hours since Unix epoch time } "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hour: Int!

  " Protocol this snapshot is associated with "
  protocol: DexAggProtocol!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " Total number of trades (swaps) in an hour "
  hourlySwapCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: DexAggProtocol!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " All trade volume occurred in a given day, in USD "
  dailyVolumeUSD: BigDecimal!

  " Field to track cumulative volume of tokens summed across swapped in USD - Takes preference for inward token volume in USD. Use outward volume in USD if inward price does not exist. "
  cumulativeNetVolumeUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  dailySupplySideRevenueUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

##############################
##### Account-Level Data #####
##############################

type Account @entity {
  " { Account address } "
  id: Bytes!

  " All historical trade volume in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Number of times this account has traded/swapped"
  swapCount: Int!

  " All swap events of this account "
  swaps: [Swap!]! @derivedFrom(field: "account")
}

############################
##### Event-Level Data #####
############################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
type Swap @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Gas used in this transaction. (Optional because not every chain will support this) "
  gasUsed: BigInt

  " Gas limit of the transaction that emitted this event "
  gasLimit: BigInt

  " Gas price of the transaction that emitted this event "
  gasPrice: BigInt

  " The protocol this transaction belongs to "
  protocol: DexAggProtocol!

  " Account that emitted this event "
  account: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Virtual Pool this swap occurred in "
  virtualPool: VirtualPool!

  " Tokens deposited into pool "
  tokensIn: [Token!]!

  " Amount of tokens deposited into pool in native units "
  amountsIn: [BigInt!]!

  " Amount of tokens deposited into pool in USD "
  amountsInUSD: [BigDecimal!]!

  " Tokens withdrawn from pool "
  tokensOut: [Token!]!

  " Amount of tokens withdrawn from pool in native units "
  amountsOut: [BigInt!]!

  " Amount of tokens withdrawn from pool in USD "
  amountsOutUSD: [BigDecimal!]!
}

# Helper entity for calculating daily/hourly active users
type ActiveAccount @entity(immutable: true) {
  " { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } "
  id: Bytes!
}
