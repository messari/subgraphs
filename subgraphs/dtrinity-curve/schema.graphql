type Transfer @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  receiver: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenExchange @entity(immutable: true) {
  id: Bytes!
  buyer: Bytes! # address
  sold_id: BigInt! # int128
  tokens_sold: BigInt! # uint256
  bought_id: BigInt! # int128
  tokens_bought: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenExchangeUnderlying @entity(immutable: true) {
  id: Bytes!
  buyer: Bytes! # address
  sold_id: BigInt! # int128
  tokens_sold: BigInt! # uint256
  bought_id: BigInt! # int128
  tokens_bought: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddLiquidity @entity(immutable: true) {
  id: Bytes!
  provider: Bytes! # address
  token_amounts: [BigInt!]! # uint256[]
  fees: [BigInt!]! # uint256[]
  invariant: BigInt! # uint256
  token_supply: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveLiquidity @entity(immutable: true) {
  id: Bytes!
  provider: Bytes! # address
  token_amounts: [BigInt!]! # uint256[]
  fees: [BigInt!]! # uint256[]
  token_supply: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveLiquidityOne @entity(immutable: true) {
  id: Bytes!
  provider: Bytes! # address
  token_id: BigInt! # int128
  token_amount: BigInt! # uint256
  coin_amount: BigInt! # uint256
  token_supply: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveLiquidityImbalance @entity(immutable: true) {
  id: Bytes!
  provider: Bytes! # address
  token_amounts: [BigInt!]! # uint256[]
  fees: [BigInt!]! # uint256[]
  invariant: BigInt! # uint256
  token_supply: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RampA @entity(immutable: true) {
  id: Bytes!
  old_A: BigInt! # uint256
  new_A: BigInt! # uint256
  initial_time: BigInt! # uint256
  future_time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StopRampA @entity(immutable: true) {
  id: Bytes!
  A: BigInt! # uint256
  t: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApplyNewFee @entity(immutable: true) {
  id: Bytes!
  fee: BigInt! # uint256
  offpeg_fee_multiplier: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetNewMATime @entity(immutable: true) {
  id: Bytes!
  ma_exp_time: BigInt! # uint256
  D_ma_time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Account @entity {
  id: Bytes! # address
  balance: BigInt! # uint256
}