# Subgraph Schema: Yield Aggregator
# Version: 1.1.0

enum Network {
  ARBITRUM
  AURORA
  AVALANCHE
  BSC
  CELO
  CRONOS
  ETHEREUM
  FANTOM
  HARMONY
  MOONBEAM
  MOONRIVER
  OPTIMISM
  POLYGON
  XDAI
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Mirrored from the smart contract "
  name: String!
  symbol: String!
  decimals: Int!
}

enum RewardTokenType {
  DEPOSIT
  BORROW
}

type RewardToken @entity {
  " Smart contract address of the reward token "
  id: ID!

  " Mirrored from the smart contract "
  name: String!
  symbol: String!
  decimals: Int!

  type: RewardTokenType!
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  network: Network!

  type: ProtocolType!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type YieldAggregator implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Yearn v3 "
  name: String!

  " Slug of protocol, including version. e.g. yearn-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  network: Network!

  type: ProtocolType!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Yield-Specific #####

  " All vaults that belong to this protocol "
  vaults: [Vault!]! @derivedFrom(field: "protocol")

  " All vaults id of the protocol "
  _vaultIds: [String!]!
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  " # of unique daily active users "
  activeUsers: Int!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  " Total number of transaction occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  totalValueLockedUSD: BigDecimal!

  " Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  supplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  protocolSideRevenueUSD: BigDecimal!

  " Total revenue accrued by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  totalRevenueUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

enum VaultFeeType {
  " One-time fee charged by the protocol during deposit, in percentages of the deposit token "
  DEPOSIT_FEE

  " One-time fee charged by the protocol during withdrawal, in percentages of the withdrawal token "
  WITHDRAWAL_FEE

  " Fees charged by the protocol during harvest, in percentages of the interest accrued "
  PERFORMANCE_FEE

  " Fees charged by the protocol on a periodic basis, in percentages of the total principal "
  MANAGEMENT_FEE
}

type VaultFee @entity {
  id: ID!

  feePercentage: BigDecimal!

  feeType: VaultFeeType!
}

###############################
##### Pool-Level Metadata #####
###############################

type Vault @entity {
  " Smart contract address of the vault "
  id: ID!

  protocol: YieldAggregator!

  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null
  # and inputToken balances are used to calculate returns

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the vault. The ordering should be the same as the vault's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Vault snapshots "
  snapshots: [VaultDailySnapshot!]! @derivedFrom(field: "vault")

  ##### Yield-Specific #####

  name: String

  symbol: String

  depositLimit: BigInt!

  fees: [VaultFee!]!

  deposits: [Deposit!]! @derivedFrom(field: "vault")

  withdraws: [Withdraw!]! @derivedFrom(field: "vault")
}

#################################
##### Pool-Level Timeseries #####
#################################

type VaultDailySnapshot @entity {
  " { Smart contract address of the vault }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The vault this snapshot belongs to "
  vault: Vault!

  totalValueLockedUSD: BigDecimal!

  " Total deposit volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
##### Transaction-Level Data #####
##################################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
interface Event {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Address that sent tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!
}

type Deposit implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are deposited into "
  to: String!

  " Address that deposited tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigInt!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!

  ##### Yield-Specific #####

  " The vault involving this transaction "
  vault: Vault!
}

type Withdraw implements Event @entity {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Market that tokens are withdrawn from "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  " Token withdrawn "
  asset: Token!

  " Amount of token withdrawn in native units "
  amount: BigInt!

  " Amount of token withdrawn in USD "
  amountUSD: BigDecimal!

  ##### Yield-Specific #####

  " The vault involving this transaction "
  vault: Vault!
}

# An account is a unique Ethereum address
# Helps to accumulate total unique users
type Account @entity {
  " Address of the account "
  id: ID!
}

# Helper entity for calculating daily active users
type DailyActiveAccount @entity {
  " { Days since Unix epoch }-{ Address of the account } "
  id: ID!
}

# Tracking every strategy of the vault
type _Strategy @entity {
  " Strategy Address "
  id: ID!
  vaultAddress: Vault!
  inputToken: Token!
}
