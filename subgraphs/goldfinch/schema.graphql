# Subgraph Schema: Lending Protocol
# Version: 2.0.1
# See https://github.com/messari/subgraphs/blob/master/docs/Schema.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT

  " For reward tokens awarded to borrowers "
  BORROW
}

type RewardToken @entity {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: ID!

  " Reference to the actual token "
  token: Token!

  " The type of the reward token "
  type: RewardTokenType!
}

enum LendingType {
  " Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market "
  CDP

  " Pooled protocols pool all users assets into a single market "
  POOLED
}

enum RiskType {
  " Global risk means each users position in a market is combined for one score to determine if they can be liquidated "
  GLOBAL

  " Isolated risk means each users position in a market or CDP is isolated for risk of liquidation "
  ISOLATED
}

enum InterestRateType {
  " Stable interest rate (e.g. Aave) "
  STABLE

  " Variable interest rate (e.g. Compound) "
  VARIABLE

  " Fixed interest rate (e.g. Notional) "
  FIXED
}

enum InterestRateSide {
  " Interest rate accrued by lenders "
  LENDER

  " Interest rate paid by borrowers "
  BORROWER
}

enum PositionSide {
  " Position opened as a lender "
  LENDER

  " Position opened as a borrower "
  BORROWER
}

# Most markets only have a single interest rate given a specific type.
# However, fixed term lending protocols can have multiple rates with
# different duration/maturity per market. You can append a counter
# to the IDs to differentiate.
type InterestRate @entity {
  " { Interest rate side }-{ Interest rate type }-{ Market ID }-{ Optional: # days/hours since epoch time } "
  id: ID!

  " Interest rate in percentage APY. E.g. 5.21% should be stored as 5.21 "
  rate: BigDecimal!

  " Duration of the loan in days. Only applies to fixed term lending (e.g. Notional) "
  duration: Int

  " Maturity of the loan in block height. Only applies to fixed term lending (e.g. Notional) "
  maturityBlock: BigInt

  " The party the interest is paid to / received from "
  side: InterestRateSide!

  " The type of interest rate (e.g. stable, fixed, variable, etc) "
  type: InterestRateType!
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Total number of pools "
  totalPoolCount: Int!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type LendingProtocol implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Aave v2 "
  name: String!

  " Slug of protocol, including version. e.g. aave-v2 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  " The specific lending protocol type "
  lendingType: LendingType

  " Risk type of the lending protocol "
  riskType: RiskType

  " Tokens that can be minted. Only applies to CDP "
  mintedTokens: [Token!]

  ##### Quantitative Data #####

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of cumulative depositors "
  cumulativeUniqueDepositors: Int!

  " Number of cumulative borrowers "
  cumulativeUniqueBorrowers: Int!

  " Number of cumulative liquidators (accounts that performed liquidation) "
  cumulativeUniqueLiquidators: Int!

  " Number of cumulative liquidatees (accounts that got liquidated) "
  cumulativeUniqueLiquidatees: Int!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Current balance of all deposited assets, in USD. Note this metric should be the same as TVL. "
  totalDepositBalanceUSD: BigDecimal!

  " Sum of all historical deposits in USD (only considers deposits and not withdrawals) "
  cumulativeDepositUSD: BigDecimal!

  " Current balance of all borrowed/minted assets (not historical cumulative), in USD. "
  totalBorrowBalanceUSD: BigDecimal!

  " Sum of all historical borrows/mints in USD (i.e. total loan origination). "
  cumulativeBorrowUSD: BigDecimal!

  " Sum of all historical liquidations in USD "
  cumulativeLiquidateUSD: BigDecimal!

  " Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP "
  mintedTokenSupplies: [BigInt!]

  " Total number of pools "
  totalPoolCount: Int!

  " Total number of open positions "
  openPositionCount: Int!

  " Total number of positions (open and closed) "
  cumulativePositionCount: Int!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Markets #####

  " All markets that belong to this protocol "
  markets: [Market!]! @derivedFrom(field: "protocol")

  " List of market IDs  "
  _marketIDs: [String!]

  " Address of GoldfinchConfig Contract "
  _GoldfinchConfig: String
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: LendingProtocol!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of unique daily depositors "
  dailyActiveDepositors: Int!

  " Number of cumulative depositors "
  cumulativeUniqueDepositors: Int!

  " Number of unique daily borrowers "
  dailyActiveBorrowers: Int!

  " Number of cumulative borrowers "
  cumulativeUniqueBorrowers: Int!

  " Number of unique daily liquidators (accounts that performed liquidation) "
  dailyActiveLiquidators: Int!

  " Number of cumulative liquidators (accounts that performed liquidation) "
  cumulativeUniqueLiquidators: Int!

  " Number of unique daily liquidatees (accounts that got liquidated) "
  dailyActiveLiquidatees: Int!

  " Number of cumulative liquidatees (accounts that got liquidated) "
  cumulativeUniqueLiquidatees: Int!

  " Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Total number of deposits in a day "
  dailyDepositCount: Int!

  " Total number of withdrawals in a day "
  dailyWithdrawCount: Int!

  " Total number of borrows/mints in a day "
  dailyBorrowCount: Int!

  " Total number of repayments/burns in a day "
  dailyRepayCount: Int!

  " Total number of liquidations in a day "
  dailyLiquidateCount: Int!

  " Total number of pools "
  totalPoolCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type UsageMetricsHourlySnapshot @entity {
  " { # of hours since Unix epoch time } "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: LendingProtocol!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " Total number of deposits in an hour "
  hourlyDepositCount: Int!

  " Total number of withdrawals in an hour "
  hourlyWithdrawCount: Int!

  " Total number of borrows/mints in an hour "
  hourlyBorrowCount: Int!

  " Total number of repayments/burns in an hour "
  hourlyRepayCount: Int!

  " Total number of liquidations in an hour "
  hourlyLiquidateCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: LendingProtocol!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP "
  mintedTokenSupplies: [BigInt!]

  ##### Revenue #####

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  dailySupplySideRevenueUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  ##### Lending Activities #####

  " Current balance of all deposited assets, in USD. Note this metric should be the same as TVL. "
  totalDepositBalanceUSD: BigDecimal!

  " Total assets deposited on a given day, in USD "
  dailyDepositUSD: BigDecimal!

  " Sum of all historical deposits in USD (only considers deposits and not withdrawals) "
  cumulativeDepositUSD: BigDecimal!

  " Current balance of all borrowed/minted assets, in USD. "
  totalBorrowBalanceUSD: BigDecimal!

  " Total assets borrowed/minted on a given day, in USD. "
  dailyBorrowUSD: BigDecimal!

  " Sum of all historical borrows/mints in USD (i.e. total loan origination). "
  cumulativeBorrowUSD: BigDecimal!

  " Total assets liquidated on a given day, in USD. "
  dailyLiquidateUSD: BigDecimal!

  " Sum of all historical liquidations in USD "
  cumulativeLiquidateUSD: BigDecimal!

  " Total assets withdrawn on a given day, in USD. "
  dailyWithdrawUSD: BigDecimal!

  " Total assets repaid on a given day, in USD. "
  dailyRepayUSD: BigDecimal!
}

###############################
##### Pool-Level Metadata #####
###############################

type Market @entity {
  " Smart contract address of the market "
  id: ID!

  " The protocol this pool belongs to "
  protocol: LendingProtocol!

  " Name of market "
  name: String

  " Is this market active or is it frozen "
  isActive: Boolean!

  " Can you use the output token as collateral "
  canUseAsCollateral: Boolean!

  " Can you borrow from this market "
  canBorrowFrom: Boolean!

  " Maximum loan-to-value ratio as a percentage value (e.g. 75% for DAI in Aave) "
  maximumLTV: BigDecimal!

  " Liquidation threshold as a percentage value (e.g. 80% for DAI in Aave). When it is reached, the position is defined as undercollateralised and could be liquidated "
  liquidationThreshold: BigDecimal!

  " Liquidation penalty (or the liquidation bonus for liquidators) as a percentage value. It is the penalty/bonus price on the collateral when liquidators purchase it as part of the liquidation of a loan that has passed the liquidation threshold "
  liquidationPenalty: BigDecimal!

  " Token that need to be deposited to take a position in protocol "
  inputToken: Token!

  " Token that is minted to track ownership of position in protocol (e.g. aToken, cToken). Leave as null if doesn't exist "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  " All interest rates / fees allowed in the market. Interest rate should be in APY percentage "
  rates: [InterestRate!]!

  " Current TVL (Total Value Locked) of this market "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the market, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the market, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the market. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Current balance of all deposited assets (not historical cumulative), in USD "
  totalDepositBalanceUSD: BigDecimal!

  " Sum of all historical deposits in USD (only considers deposits and not withdrawals) "
  cumulativeDepositUSD: BigDecimal!

  " Current balance of all borrowed/minted assets (not historical cumulative), in USD "
  totalBorrowBalanceUSD: BigDecimal!

  " Sum of all historical borrows/mints in USD (i.e. total loan origination) "
  cumulativeBorrowUSD: BigDecimal!

  " Sum of all historical liquidations in USD "
  cumulativeLiquidateUSD: BigDecimal!

  ##### Token Balances #####

  " Amount of input tokens in the market "
  inputTokenBalance: BigInt!

  " Price per share of input token in USD "
  inputTokenPriceUSD: BigDecimal!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Amount of input token per full share of output token. Only applies when the output token exists (note this is a ratio and not a percentage value, i.e. 1.05 instead of 105%) "
  exchangeRate: BigDecimal

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  ##### Account/Position Data #####

  " All positions in this market "
  positions: [Position!]! @derivedFrom(field: "market")

  " Number of positions in this market "
  positionCount: Int!

  " Number of open positions in this market "
  openPositionCount: Int!

  " Number of closed positions in this market "
  closedPositionCount: Int!

  " Number of lending positions in this market "
  lendingPositionCount: Int!

  " Number of borrowing positions in this market "
  borrowingPositionCount: Int!

  ##### Snapshots #####

  " Market daily snapshots "
  dailySnapshots: [MarketDailySnapshot!]! @derivedFrom(field: "market")

  " Market hourly snapshots "
  hourlySnapshots: [MarketHourlySnapshot!]! @derivedFrom(field: "market")

  ##### Events #####

  " All deposits made to this market "
  deposits: [Deposit!]! @derivedFrom(field: "market")

  " All withdrawals made from this market "
  withdraws: [Withdraw!]! @derivedFrom(field: "market")

  " All borrows from this market "
  borrows: [Borrow!]! @derivedFrom(field: "market")

  " All repayments to this market "
  repays: [Repay!]! @derivedFrom(field: "market")

  " All liquidations made to this market "
  liquidates: [Liquidate!]! @derivedFrom(field: "market")

  " Address of pool token "
  _poolToken: String

  " Address of creditLine contract "
  _creditLine: String

  " Address of borrower (tranchedPool has one borrower per pool) "
  _borrower: String

  " timestamp when for interest accrual (used for interest rates calculation) "
  _interestTimestamp: BigInt

  " cumulative Reward Emission Amount "
  _cumulativeRewardAmount: BigInt

  " timestamp when reward emission started "
  _rewardTimestamp: BigInt

  " Is the market a migrated tranched pool "
  _isMigratedTranchedPool: Boolean
}

#################################
##### Pool-Level Timeseries #####
#################################

type MarketDailySnapshot @entity {
  " { Smart contract address of the market }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: LendingProtocol!

  " The pool this snapshot belongs to "
  market: Market!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Quantitative Data #####

  " All interest rates / fees allowed in the market. Interest rate should be in APY percentage "
  rates: [InterestRate!]!

  " Current TVL (Total Value Locked) of this market "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the market, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily revenue generated by the market, accrued to the supply side. "
  dailySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the market, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the market, accrued to the protocol. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the market. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Daily revenue generated by the market. "
  dailyTotalRevenueUSD: BigDecimal!

  " Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL. "
  totalDepositBalanceUSD: BigDecimal!

  " Sum of all deposits made on a given day, in USD "
  dailyDepositUSD: BigDecimal!

  " Sum of all historical deposits in USD (only considers deposits and not withdrawals) "
  cumulativeDepositUSD: BigDecimal!

  " Current balance of all borrowed/minted assets (not historical cumulative), in USD. "
  totalBorrowBalanceUSD: BigDecimal!

  " Sum of all borrows/mints made on a given day, in USD "
  dailyBorrowUSD: BigDecimal!

  " Sum of all historical borrows/mints in USD (i.e. total loan origination) "
  cumulativeBorrowUSD: BigDecimal!

  " Total assets liquidated on a given day, in USD. "
  dailyLiquidateUSD: BigDecimal!

  " Sum of all historical liquidations in USD "
  cumulativeLiquidateUSD: BigDecimal!

  " Total assets withdrawn on a given day, in USD. "
  dailyWithdrawUSD: BigDecimal!

  " Total assets repaid on a given day, in USD. "
  dailyRepayUSD: BigDecimal!

  ##### Token Balances #####

  " Amount of input token in the market. "
  inputTokenBalance: BigInt!

  " Price per share of input token in USD "
  inputTokenPriceUSD: BigDecimal!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Amount of input token per full share of output token. Only applies when the output token exists "
  exchangeRate: BigDecimal

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]
}

type MarketHourlySnapshot @entity {
  " { Smart contract address of the market }-{ # of hours since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: LendingProtocol!

  " The pool this snapshot belongs to "
  market: Market!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Quantitative Data #####

  " All interest rates / fees allowed in the market. Interest rate should be in APY percentage "
  rates: [InterestRate!]!

  " Current TVL (Total Value Locked) of this market "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the market, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the market, accrued to the supply side. "
  hourlySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the market, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the market, accrued to the protocol. "
  hourlyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the market. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Hourly revenue generated by the market. "
  hourlyTotalRevenueUSD: BigDecimal!

  " Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL. "
  totalDepositBalanceUSD: BigDecimal!

  " Sum of all deposits made in a given hour, in USD "
  hourlyDepositUSD: BigDecimal!

  " Sum of all historical deposits in USD (only considers deposits and not withdrawals) "
  cumulativeDepositUSD: BigDecimal!

  " Current balance of all borrowed/minted assets (not historical cumulative), in USD. "
  totalBorrowBalanceUSD: BigDecimal!

  " Sum of all borrows/mints made in a given hour, in USD "
  hourlyBorrowUSD: BigDecimal!

  " Sum of all historical borrows/mints in USD (i.e. total loan origination) "
  cumulativeBorrowUSD: BigDecimal!

  " Total assets liquidated in a given hour, in USD. "
  hourlyLiquidateUSD: BigDecimal!

  " Sum of all historical liquidations in USD "
  cumulativeLiquidateUSD: BigDecimal!

  " Total assets withdrawn on a given hour, in USD. "
  hourlyWithdrawUSD: BigDecimal!

  " Total assets repaid on a given hour, in USD. "
  hourlyRepayUSD: BigDecimal!

  ##### Token Balances #####

  " Amount of input token in the market. "
  inputTokenBalance: BigInt!

  " Price per share of input token in USD "
  inputTokenPriceUSD: BigDecimal!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Amount of input token per full share of output token. Only applies when the output token exists "
  exchangeRate: BigDecimal

  " Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]
}

##############################
##### Account-Level Data #####
##############################

type Account @entity {
  " { Account address } "
  id: ID!

  " Number of positions this account has "
  positionCount: Int!

  " All positions that belong to this account "
  positions: [Position!]! @derivedFrom(field: "account")

  " Number of open positions this account has "
  openPositionCount: Int!

  " Number of closed positions this account has "
  closedPositionCount: Int!

  " Number of deposits this account made "
  depositCount: Int!

  " All deposit events of this account "
  deposits: [Deposit!]! @derivedFrom(field: "account")

  " Number of withdrawals this account made "
  withdrawCount: Int!

  " All withdraw events of this account "
  withdraws: [Withdraw!]! @derivedFrom(field: "account")

  " Number of borrows this account made "
  borrowCount: Int!

  " All borrow events of this account "
  borrows: [Borrow!]! @derivedFrom(field: "account")

  " Number of repays this account made "
  repayCount: Int!

  " All repay events of this account "
  repays: [Repay!]! @derivedFrom(field: "account")

  " Number of times this account liquidated a position "
  liquidateCount: Int!

  " All liquidation events where this account was the liquidator "
  liquidates: [Liquidate!]! @derivedFrom(field: "liquidator")

  " Number of times this account has been liquidated "
  liquidationCount: Int!

  " All liquidation events where this account got liquidated "
  liquidations: [Liquidate!]! @derivedFrom(field: "liquidatee")
}

type Position @entity {
  " { Account address }-{ Market address }-{ Position Side }-{ Counter } "
  id: ID!

  " Account that owns this position "
  account: Account!

  " The market in which this position was opened "
  market: Market!

  " The hash of the transaction that opened this position "
  hashOpened: String!

  " The hash of the transaction that closed this position "
  hashClosed: String

  " Block number of when the position was opened "
  blockNumberOpened: BigInt!

  " Timestamp when the position was opened "
  timestampOpened: BigInt!

  " Block number of when the position was closed (0 if still open) "
  blockNumberClosed: BigInt

  " Timestamp when the position was closed (0 if still open) "
  timestampClosed: BigInt

  " Side of the position (either lender or borrower) "
  side: PositionSide!

  " Whether this position has been enabled as a collateral (only applies to LENDER positions). For protocols (e.g. MakerDAO) that doesn't require enabling explicitly, this will always be true. "
  isCollateral: Boolean

  " Token balance in this position, in native amounts "
  balance: BigInt!

  " Number of deposits related to this position "
  depositCount: Int!

  " All deposit events of this position "
  deposits: [Deposit!]! @derivedFrom(field: "position")

  " Number of withdrawals related to this position "
  withdrawCount: Int!

  " All withdraw events of this position "
  withdraws: [Withdraw!]! @derivedFrom(field: "position")

  " Number of borrows related to this position "
  borrowCount: Int!

  " All borrow events of this position "
  borrows: [Borrow!]! @derivedFrom(field: "position")

  " Number of repays related to this position "
  repayCount: Int!

  " All repay events of this position "
  repays: [Repay!]! @derivedFrom(field: "position")

  " Number of liquidations related to this position "
  liquidationCount: Int!

  " Liquidation event related to this position (if exists) "
  liquidations: [Liquidate!]! @derivedFrom(field: "position")

  " Position daily snapshots for open positions "
  snapshots: [PositionSnapshot!]! @derivedFrom(field: "position")
}

# Unlike other snapshots that are taken at a fixed time interval. Position
# snapshots should be taken after every event, including the opening and
# closing events. This will prevent an ever growing number of snapshots
# for positions that are not moving. As we are only recording the balance
# in token amounts instead of in USD, this will work well.
# Note that we only take snapshot for open positions
type PositionSnapshot @entity {
  " { Position ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that triggered this snapshot "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Nonce of the transaction that triggered this snapshot "
  nonce: BigInt!

  " Position of this snapshot "
  position: Position!

  " Token balance in this position, in native amounts "
  balance: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
##### Event-Level Data #####
##################################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
type Deposit @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that deposited tokens "
  account: Account!

  " The market tokens are deposited to "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigInt!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!
}

type Withdraw @entity(immutable: true) {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that withdrew tokens "
  account: Account!

  " The market tokens are withdrew from "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Token withdrawn "
  asset: Token!

  # Certain protocols (e.g. MakerDAO) uses a negative amount for withdraws. You
  # should convert them to positive for consistency.
  # e.g. Event log 27 in https://etherscan.io/tx/0xe957cf6252c7712c218c842c1ade672bf5ce529f8512f7a5ce7ebc8afa4ec690#eventlog

  " Amount of token withdrawn in native units "
  amount: BigInt!

  " Amount of token withdrawn in USD "
  amountUSD: BigDecimal!
}

# For CDPs, use this for mint events
type Borrow @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that borrowed/minted tokens "
  account: Account!

  " The market tokens are borrowed/minted from "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Token borrowed "
  asset: Token!

  " Amount of token borrowed in native units "
  amount: BigInt!

  " Amount of token borrowed in USD "
  amountUSD: BigDecimal!
}

# For CDPs, use this for burn events
type Repay @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that repaid/burned tokens "
  account: Account!

  " The market tokens are repaid/burned to "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Token repaid/burned "
  asset: Token!

  " Amount of token repaid/burned in native units "
  amount: BigInt!

  " Amount of token repaid/burned in USD "
  amountUSD: BigDecimal!
}

type Liquidate @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that carried out the liquidation "
  liquidator: Account!

  " Account that got liquidated "
  liquidatee: Account!

  " The market of the collateral being used "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Asset repaid (borrowed) "
  asset: Token!

  " Amount of collateral liquidated in native units "
  amount: BigInt!

  " Amount of collateral liquidated in USD "
  amountUSD: BigDecimal!

  " Amount of profit from liquidation in USD "
  profitUSD: BigDecimal!
}

# Helper entity for calculating daily/hourly active users
type ActiveAccount @entity {
  " { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } "
  id: ID!
}

# Helper entity for mapping TokenID to market (tranched pool) for calculating
# reward emission
type _PoolToken @entity {
  " ERC721 PoolToken ID "
  id: ID!
  " market id (pool address) "
  market: Market!
  " owner address "
  owner: String
  " principle amount "
  amount: BigInt
}

type _PositionCounter @entity {
  " { Account address }-{ Market address }-{ Position Side } "
  id: ID!
  " Next count "
  nextCount: Int!
}

### Entity below are from goldfinch's official subgraph ###
"""
Notes
- address are mapped as IDs
- We are using reverse lookups to create virtual fields:
  https://thegraph.com/docs/developer/create-subgraph-hosted#reverse-lookups
"""
type SeniorPool @entity {
  id: ID!
  latestPoolStatus: SeniorPoolStatus!
  investmentsMade: [TranchedPool!]!
}

enum StakedPositionType {
  Fidu
  CurveLP
}

type SeniorPoolStakedPosition @entity {
  id: ID!
  user: User!
  initialAmount: BigInt!
  amount: BigInt!
  positionType: StakedPositionType!
  """
  endTime has to be queried via RPC on client due to a complication: calling positions() on the StakingRewards contract is difficult due to its signature changing over time.
  """
  startTime: BigInt!
  totalRewardsClaimed: BigInt!
}

type SeniorPoolStatus @entity {
  """
  This entity is a singleton, so the id is always "1"
  """
  id: ID!
  rawBalance: BigInt!
  compoundBalance: BigInt!
  balance: BigInt!
  """
  The actual amount of USDC associated with the Senior Pool contract, can also be thought of as the Senior Pool's liquidity in USDC
  """
  usdcBalance: BigInt!
  sharePrice: BigInt!
  totalShares: BigInt!
  totalPoolAssets: BigInt!
  totalPoolAssetsUsdc: BigInt!
  totalLoansOutstanding: BigInt!
  cumulativeWritedowns: BigInt!
  tranchedPools: [TranchedPool!]!
  cumulativeDrawdowns: BigInt! # TODO requries tranched pool data
  estimatedTotalInterest: BigDecimal!
  estimatedApy: BigDecimal!
  estimatedApyFromGfiRaw: BigDecimal!
  defaultRate: BigInt! # TODO requires cumulativeDrawdowns
  remainingCapacity: BigInt # TODO requires goldfinchConfig.totalFundsLimit
}

type User @entity {
  id: ID!
  seniorPoolStakedPositions: [SeniorPoolStakedPosition!]!
    @derivedFrom(field: "user")
  vaultedStakedPositions: [VaultedStakedPosition!]! @derivedFrom(field: "user")

  tranchedPoolTokens: [TranchedPoolToken!]!
  vaultedPoolTokens: [VaultedPoolToken!]! @derivedFrom(field: "user")
  zaps: [Zap!]! @derivedFrom(field: "user")

  isNonUsIndividual: Boolean!
  isUsAccreditedIndividual: Boolean!
  isUsNonAccreditedIndividual: Boolean!
  isUsEntity: Boolean!
  isNonUsEntity: Boolean!
  isGoListed: Boolean!

  transactions: [Transaction!]! @derivedFrom(field: "user")

  communityRewardsTokens: [CommunityRewardsToken!]! @derivedFrom(field: "user")
}

type SeniorTrancheInfo @entity {
  id: ID!
  trancheId: BigInt!
  tranchedPool: TranchedPool!
  lockedUntil: BigInt!
  principalDeposited: BigInt!
  principalSharePrice: BigInt!
  interestSharePrice: BigInt!
}

type JuniorTrancheInfo @entity {
  id: ID!
  trancheId: BigInt!
  tranchedPool: TranchedPool!
  lockedUntil: BigInt!
  principalDeposited: BigInt!
  principalSharePrice: BigInt!
  interestSharePrice: BigInt!
}

type CreditLine @entity {
  id: ID!
  borrower: Bytes!
  tranchedPool: TranchedPool! @derivedFrom(field: "creditLine")
  limit: BigInt!
  maxLimit: BigInt!
  interestApr: BigInt!
  balance: BigInt!
  interestAccruedAsOf: BigInt!
  paymentPeriodInDays: BigInt!
  termInDays: BigInt!
  nextDueTime: BigInt!
  interestOwed: BigInt!
  termEndTime: BigInt!
  termStartTime: BigInt!
  lastFullPaymentTime: BigInt!
  version: TranchedPoolCreditLineVersion!
  lateFeeApr: BigDecimal!
  interestAprDecimal: BigDecimal!
  isEligibleForRewards: Boolean!
}

enum TranchedPoolCreditLineVersion {
  BEFORE_V2_2
  V2_2
}

enum UidType {
  NON_US_INDIVIDUAL
  US_ACCREDITED_INDIVIDUAL
  US_NON_ACCREDITED_INDIVIDUAL
  US_ENTITY
  NON_US_ENTITY
}

type TranchedPool @entity {
  id: ID!
  estimatedJuniorApy: BigDecimal!
  estimatedJuniorApyFromGfiRaw: BigDecimal!
  estimatedTotalAssets: BigInt!
  estimatedLeverageRatio: BigInt
  remainingCapacity: BigInt!

  creditLine: CreditLine!
  isPaused: Boolean!
  """
  Set to true for tranched pools that were created before the advent of junior/senior tranches. These pools have junior investment only, and they are considered legacy
  """
  isV1StyleDeal: Boolean!
  juniorFeePercent: BigInt!
  reserveFeePercent: BigInt!
  totalDeposited: BigInt!
  juniorDeposited: BigInt!
  totalDeployed: BigInt!
  fundableAt: BigInt!
  """
  This number is only becomes non-zero after the senior pool invests in a pool, which happens after the junior portion is locked
  """
  estimatedSeniorPoolContribution: BigInt!
  backers: [User!]!
  numBackers: Int!
  tokens: [TranchedPoolToken!]!
  seniorTranches: [SeniorTrancheInfo!]! @derivedFrom(field: "tranchedPool")
  juniorTranches: [JuniorTrancheInfo!]! @derivedFrom(field: "tranchedPool")
  version: TranchedPoolCreditLineVersion!
  createdAt: BigInt!
  allowedUidTypes: [UidType!]!

  transactions: [Transaction!]! @derivedFrom(field: "tranchedPool")

  principalAmountRepaid: BigInt!
  interestAmountRepaid: BigInt!
  """
  The amount of interest determined to be owed to this pool, calculated at the very beginning
  """
  initialInterestOwed: BigInt!
}

type TranchedPoolToken @entity {
  id: ID! # Set to tokenId
  mintedAt: BigInt!
  user: User!
  tranchedPool: TranchedPool!
  tranche: BigInt!
  principalAmount: BigInt!
  principalRedeemed: BigInt!
  interestRedeemed: BigInt!
  interestRedeemable: BigInt!
  principalRedeemable: BigInt!

  rewardsClaimable: BigInt!
  rewardsClaimed: BigInt!

  """
  Refers to the rewards that are received from LP rewards matching
  """
  stakingRewardsClaimable: BigInt!
  """
  Refers to the rewards that are received from LP rewards matching
  """
  stakingRewardsClaimed: BigInt!
}

type StakingRewardsData @entity {
  id: ID! # Set to "1" because this is a singleton
  """
  The earn rate is a measure per second
  """
  currentEarnRatePerToken: BigInt!
}

type BackerRewardsData @entity {
  id: ID! # Set to "1" because this is a singleton
  contractAddress: String!
  totalRewards: BigInt!
  totalRewardPercentOfTotalGFI: BigDecimal!
  """
  Note that this value is measured in GFI, not dollars
  """
  maxInterestDollarsEligible: BigInt!
}

enum TransactionCategory {
  SENIOR_POOL_DEPOSIT
  SENIOR_POOL_DEPOSIT_AND_STAKE
  SENIOR_POOL_STAKE
  SENIOR_POOL_WITHDRAWAL
  SENIOR_POOL_UNSTAKE_AND_WITHDRAWAL
  # NOTE: We do not need to define a `SENIOR_POOL_UNSTAKE_AND_WITHDRAWAL_MULTIPLE` transaction
  # category, because UnstakedAndWithdrew and UnstakedAndWithdrewMultiple events are emitted by
  # the StakingRewards contract mutually exclusively, so for indexing them in the subgraph, we
  # can combine both of them into the same category.
  SENIOR_POOL_UNSTAKE
  # NOTE: We do not define a `SENIOR_POOL_UNSTAKE_MULTIPLE` transaction category for two reasons:
  # (1) `Unstaked` and `UnstakedMultiple` events are not emitted mutually exclusively by the StakingRewards
  # contract; on the contrary, for every `UnstakedMultiple` event, a corresponding set of `Unstaked`
  # events are emitted whose params collectively comprise the same data as the `UnstakedMultiple` event.
  # So we don't need to index `UnstakedMultiple` events for the sake of obtaining any unique data. And
  # doing so would only create a need for the consumer of the subgraph to de-duplicate between an
  # `UnstakedMultiple` event and its corresponding set of `Unstaked` events.
  # (2) The positions unstaked in an `UnstakedMultiple` event can be of different types (e.g. FIDU
  # and Curve LP), so their respective amounts are not necessarily commensurable, so summing
  # them to a total amount would be inappropriate. Our `Transaction` schema currently supports
  # only a single `amount` value for the transaction, so it "wants" us to do such summing. But we
  # cannot.
  SENIOR_POOL_REDEMPTION
  TRANCHED_POOL_DEPOSIT
  TRANCHED_POOL_WITHDRAWAL
  TRANCHED_POOL_REPAYMENT
  TRANCHED_POOL_DRAWDOWN
  UID_MINTED
  CURVE_FIDU_BUY
  CURVE_FIDU_SELL
  STAKING_REWARDS_CLAIMED
  BACKER_REWARDS_CLAIMED
  COMMUNITY_REWARDS_CLAIMED
  MEMBERSHIP_REWARDS_CLAIMED
  MEMBERSHIP_GFI_DEPOSIT
  MEMBERSHIP_GFI_WITHDRAWAL
  MEMBERSHIP_CAPITAL_DEPOSIT
  MEMBERSHIP_CAPITAL_WITHDRAWAL
}

enum SupportedCrypto {
  USDC
  GFI
  FIDU
  CURVE_LP
}

enum SupportedNft {
  STAKING_TOKEN
  POOL_TOKEN
  UID
}

type Transaction @entity(immutable: true) {
  """
  This is a concatenation of transaction hash with log index. One transaction can result in more than one of this entity.
  """
  id: Bytes!
  transactionHash: Bytes!
  category: TransactionCategory!
  user: User!
  timestamp: Int!
  blockNumber: Int!

  sentAmount: BigInt
  sentToken: SupportedCrypto
  sentNftId: String
  sentNftType: SupportedNft

  receivedAmount: BigInt
  receivedToken: SupportedCrypto
  receivedNftId: String
  receivedNftType: SupportedNft

  tranchedPool: TranchedPool

  fiduPrice: BigInt
}

type Zap @entity {
  """
  Note that the ID of a Zap is the same as the ID of the (tranched) pool token it's tied to. Makes it easy to find a Zap corresponding to a pool token.
  """
  id: ID!
  amount: BigInt!
  user: User!
  seniorPoolStakedPosition: SeniorPoolStakedPosition!
  poolToken: TranchedPoolToken!
  tranchedPool: TranchedPool!
}

enum CommunityRewardsTokenSource {
  MERKLE_DISTRIBUTOR
  BACKER_MERKLE_DISTRIBUTOR
}

type CommunityRewardsToken @entity {
  id: ID!
  source: CommunityRewardsTokenSource!
  index: Int!
  user: User!
  totalGranted: BigInt!
  totalClaimed: BigInt!
  cliffLength: BigInt!
  vestingLength: BigInt!
  vestingInterval: BigInt!
  grantedAt: BigInt!
  revokedAt: BigInt!
  startTime: BigInt!
  endTime: BigInt!
}

type MembershipEpoch @entity(immutable: true) {
  id: ID!
  epoch: BigInt! # The epoch number
  totalRewards: BigInt! # Measured in FIDU
  finalizedAt: Int!
}

type VaultedGfi @entity {
  id: ID!
  user: User!
  amount: BigInt!
  vaultedAt: Int!
}

type VaultedStakedPosition @entity {
  id: ID!
  user: User!
  usdcEquivalent: BigInt!
  vaultedAt: Int!
  seniorPoolStakedPosition: SeniorPoolStakedPosition!
}

type VaultedPoolToken @entity {
  id: ID!
  user: User!
  usdcEquivalent: BigInt!
  vaultedAt: Int!
  poolToken: TranchedPoolToken!
  tranchedPool: TranchedPool!
}

type Membership @entity {
  id: ID!
  user: User!
  eligibleScore: BigInt!
  nextEpochScore: BigInt!
}

type MembershipRoster @entity {
  id: ID! # hard-coded to 1. This is a singleton.
  members: [Membership!]!
  eligibleScoreTotal: BigInt!
  nextEpochScoreTotal: BigInt!
}

type MembershipRewardDisbursement @entity(immutable: true) {
  id: ID!
  user: User!
  epoch: BigInt! # The epoch number
  allocatedAt: Int!
  rewards: BigInt!
}
