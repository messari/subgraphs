{
  "address": "0x3c705dB336C81c7FEFC5746e283aB2c0781A4B7b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "arrayLength1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "arrayLength2",
          "type": "uint256"
        }
      ],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotDrawdownWhenDrawdownsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotReinitialize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSetAllowedUIDTypesAfterDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "existingFundableAt",
          "type": "uint256"
        }
      ],
      "name": "CannotSetFundableAtAfterFundableAt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSubmitCallInLockupPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotWithdrawInDrawdownPeriod",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCurrentlyDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "DepositExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "drawdownAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "existingPrincipalPaid",
          "type": "uint256"
        }
      ],
      "name": "DrawdownAmountExceedsDeposits",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "callSubmissionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCallSubmissionAmount",
          "type": "uint256"
        }
      ],
      "name": "ExcessiveCallSubmissionAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numPrincipalPeriods",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumNumPrincipalPeriods",
          "type": "uint256"
        }
      ],
      "name": "HasInsufficientTranches",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "checkpointedAt",
          "type": "uint256"
        }
      ],
      "name": "InputTimestampBeforeCheckpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputTimestamp",
          "type": "uint256"
        }
      ],
      "name": "InputTimestampInThePast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "InvalidCallSubmissionPoolToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum LoanPhase",
          "name": "currentLoanPhase",
          "type": "uint8"
        },
        {
          "internalType": "enum LoanPhase",
          "name": "validLoanPhase",
          "type": "uint8"
        }
      ],
      "name": "InvalidLoanPhase",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numLockupPeriods",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodsPerPrincipalPeriod",
          "type": "uint256"
        }
      ],
      "name": "InvalidNumLockupPeriods",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "InvalidUIDForDepositor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputTranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uncalledTranche",
          "type": "uint256"
        }
      ],
      "name": "MustDepositToUncalledTranche",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputTranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uncalledTranche",
          "type": "uint256"
        }
      ],
      "name": "MustSubmitCallToUncalledTranche",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "attemptedPrincipalPayment",
          "type": "uint256"
        }
      ],
      "name": "NoBalanceToPay",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "callSubmissionSender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NotAuthorizedToSubmitCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawSender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NotAuthorizedToWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lastCallRequestPeriod",
          "type": "uint256"
        }
      ],
      "name": "OutOfCallRequestPeriodBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nonLockerAddress",
          "type": "address"
        }
      ],
      "name": "RequiresLockerRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLateToSubmitCallRequests",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawableAmount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAmountExceedsWithdrawable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroCallSubmissionAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDepositAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDrawdownAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroPaymentAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroWithdrawAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "originalTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "callRequestedTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "remainingTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "callAmount",
          "type": "uint256"
        }
      ],
      "name": "CallRequestSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "loan",
          "type": "address"
        }
      ],
      "name": "DepositsLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DrawdownMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "DrawdownsUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "EmergencyShutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interest",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        }
      ],
      "name": "PaymentApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReserveFundsCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCKER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPLIT_TOKEN_DUST_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "__BaseUpgradeablePausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__PauserPausable__init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_reserveFundsFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedUIDTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "availableToCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "availableToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IGoldfinchConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditLine",
      "outputs": [
        {
          "internalType": "contract ICreditLine",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "drawdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawdownsPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "estimateOwedInterestAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "estimateOwedInterestAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedUIDTypes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getAmountsOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnedInterestOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "returnedInterestAccrued",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "returnedPrincipalOwed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callRequestPeriodIndex",
          "type": "uint256"
        }
      ],
      "name": "getCallRequestPeriod",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "principalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalReserved",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICallableLoan.CallRequestPeriod",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundableAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLoanType",
      "outputs": [
        {
          "internalType": "enum LoanType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUncalledCapitalInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "principalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalReserved",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICallableLoan.UncalledCapitalInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint8[3]",
          "name": "version",
          "type": "uint8[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "hasAllowedUID",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inLockupPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGoldfinchConfig",
          "name": "_config",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interestApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numLockupPeriods",
          "type": "uint256"
        },
        {
          "internalType": "contract ISchedule",
          "name": "_schedule",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lateFeeApr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundableAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_allowedUIDTypes",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestAccruedAsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "interestAccruedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestBearingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "interestOwedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isLate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFullPaymentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lateFeeApr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanPhase",
      "outputs": [
        {
          "internalType": "enum LoanPhase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextDueTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "nextDueTimeAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "nextInterestDueTimeAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPrincipalDueTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLockupPeriods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "owedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "additionalBalancePayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRemaining",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILoan.PaymentAllocation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principalPayment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestPayment",
          "type": "uint256"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "owedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "additionalBalancePayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRemaining",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILoan.PaymentAllocation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "principalOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "principalOwedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schedule",
      "outputs": [
        {
          "internalType": "contract ISchedule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "setAllowedUIDTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFundableAt",
          "type": "uint256"
        }
      ],
      "name": "setFundableAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "setLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "setMaxLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolTokenId",
          "type": "uint256"
        }
      ],
      "name": "submitCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "callRequestedTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "termEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "termStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterestAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "totalInterestAccruedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterestOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "totalInterestOwedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterestPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrincipalOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "totalPrincipalOwedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrincipalPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uncalledCapitalTrancheIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseDrawdowns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principalWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withinPrincipalGracePeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc19bdbf1cc9ddb8608ee205b55f6dd0dee4c5d42c380662a02f5539b618573c1",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x3c705dB336C81c7FEFC5746e283aB2c0781A4B7b",
    "transactionIndex": 0,
    "gasUsed": "5523768",
    "logsBloom": "0x
    "blockHash": "0x6f5515cdf9b513961948fae42123f1ad01f9877a4ade63dccc5c4854a23aaba2",
    "transactionHash": "0xc19bdbf1cc9ddb8608ee205b55f6dd0dee4c5d42c380662a02f5539b618573c1",
    "logs": [],
    "blockNumber": 127,
    "cumulativeGasUsed": "5523768",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d8d40d48a074cf37350b99ea809ce037",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arrayLength1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrayLength2\",\"type\":\"uint256\"}],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotDrawdownWhenDrawdownsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReinitialize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetAllowedUIDTypesAfterDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"existingFundableAt\",\"type\":\"uint256\"}],\"name\":\"CannotSetFundableAtAfterFundableAt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSubmitCallInLockupPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotWithdrawInDrawdownPeriod\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCurrentlyDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"DepositExceedsLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawdownAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"existingPrincipalPaid\",\"type\":\"uint256\"}],\"name\":\"DrawdownAmountExceedsDeposits\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callSubmissionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCallSubmissionAmount\",\"type\":\"uint256\"}],\"name\":\"ExcessiveCallSubmissionAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numPrincipalPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumNumPrincipalPeriods\",\"type\":\"uint256\"}],\"name\":\"HasInsufficientTranches\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpointedAt\",\"type\":\"uint256\"}],\"name\":\"InputTimestampBeforeCheckpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTimestamp\",\"type\":\"uint256\"}],\"name\":\"InputTimestampInThePast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidCallSubmissionPoolToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum LoanPhase\",\"name\":\"currentLoanPhase\",\"type\":\"uint8\"},{\"internalType\":\"enum LoanPhase\",\"name\":\"validLoanPhase\",\"type\":\"uint8\"}],\"name\":\"InvalidLoanPhase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numLockupPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodsPerPrincipalPeriod\",\"type\":\"uint256\"}],\"name\":\"InvalidNumLockupPeriods\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"InvalidUIDForDepositor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uncalledTranche\",\"type\":\"uint256\"}],\"name\":\"MustDepositToUncalledTranche\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uncalledTranche\",\"type\":\"uint256\"}],\"name\":\"MustSubmitCallToUncalledTranche\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"attemptedPrincipalPayment\",\"type\":\"uint256\"}],\"name\":\"NoBalanceToPay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callSubmissionSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotAuthorizedToSubmitCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotAuthorizedToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastCallRequestPeriod\",\"type\":\"uint256\"}],\"name\":\"OutOfCallRequestPeriodBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nonLockerAddress\",\"type\":\"address\"}],\"name\":\"RequiresLockerRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLateToSubmitCallRequests\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAmountExceedsWithdrawable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroCallSubmissionAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDepositAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDrawdownAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPaymentAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroWithdrawAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originalTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"callRequestedTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"remainingTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callAmount\",\"type\":\"uint256\"}],\"name\":\"CallRequestSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loan\",\"type\":\"address\"}],\"name\":\"DepositsLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrawdownMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"DrawdownsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"EmergencyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"PaymentApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveFundsCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPLIT_TOKEN_DUST_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"__BaseUpgradeablePausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__PauserPausable__init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reserveFundsFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedUIDTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"availableToCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IGoldfinchConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditLine\",\"outputs\":[{\"internalType\":\"contract ICreditLine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"drawdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawdownsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"estimateOwedInterestAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"estimateOwedInterestAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedUIDTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getAmountsOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnedInterestOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedInterestAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnedPrincipalOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callRequestPeriodIndex\",\"type\":\"uint256\"}],\"name\":\"getCallRequestPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalReserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct ICallableLoan.CallRequestPeriod\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundableAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoanType\",\"outputs\":[{\"internalType\":\"enum LoanType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUncalledCapitalInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"principalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalReserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct ICallableLoan.UncalledCapitalInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"version\",\"type\":\"uint8[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"hasAllowedUID\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inLockupPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGoldfinchConfig\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interestApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numLockupPeriods\",\"type\":\"uint256\"},{\"internalType\":\"contract ISchedule\",\"name\":\"_schedule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lateFeeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundableAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_allowedUIDTypes\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestAccruedAsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"interestAccruedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestBearingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"interestOwedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFullPaymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lateFeeApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanPhase\",\"outputs\":[{\"internalType\":\"enum LoanPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"nextDueTimeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"nextInterestDueTimeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPrincipalDueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLockupPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"owedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalBalancePayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRemaining\",\"type\":\"uint256\"}],\"internalType\":\"struct ILoan.PaymentAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPayment\",\"type\":\"uint256\"}],\"name\":\"pay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"owedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalBalancePayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRemaining\",\"type\":\"uint256\"}],\"internalType\":\"struct ILoan.PaymentAllocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principalOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"principalOwedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[{\"internalType\":\"contract ISchedule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"setAllowedUIDTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFundableAt\",\"type\":\"uint256\"}],\"name\":\"setFundableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenId\",\"type\":\"uint256\"}],\"name\":\"submitCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"callRequestedTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"termStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterestAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"totalInterestAccruedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterestOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"totalInterestOwedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterestPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipalOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"totalPrincipalOwedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrincipalPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uncalledCapitalTrancheIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseDrawdowns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withinPrincipalGracePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Warbler Labs\",\"kind\":\"dev\",\"methods\":{\"availableToWithdraw(uint256)\":{\"params\":{\"tokenId\":\"position to query max amount withdrawable for\"},\"returns\":{\"_0\":\"total interest withdrawable on the position\",\"_1\":\"total principal redeemable on the position\"}},\"deposit(uint256,uint256)\":{\"params\":{\"amount\":\"amount of capital to supply\",\"tranche\":\"Should always be uncalled capital tranche index.\"},\"returns\":{\"_0\":\"tokenId NFT representing your position in this pool\"}},\"depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"amount of capital to supply\",\"deadline\":\"deadline of permit operation\",\"r\":\"r portion of signature\",\"s\":\"s portion of signature\",\"tranche\":\"Should always be uncalled capital tranche index.\",\"v\":\"v portion of signature\"},\"returns\":{\"tokenId\":\"NFT representing your position in this pool\"}},\"drawdown(uint256)\":{\"params\":{\"amount\":\"USDC to drawdown. This amount is transferred to the caller\"}},\"getAmountsOwed(uint256)\":{\"params\":{\"timestamp\":\"time to calculate up to\"},\"returns\":{\"returnedInterestAccrued\":\"amount of accrued interest (not yet owed) that can be paid at `timestamp`\",\"returnedInterestOwed\":\"amount of obligated interest owed at `timestamp`\",\"returnedPrincipalOwed\":\"amount of principal owed at `timestamp`\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])\":{\"params\":{\"_borrower\":\"address of borrower, a non-transferrable role for performing privileged actions like   drawdown\",\"_config\":\"address of GoldfinchConfig\",\"_fundableAt\":\"earliest time at which the first slice can be funded\",\"_interestApr\":\"interest rate for the loan\",\"_lateFeeApr\":\"late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a   payment becomes late\",\"_numLockupPeriods\":\"the number of periods at the tail end of a principal period during which call requests   are not allowed\"}},\"pause()\":{\"details\":\"Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay(uint256)\":{\"details\":\"{this} must be approved by msg.sender to transfer {amount} of USDC\",\"params\":{\"amount\":\"USDC amount to pay\"},\"returns\":{\"_0\":\"PaymentAllocation info on how the payment was allocated\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"submitCall(uint256,uint256)\":{\"params\":{\"callAmount\":\"Amount of capital to call back\",\"poolTokenId\":\"Pool token id to be called back.\"},\"returns\":{\"callRequestedTokenId\":\" Token id of the call requested token.\",\"remainingTokenId\":\"Token id of the remaining token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role\"},\"withdraw(uint256,uint256)\":{\"params\":{\"amount\":\"amount to withdraw (must be <= interest+principal available to withdraw)\",\"tokenId\":\"the NFT representing the position\"},\"returns\":{\"_0\":\"interest withdrawn\",\"_1\":\"principal withdrawn\"}},\"withdrawMultiple(uint256[],uint256[])\":{\"params\":{\"amounts\":\"amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]\",\"tokenIds\":\"NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array\"}}},\"title\":\"CallableLoan\",\"version\":1},\"userdoc\":{\"events\":{\"PaymentApplied(address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted on payment\"},\"WithdrawalMade(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"While owner is the label of the first argument, it is actually the sender of the transaction.\"}},\"kind\":\"user\",\"methods\":{\"availableToWithdraw(uint256)\":{\"notice\":\"Query the max amount available to withdraw for tokenId's position\"},\"createdAt()\":{\"notice\":\"Time when the pool was initialized. Zero if uninitialized\"},\"creditLine()\":{\"notice\":\"Pool's credit line, responsible for managing the loan's accounting variables\"},\"deposit(uint256,uint256)\":{\"notice\":\"Supply capital to the loan.\"},\"depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Supply capital to the loan.\"},\"drawdown(uint256)\":{\"notice\":\"Drawdown the loan. The credit line's balance should increase by the amount drawn down.   Junior capital must be locked before this function can be called. If senior capital isn't locked   then this function will lock it for you (convenience to avoid calling lockPool() separately).   This function should revert if the amount requested exceeds the the current slice's currentLimit   This function should revert if the caller is not the borrower.\"},\"estimateOwedInterestAt(uint256)\":{\"notice\":\"Returns a naive estimate of the interest owed at the timestamp.         Omits any late fees, and assumes no future payments.\"},\"estimateOwedInterestAt(uint256,uint256)\":{\"notice\":\"Returns a naive estimate of the interest owed at the timestamp.         Omits any late fees, and assumes no future payments.\"},\"getAmountsOwed(uint256)\":{\"notice\":\"Compute interest and principal owed on the current balance at a future timestamp\"},\"getLoanType()\":{\"notice\":\"getLoanType was added to support the new callable loan type.         It is not supported in older versions of ILoan (e.g. legacy TranchedPools)\"},\"getVersion()\":{\"notice\":\"Returns the version triplet `[major, minor, patch]`\"},\"initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])\":{\"notice\":\"Initialize the pool. Can only be called once, and should be called in the same transaction as   contract creation to avoid initialization front-running\"},\"interestAccrued()\":{\"notice\":\"If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\"},\"interestAccruedAsOf()\":{\"notice\":\"We keep this to conform to the ICreditLine interface, but it's redundant information   now that we have `checkpointedAsOf`\"},\"interestAccruedAt(uint256)\":{\"notice\":\"If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\"},\"interestBearingBalance()\":{\"notice\":\"TODO: Low priority tests - currently only used for tests and frontend\"},\"interestOwedAt(uint256)\":{\"notice\":\"If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\"},\"loanPhase()\":{\"notice\":\"Returns the current phase of the loan.         See documentation on LoanPhase enum.\"},\"maxLimit()\":{\"notice\":\"Unsupported in callable loans.\"},\"pauseDrawdowns()\":{\"notice\":\"Pauses all drawdowns (but not deposits/withdraws)\"},\"pay(uint256)\":{\"notice\":\"Pay down interest + principal. Excess payments are refunded to the caller\"},\"pay(uint256,uint256)\":{\"notice\":\"Unsupported in callable loans.\"},\"principalOwedAt(uint256)\":{\"notice\":\"Principal owed up to `timestamp`\"},\"setAllowedUIDTypes(uint256[])\":{\"notice\":\"Set accepted UID types for the loan. Requires that users have not already begun to deposit.\"},\"setFundableAt(uint256)\":{\"notice\":\"Update `fundableAt` to a new timestamp. Only the borrower can call this.\"},\"setLimit(uint256)\":{\"notice\":\"Unsupported ICreditLine method kept for ICreditLine conformance\"},\"setMaxLimit(uint256)\":{\"notice\":\"Unsupported in callable loans.\"},\"submitCall(uint256,uint256)\":{\"notice\":\"Submit a call request for the given amount of capital.         The borrower is obligated to pay the call request back at the end of the         corresponding call request period.\"},\"termStartTime()\":{\"notice\":\"Time of first drawdown\"},\"totalInterestAccrued()\":{\"notice\":\"If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\"},\"totalInterestAccruedAt(uint256)\":{\"notice\":\"If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\"},\"totalInterestOwed()\":{\"notice\":\"If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\"},\"totalInterestOwedAt(uint256)\":{\"notice\":\"If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\"},\"totalInterestPaid()\":{\"notice\":\"Cumulative interest paid back up to now\"},\"totalPrincipalOwed()\":{\"notice\":\"Cumulative principal owed at current timestamp\"},\"totalPrincipalOwedAt(uint256)\":{\"notice\":\"Cumulative principal owed at timestamp\"},\"totalPrincipalPaid()\":{\"notice\":\"Returns the total amount of principal thats been paid\"},\"unpauseDrawdowns()\":{\"notice\":\"Unpause drawdowns\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw an already deposited amount if the funds are available. Caller must be the owner or   approved by the owner on tokenId. Amount withdrawn is sent to the caller.\"},\"withdrawMax(uint256)\":{\"notice\":\"Similar to withdraw but withdraw the max interest and principal available for `tokenId`\"},\"withdrawMultiple(uint256[],uint256[])\":{\"notice\":\"Withdraw from multiple tokens\"}},\"notice\":\"A loan that allows the lenders to call back capital from the borrower.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/core/callable/CallableLoan.sol\":\"CallableLoan\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd10ce93bb60b3d8ad10fffca3d35594eba4a58e6c76a7ad96d184c326f88d9ac\",\"license\":\"MIT\"},\"contracts/interfaces/ICallableLoan.sol\":{\"content\":\"pragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILoan} from \\\"./ILoan.sol\\\";\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\nimport {IGoldfinchConfig} from \\\"./IGoldfinchConfig.sol\\\";\\n\\n/// A LoanPhase represents a period of time during which certain callable loan actions are prohibited.\\n/// @param Prefunding Starts when a loan is created and ends at fundableAt.\\n/// In Prefunding, all actions are prohibited or ineffectual.\\n/// @param Funding Starts at the fundableAt timestamp and ends at the first borrower drawdown.\\n/// In Funding, lenders can deposit principal to mint a pool token and they can withdraw their deposited principal.\\n/// @param DrawdownPeriod Starts when the first borrower drawdown occurs and\\n/// ends after ConfigHelper.DrawdownPeriodInSeconds elapses.\\n/// In DrawdownPeriod, the lender can deposit principal to mint a pool token and they can withdraw\\n/// their deposited principal.\\n/// @param InProgress Starts after ConfigHelper.DrawdownPeriodInSeconds elapses and never ends.\\n/// In InProgress, all post-funding & drawdown actions are allowed (not withdraw, deposit, or drawdown).\\n/// When a loan is fully paid back, we do not update the loan state, but most of these actions will\\n/// be prohibited or ineffectual.\\nenum LoanPhase {\\n  Prefunding,\\n  Funding,\\n  DrawdownPeriod,\\n  InProgress\\n}\\n\\n/// @dev A CallableLoan is a loan which allows the lender to call the borrower's principal.\\n///     The lender can call the borrower's principal at any time, but the borrower must pay back the principal\\n/// @dev The ICallableLoanErrors interface contains all errors due to Solidity version compatibility with custom errors.\\ninterface ICallableLoan is ILoan {\\n  /*================================================================================\\n  Structs\\n  ================================================================================*/\\n  /// @param principalDeposited The amount of principal deposited towards this call request period.\\n  /// @param principalPaid The amount of principal which has already been paid back towards this call request period.\\n  ///                      There are 3 ways principal paid can enter a CallRequestPeriod.\\n  ///                      1. Converted from principalReserved after a call request period becomes due.\\n  ///                      2. Moved from uncalled tranche as the result of a call request.\\n  ///                      3. Paid directly when a CallRequestPeriod is past due and has a remaining balance.\\n  /// @param principalReserved The amount of principal reserved for this call request period.\\n  ///                          Payments to a not-yet-due CallRequestPeriod are applied to principalReserved.\\n  /// @param interestPaid The amount of interest paid towards this call request period.\\n  struct CallRequestPeriod {\\n    uint256 principalDeposited;\\n    uint256 principalPaid;\\n    uint256 principalReserved;\\n    uint256 interestPaid;\\n  }\\n\\n  /// @param principalDeposited The amount of uncalled, deposited principal.\\n  /// @param principalPaid The amount of principal which has already been paid back.\\n  ///                      There are two ways uncalled principal can be paid.\\n  ///                      1. Remainder after drawdowns.\\n  ///                      2. Conversion from principalReserved after a call request period becomes due.\\n  ///                         All call requested principal outstanding must already be paid\\n  ///                         (or have principal reserved) before uncalled principal can be paid.\\n  ///                      3. Paid directly after term end time.\\n  /// @param principalReserved The amount of principal reserved for uncalled tranche.\\n  ///                          principalReserved is greedily moved to call request periods (as much as can fill)\\n  ///                          when a call request is submitted.\\n  /// @param interestPaid The amount of interest paid towards uncalled capital.\\n  struct UncalledCapitalInfo {\\n    uint256 principalDeposited;\\n    uint256 principalPaid;\\n    uint256 principalReserved;\\n    uint256 interestPaid;\\n  }\\n\\n  /*================================================================================\\n  Functions\\n  ================================================================================*/\\n  /// @notice Initialize the pool. Can only be called once, and should be called in the same transaction as\\n  ///   contract creation to avoid initialization front-running\\n  /// @param _config address of GoldfinchConfig\\n  /// @param _borrower address of borrower, a non-transferrable role for performing privileged actions like\\n  ///   drawdown\\n  /// @param _numLockupPeriods the number of periods at the tail end of a principal period during which call requests\\n  ///   are not allowed\\n  /// @param _interestApr interest rate for the loan\\n  /// @param _lateFeeApr late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a\\n  ///   payment becomes late\\n  /// @param _fundableAt earliest time at which the first slice can be funded\\n  function initialize(\\n    IGoldfinchConfig _config,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external;\\n\\n  /// @notice Submits a call request for the specified pool token and amount\\n  ///         Mints a new, called pool token of the called amount.\\n  ///         Splits off any uncalled amount as a new uncalled pool token.\\n  /// @param amountToCall The amount of the pool token that should be called.\\n  /// @param poolTokenId The id of the pool token that should be called.\\n  /// @return callRequestedTokenId  Token id of the call requested token.\\n  /// @return remainingTokenId Token id of the remaining token.\\n  function submitCall(\\n    uint256 amountToCall,\\n    uint256 poolTokenId\\n  ) external returns (uint256, uint256);\\n\\n  function schedule() external view returns (ISchedule);\\n\\n  function nextDueTimeAt(uint256 timestamp) external view returns (uint256);\\n\\n  function numLockupPeriods() external view returns (uint256);\\n\\n  function inLockupPeriod() external view returns (bool);\\n\\n  function getUncalledCapitalInfo() external view returns (UncalledCapitalInfo memory);\\n\\n  function getCallRequestPeriod(\\n    uint256 callRequestPeriodIndex\\n  ) external view returns (CallRequestPeriod memory);\\n\\n  function uncalledCapitalTrancheIndex() external view returns (uint256);\\n\\n  function availableToCall(uint256 tokenId) external view returns (uint256);\\n\\n  /// @notice Returns the current phase of the loan.\\n  ///         See documentation on LoanPhase enum.\\n  function loanPhase() external view returns (LoanPhase);\\n\\n  /// @notice Returns the current balance of the loan which will be used for\\n  ///         interest calculations.\\n  ///         Settles any principal reserved if a call request period has\\n  ///         ended since the last checkpoint\\n  ///         Excludes principal reserved for future call request periods\\n  function interestBearingBalance() external view returns (uint256);\\n\\n  /// @notice Returns a naive estimate of the interest owed at the timestamp.\\n  ///         Omits any late fees, and assumes no future payments.\\n  function estimateOwedInterestAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Returns a naive estimate of the interest owed at the timestamp.\\n  ///         Omits any late fees, and assumes no future payments.\\n  function estimateOwedInterestAt(\\n    uint256 balance,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /*================================================================================\\n  Events\\n  ================================================================================*/\\n  event CallRequestSubmitted(\\n    uint256 indexed originalTokenId,\\n    uint256 indexed callRequestedTokenId,\\n    uint256 indexed remainingTokenId,\\n    uint256 callAmount\\n  );\\n  event DepositsLocked(address indexed loan);\\n}\\n\",\"keccak256\":\"0x3d1685ff8b397179f66156734b360933a13a699477f277a98d789d38b349509b\"},\"contracts/interfaces/ICallableLoanErrors.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport {LoanPhase} from \\\"./ICallableLoan.sol\\\";\\n\\n/// @dev This interface is used to define errors for the CallableLoan contract.\\n///      Ideally this would be on ICallableLoan, but custom errors are only supported\\n///      in Solidity version >= 0.8.4, and ICallableLoan requires Solidity 0.6.x conformance.\\ninterface ICallableLoanErrors {\\n  /*================================================================================\\n  Drawdowns\\n  ================================================================================*/\\n  error CannotDrawdownWhenDrawdownsPaused();\\n  error DrawdownAmountExceedsDeposits(uint256 drawdownAmount, uint256 existingPrincipalPaid);\\n\\n  /*================================================================================\\n  Zero Amounts\\n  ================================================================================*/\\n  error ZeroDrawdownAmount();\\n  error ZeroPaymentAmount();\\n  error ZeroDepositAmount();\\n  error ZeroWithdrawAmount();\\n  error ZeroCallSubmissionAmount();\\n\\n  /*================================================================================\\n  Withdrawals\\n  ================================================================================*/\\n  error WithdrawAmountExceedsWithdrawable(uint256 withdrawAmount, uint256 withdrawableAmount);\\n  error InvalidLoanPhase(LoanPhase currentLoanPhase, LoanPhase validLoanPhase);\\n  error ArrayLengthMismatch(uint256 arrayLength1, uint256 arrayLength2);\\n  error CannotWithdrawInDrawdownPeriod();\\n  error NotAuthorizedToWithdraw(address withdrawSender, uint256 tokenId);\\n\\n  /*================================================================================\\n  Payments\\n  ================================================================================*/\\n  error NoBalanceToPay(uint256 attemptedPrincipalPayment);\\n\\n  /*================================================================================\\n  Call Requests\\n  ================================================================================*/\\n  error MustSubmitCallToUncalledTranche(uint256 inputTranche, uint256 uncalledTranche);\\n  error OutOfCallRequestPeriodBounds(uint256 lastCallRequestPeriod);\\n  error CannotSubmitCallInLockupPeriod();\\n  error TooLateToSubmitCallRequests();\\n  error NotAuthorizedToSubmitCall(address callSubmissionSender, uint256 tokenId);\\n  error InvalidCallSubmissionPoolToken(uint256 tokenId);\\n  error ExcessiveCallSubmissionAmount(\\n    uint256 poolTokenId,\\n    uint256 callSubmissionAmount,\\n    uint256 maxCallSubmissionAmount\\n  );\\n\\n  /*================================================================================\\n  Deposits\\n  ================================================================================*/\\n  error MustDepositToUncalledTranche(uint256 inputTranche, uint256 uncalledTranche);\\n  error InvalidUIDForDepositor(address depositor);\\n  error DepositExceedsLimit(uint256 deposit, uint256 amountCurrentlyDeposited, uint256 limit);\\n\\n  /*================================================================================\\n  Miscellaneous\\n  ================================================================================*/\\n  error CannotSetAllowedUIDTypesAfterDeposit();\\n  error CannotSetFundableAtAfterFundableAt(uint256 existingFundableAt);\\n  error RequiresLockerRole(address nonLockerAddress);\\n\\n  /*================================================================================\\n  Initialization\\n  ================================================================================*/\\n  error HasInsufficientTranches(uint256 numPrincipalPeriods, uint256 minimumNumPrincipalPeriods);\\n  error CannotReinitialize();\\n  error InvalidNumLockupPeriods(uint256 numLockupPeriods, uint256 periodsPerPrincipalPeriod);\\n\\n  /*================================================================================\\n  Timestamps\\n  ================================================================================*/\\n  error InputTimestampBeforeCheckpoint(uint256 inputTimestamp, uint256 checkpointedAt);\\n  error InputTimestampInThePast(uint256 inputTimestamp);\\n}\\n\",\"keccak256\":\"0xf0ba8f490ae529b31be6134d55f3b33fbd63f1a3819f0c73991e297be440ea9e\"},\"contracts/interfaces/ICreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILoan} from \\\"./ILoan.sol\\\";\\n\\nimport {ICreditLine} from \\\"./ICreditLine.sol\\\";\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\n\\ninterface ICreditLine {\\n  function balance() external view returns (uint256);\\n\\n  function interestOwed() external view returns (uint256);\\n\\n  function principalOwed() external view returns (uint256);\\n\\n  function termEndTime() external view returns (uint256);\\n\\n  function nextDueTime() external view returns (uint256);\\n\\n  function interestAccruedAsOf() external view returns (uint256);\\n\\n  function lastFullPaymentTime() external view returns (uint256);\\n\\n  function borrower() external view returns (address);\\n\\n  function currentLimit() external view returns (uint256);\\n\\n  function limit() external view returns (uint256);\\n\\n  function maxLimit() external view returns (uint256);\\n\\n  function interestApr() external view returns (uint256);\\n\\n  function lateFeeApr() external view returns (uint256);\\n\\n  function isLate() external view returns (bool);\\n\\n  function withinPrincipalGracePeriod() external view returns (bool);\\n\\n  /// @notice Cumulative interest accrued up to now\\n  function totalInterestAccrued() external view returns (uint256);\\n\\n  /// @notice Cumulative interest accrued up to `timestamp`\\n  function totalInterestAccruedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Cumulative interest paid back up to now\\n  function totalInterestPaid() external view returns (uint256);\\n\\n  /// @notice Cumulative interest owed up to now\\n  function totalInterestOwed() external view returns (uint256);\\n\\n  /// @notice Cumulative interest owed up to `timestamp`\\n  function totalInterestOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Interest that would be owed at `timestamp`\\n  function interestOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Interest accrued in the current payment period up to now. Converted to\\n  ///   owed interest once we cross into the next payment period. Is 0 if the\\n  ///   current time is after loan maturity (all interest accrued immediately becomes\\n  ///   interest owed).\\n  function interestAccrued() external view returns (uint256);\\n\\n  /// @notice Interest accrued in the current payment period for `timestamp`. Coverted to\\n  ///   owed interest once we cross into the payment period after `timestamp`. Is 0\\n  ///   if `timestamp` is after loan maturity (all interest accrued immediately becomes\\n  ///   interest owed).\\n  function interestAccruedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Principal owed up to `timestamp`\\n  function principalOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Returns the total amount of principal thats been paid\\n  function totalPrincipalPaid() external view returns (uint256);\\n\\n  /// @notice Cumulative principal owed at timestamp\\n  function totalPrincipalOwedAt(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Cumulative principal owed at current timestamp\\n  function totalPrincipalOwed() external view returns (uint256);\\n\\n  function setLimit(uint256 newAmount) external;\\n\\n  function setMaxLimit(uint256 newAmount) external;\\n\\n  /// @notice Time of first drawdown\\n  function termStartTime() external view returns (uint256);\\n\\n  /// @notice Process a bulk payment, allocating the payment amount based on the payment waterfall\\n  function pay(uint paymentAmount) external returns (ILoan.PaymentAllocation memory);\\n\\n  /**\\n   * Process a payment according to the waterfall described in `Accountant.allocatePayment`\\n   * @param principalPayment principal payment amount\\n   * @param interestPayment interest payment amount\\n   * @return payment allocation\\n   */\\n  function pay(\\n    uint256 principalPayment,\\n    uint256 interestPayment\\n  ) external returns (ILoan.PaymentAllocation memory);\\n\\n  /// @notice Drawdown on the line\\n  /// @param amount amount to drawdown. Cannot exceed the line's limit\\n  function drawdown(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb686be076b47f3d64138d7e2ba5084f8bb81f13cd61385c88307f07defa96d65\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Taken from https://github.com/compound-finance/compound-protocol/blob/master/contracts/CTokenInterfaces.sol\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICurveLP {\\n  function coins(uint256) external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function calc_token_amount(uint256[2] calldata amounts) external view returns (uint256);\\n\\n  function lp_price() external view returns (uint256);\\n\\n  function add_liquidity(\\n    uint256[2] calldata amounts,\\n    uint256 min_mint_amount,\\n    bool use_eth,\\n    address receiver\\n  ) external returns (uint256);\\n\\n  function remove_liquidity(\\n    uint256 _amount,\\n    uint256[2] calldata min_amounts\\n  ) external returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\\n\\n  function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external returns (uint256);\\n\\n  function balances(uint256 arg0) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf7d904a550adc06b61454e9e68f356fec1a86078e2aec5a82e7878ec22d9774e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20UpgradeableWithDec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/*\\nOnly addition is the `decimals` function, which we need, and which both our Fidu and USDC use, along with most ERC20's.\\n*/\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20UpgradeableWithDec is IERC20Upgradeable {\\n  /**\\n   * @dev Returns the number of decimals used for the token\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x222c460101a057d37ca6c654a278e22b7b1bf6b3ce12887742a9dbcbb396145d\",\"license\":\"MIT\"},\"contracts/interfaces/IGo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract IGo {\\n  uint256 public constant ID_TYPE_0 = 0;\\n  uint256 public constant ID_TYPE_1 = 1;\\n  uint256 public constant ID_TYPE_2 = 2;\\n  uint256 public constant ID_TYPE_3 = 3;\\n  uint256 public constant ID_TYPE_4 = 4;\\n  uint256 public constant ID_TYPE_5 = 5;\\n  uint256 public constant ID_TYPE_6 = 6;\\n  uint256 public constant ID_TYPE_7 = 7;\\n  uint256 public constant ID_TYPE_8 = 8;\\n  uint256 public constant ID_TYPE_9 = 9;\\n  uint256 public constant ID_TYPE_10 = 10;\\n\\n  /// @notice Returns the address of the UniqueIdentity contract.\\n  function uniqueIdentity() external virtual returns (address);\\n\\n  function go(address account) public view virtual returns (bool);\\n\\n  function goOnlyIdTypes(\\n    address account,\\n    uint256[] calldata onlyIdTypes\\n  ) public view virtual returns (bool);\\n\\n  /**\\n   * @notice Returns whether the provided account is go-listed for use of the SeniorPool on the Goldfinch protocol.\\n   * @param account The account whose go status to obtain\\n   * @return true if `account` is go listed\\n   */\\n  function goSeniorPool(address account) public view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x3d4e566ab6aa670da6526d3eaf090c7c4c4e1fae9e941c3dcba606f417051339\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGoldfinchConfig {\\n  /**\\n   * @dev Adds a user to go-list\\n   * @param _member address to add to go-list\\n   */\\n  function addToGoList(address _member) external;\\n\\n  /**\\n   * @dev removes a user from go-list\\n   * @param _member address to remove from go-list\\n   */\\n  function removeFromGoList(address _member) external;\\n\\n  /**\\n   * @dev adds many users to go-list at once\\n   * @param _members addresses to ad to go-list\\n   */\\n  function bulkAddToGoList(address[] calldata _members) external;\\n\\n  /**\\n   * @dev removes many users from go-list at once\\n   * @param _members addresses to remove from go-list\\n   */\\n  function bulkRemoveFromGoList(address[] calldata _members) external;\\n\\n  function getNumber(uint256 index) external view returns (uint256);\\n\\n  /*\\n    Using custom getters in case we want to change underlying implementation later,\\n    or add checks or validations later on.\\n  */\\n  function getAddress(uint256 index) external view returns (address);\\n\\n  function setAddress(uint256 index, address newAddress) external;\\n\\n  function setNumber(uint256 index, uint256 newNumber) external;\\n}\\n\",\"keccak256\":\"0xdedd4f8d4fe5f720a01aadf0d12535afcbc3cc1bceb1aab1761764e5999343b4\",\"license\":\"MIT\"},\"contracts/interfaces/IGoldfinchFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\nimport {ICallableLoan} from \\\"./ICallableLoan.sol\\\";\\n\\ninterface IGoldfinchFactory {\\n  function createCreditLine() external returns (address);\\n\\n  function createBorrower(address owner) external returns (address);\\n\\n  function createPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createMigratedPool(\\n    address _borrower,\\n    uint256 _juniorFeePercent,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _paymentPeriodInDays,\\n    uint256 _termInDays,\\n    uint256 _lateFeeApr,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (address);\\n\\n  function createCallableLoan(\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external returns (ICallableLoan);\\n}\\n\",\"keccak256\":\"0xf5b680851ff613a1c9c59c1229571c58c7e27d363ed1492c1ae5a8eb9522737c\",\"license\":\"MIT\"},\"contracts/interfaces/ILoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\nimport {ISchedule} from \\\"./ISchedule.sol\\\";\\nimport {ICreditLine} from \\\"./ICreditLine.sol\\\";\\n\\nenum LoanType {\\n  TranchedPool,\\n  CallableLoan\\n}\\n\\ninterface ILoan {\\n  /// @notice getLoanType was added to support the new callable loan type.\\n  ///         It is not supported in older versions of ILoan (e.g. legacy TranchedPools)\\n  function getLoanType() external view returns (LoanType);\\n\\n  /// @notice Pool's credit line, responsible for managing the loan's accounting variables\\n  function creditLine() external view returns (ICreditLine);\\n\\n  /// @notice Time when the pool was initialized. Zero if uninitialized\\n  function createdAt() external view returns (uint256);\\n\\n  /// @notice Pay down interest + principal. Excess payments are refunded to the caller\\n  /// @param amount USDC amount to pay\\n  /// @return PaymentAllocation info on how the payment was allocated\\n  /// @dev {this} must be approved by msg.sender to transfer {amount} of USDC\\n  function pay(uint256 amount) external returns (PaymentAllocation memory);\\n\\n  /// @notice Compute interest and principal owed on the current balance at a future timestamp\\n  /// @param timestamp time to calculate up to\\n  /// @return interestOwed amount of obligated interest owed at `timestamp`\\n  /// @return interestAccrued amount of accrued interest (not yet owed) that can be paid at `timestamp`\\n  /// @return principalOwed amount of principal owed at `timestamp`\\n  function getAmountsOwed(\\n    uint256 timestamp\\n  ) external view returns (uint256 interestOwed, uint256 interestAccrued, uint256 principalOwed);\\n\\n  function getAllowedUIDTypes() external view returns (uint256[] memory);\\n\\n  /// @notice Drawdown the loan. The credit line's balance should increase by the amount drawn down.\\n  ///   Junior capital must be locked before this function can be called. If senior capital isn't locked\\n  ///   then this function will lock it for you (convenience to avoid calling lockPool() separately).\\n  ///   This function should revert if the amount requested exceeds the the current slice's currentLimit\\n  ///   This function should revert if the caller is not the borrower.\\n  /// @param amount USDC to drawdown. This amount is transferred to the caller\\n  function drawdown(uint256 amount) external;\\n\\n  /// @notice Update `fundableAt` to a new timestamp. Only the borrower can call this.\\n  function setFundableAt(uint256 newFundableAt) external;\\n\\n  /// @notice Supply capital to this pool. Caller can't deposit to the junior tranche if the junior pool is locked.\\n  ///   Caller can't deposit to a senior tranche if the pool is locked. Caller can't deposit if they are missing the\\n  ///   required UID NFT.\\n  /// @param tranche id of tranche to supply capital to. Id must correspond to a tranche in the current slice.\\n  /// @param amount amount of capital to supply\\n  /// @return tokenId NFT representing your position in this pool\\n  function deposit(uint256 tranche, uint256 amount) external returns (uint256 tokenId);\\n\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 tokenId);\\n\\n  /// @notice Query the max amount available to withdraw for tokenId's position\\n  /// @param tokenId position to query max amount withdrawable for\\n  /// @return interestRedeemable total interest withdrawable on the position\\n  /// @return principalRedeemable total principal redeemable on the position\\n  function availableToWithdraw(\\n    uint256 tokenId\\n  ) external view returns (uint256 interestRedeemable, uint256 principalRedeemable);\\n\\n  /// @notice Withdraw an already deposited amount if the funds are available. Caller must be the owner or\\n  ///   approved by the owner on tokenId. Amount withdrawn is sent to the caller.\\n  /// @param tokenId the NFT representing the position\\n  /// @param amount amount to withdraw (must be <= interest+principal available to withdraw)\\n  /// @return interestWithdrawn interest withdrawn\\n  /// @return principalWithdrawn principal withdrawn\\n  function withdraw(\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  /// @notice Similar to withdraw but withdraw the max interest and principal available for `tokenId`\\n  function withdrawMax(\\n    uint256 tokenId\\n  ) external returns (uint256 interestWithdrawn, uint256 principalWithdrawn);\\n\\n  /// @notice Withdraw from multiple tokens\\n  /// @param tokenIds NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array\\n  /// @param amounts amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]\\n  function withdrawMultiple(uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n  /// @notice Result of applying a payment to a v2 pool\\n  /// @param owedInterestPayment payment portion of interest owed\\n  /// @param accruedInterestPayment payment portion of accrued (but not yet owed) interest\\n  /// @param principalPayment payment portion on principal owed\\n  /// @param additionalBalancePayment payment portion on any balance that is currently owed\\n  /// @param paymentRemaining payment amount leftover\\n  struct PaymentAllocation {\\n    uint256 owedInterestPayment;\\n    uint256 accruedInterestPayment;\\n    uint256 principalPayment;\\n    uint256 additionalBalancePayment;\\n    uint256 paymentRemaining;\\n  }\\n  /// @notice Event emitted on payment\\n  /// @param payer address that made the payment\\n  /// @param pool pool to which the payment was made\\n  /// @param interest amount of payment allocated to interest (obligated + additional)\\n  /// @param principal amount of payment allocated to principal owed and remaining balance\\n  /// @param remaining any excess payment amount that wasn't allocated to a debt owed\\n  /// @param reserve of payment that went to the protocol reserve\\n  event PaymentApplied(\\n    address indexed payer,\\n    address indexed pool,\\n    uint256 interest,\\n    uint256 principal,\\n    uint256 remaining,\\n    uint256 reserve\\n  );\\n  event DepositMade(\\n    address indexed owner,\\n    uint256 indexed tranche,\\n    uint256 indexed tokenId,\\n    uint256 amount\\n  );\\n\\n  /// @notice While owner is the label of the first argument, it is actually the sender of the transaction.\\n  event WithdrawalMade(\\n    address indexed owner,\\n    uint256 indexed tranche,\\n    uint256 indexed tokenId,\\n    uint256 interestWithdrawn,\\n    uint256 principalWithdrawn\\n  );\\n  event ReserveFundsCollected(address indexed from, uint256 amount);\\n  event DrawdownMade(address indexed borrower, uint256 amount);\\n  event DrawdownsPaused(address indexed pool);\\n  event DrawdownsUnpaused(address indexed pool);\\n  event EmergencyShutdown(address indexed pool);\\n}\\n\",\"keccak256\":\"0xf4f3daafcf9d018c9457f1216fddd741ab0cdeebf35e02d4ffa28ec509b0f63b\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./openzeppelin/IERC721.sol\\\";\\nimport \\\"./IGoldfinchConfig.sol\\\";\\n\\ninterface IPoolTokens is IERC721 {\\n  struct TokenInfo {\\n    address pool;\\n    uint256 tranche;\\n    uint256 principalAmount;\\n    uint256 principalRedeemed;\\n    uint256 interestRedeemed;\\n  }\\n\\n  struct MintParams {\\n    uint256 principalAmount;\\n    uint256 tranche;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 totalMinted;\\n    uint256 totalPrincipalRedeemed;\\n    bool created;\\n  }\\n\\n  /**\\n   * @notice Called by pool to create a debt position in a particular tranche and amount\\n   * @param params Struct containing the tranche and the amount\\n   * @param to The address that should own the position\\n   * @return tokenId The token ID (auto-incrementing integer across all pools)\\n   */\\n  function mint(MintParams calldata params, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Redeem principal and interest on a pool token. Called by valid pools as part of their redemption\\n   *  flow\\n   * @param tokenId pool token id\\n   * @param principalRedeemed principal to redeem. This cannot exceed the token's principal amount, and\\n   *  the redemption cannot cause the pool's total principal redeemed to exceed the pool's total minted\\n   *  principal\\n   * @param interestRedeemed interest to redeem.\\n   */\\n  function redeem(uint256 tokenId, uint256 principalRedeemed, uint256 interestRedeemed) external;\\n\\n  /**\\n   * @notice Withdraw a pool token's principal up to the token's principalAmount. Called by valid pools\\n   *  as part of their withdraw flow before the pool is locked (i.e. before the principal is committed)\\n   * @param tokenId pool token id\\n   * @param principalAmount principal to withdraw\\n   */\\n  function withdrawPrincipal(uint256 tokenId, uint256 principalAmount) external;\\n\\n  /**\\n   * @notice Burns a specific ERC721 token and removes deletes the token metadata for PoolTokens, BackerReards,\\n   *  and BackerStakingRewards\\n   * @param tokenId uint256 id of the ERC721 token to be burned.\\n   */\\n  function burn(uint256 tokenId) external;\\n\\n  /**\\n   * @notice Called by the GoldfinchFactory to register the pool as a valid pool. Only valid pools can mint/redeem\\n   * tokens\\n   * @param newPool The address of the newly created pool\\n   */\\n  function onPoolCreated(address newPool) external;\\n\\n  function getTokenInfo(uint256 tokenId) external view returns (TokenInfo memory);\\n\\n  function getPoolInfo(address pool) external view returns (PoolInfo memory);\\n\\n  /// @notice Query if `pool` is a valid pool. A pool is valid if it was created by the Goldfinch Factory\\n  function validPool(address pool) external view returns (bool);\\n\\n  function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\\n\\n  /**\\n   * @notice Splits a pool token into two smaller positions. The original token is burned and all\\n   * its associated data is deleted.\\n   * @param tokenId id of the token to split.\\n   * @param newPrincipal1 principal amount for the first token in the split. The principal amount for the\\n   *  second token in the split is implicitly the original token's principal amount less newPrincipal1\\n   * @return tokenId1 id of the first token in the split\\n   * @return tokenId2 id of the second token in the split\\n   */\\n  function splitToken(\\n    uint256 tokenId,\\n    uint256 newPrincipal1\\n  ) external returns (uint256 tokenId1, uint256 tokenId2);\\n\\n  /**\\n   * @notice Mint event emitted for a new TranchedPool deposit or when an existing pool token is\\n   *  split\\n   * @param owner address to which the token was minted\\n   * @param pool tranched pool that the deposit was in\\n   * @param tokenId ERC721 tokenId\\n   * @param amount the deposit amount\\n   * @param tranche id of the tranche of the deposit\\n   */\\n  event TokenMinted(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 amount,\\n    uint256 tranche\\n  );\\n\\n  /**\\n   * @notice Redeem event emitted when interest and/or principal is redeemed in the token's pool\\n   * @param owner owner of the pool token\\n   * @param pool tranched pool that the token belongs to\\n   * @param principalRedeemed amount of principal redeemed from the pool\\n   * @param interestRedeemed amount of interest redeemed from the pool\\n   * @param tranche id of the tranche the token belongs to\\n   */\\n  event TokenRedeemed(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalRedeemed,\\n    uint256 interestRedeemed,\\n    uint256 tranche\\n  );\\n\\n  /**\\n   * @notice Burn event emitted when the token owner/operator manually burns the token or burns\\n   *  it implicitly by splitting it\\n   * @param owner owner of the pool token\\n   * @param pool tranched pool that the token belongs to\\n   */\\n  event TokenBurned(address indexed owner, address indexed pool, uint256 indexed tokenId);\\n\\n  /**\\n   * @notice Split event emitted when the token owner/operator splits the token\\n   * @param pool tranched pool to which the orginal and split tokens belong\\n   * @param tokenId id of the original token that was split\\n   * @param newTokenId1 id of the first split token\\n   * @param newPrincipal1 principalAmount of the first split token\\n   * @param newTokenId2 id of the second split token\\n   * @param newPrincipal2 principalAmount of the second split token\\n   */\\n  event TokenSplit(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 newTokenId1,\\n    uint256 newPrincipal1,\\n    uint256 newTokenId2,\\n    uint256 newPrincipal2\\n  );\\n\\n  /**\\n   * @notice Principal Withdrawn event emitted when a token's principal is withdrawn from the pool\\n   *  BEFORE the pool's drawdown period\\n   * @param pool tranched pool of the token\\n   * @param principalWithdrawn amount of principal withdrawn from the pool\\n   */\\n  event TokenPrincipalWithdrawn(\\n    address indexed owner,\\n    address indexed pool,\\n    uint256 indexed tokenId,\\n    uint256 principalWithdrawn,\\n    uint256 tranche\\n  );\\n}\\n\",\"keccak256\":\"0x2c6b45491f8b77483e2e809780cd79f5570865b31b7ef7904c099bbb1e306b43\",\"license\":\"MIT\"},\"contracts/interfaces/IRequiresUID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IRequiresUID {\\n  function hasAllowedUID(address sender) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdc1693ea2ef81d20c4f5c0c507f814671691959d6d177398159cfbfda90e08d7\",\"license\":\"MIT\"},\"contracts/interfaces/ISchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ISchedule {\\n  function periodsPerPrincipalPeriod() external view returns (uint256);\\n\\n  function periodsInTerm() external view returns (uint256);\\n\\n  function periodsPerInterestPeriod() external view returns (uint256);\\n\\n  function gracePrincipalPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the period that timestamp resides in\\n   */\\n  function periodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the principal period that timestamp resides in\\n   */\\n  function principalPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the interest period that timestamp resides in\\n   */\\n  function interestPeriodAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns true if the given timestamp resides in a principal grace period\\n   */\\n  function withinPrincipalGracePeriodAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (bool);\\n\\n  /**\\n   * Returns the next timestamp where either principal or interest will come due following `timestamp`\\n   */\\n  function nextDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where either principal or timestamp came due\\n   */\\n  function previousDueTimeAt(uint256 startTime, uint256 timestamp) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where new interest came due\\n   */\\n  function previousInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the previous timestamp where new principal came due\\n   */\\n  function previousPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total number of principal periods\\n   */\\n  function totalPrincipalPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total number of interest periods\\n   */\\n  function totalInterestPeriods() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp that the term will end\\n   */\\n  function termEndTime(uint256 startTime) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the timestamp that the term began\\n   */\\n  function termStartTime(uint256 startTime) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the next time principal will come due, or the termEndTime if there are no more due times\\n   */\\n  function nextPrincipalDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the next time interest will come due, or the termEndTime if there are no more due times\\n   */\\n  function nextInterestDueTimeAt(\\n    uint256 startTime,\\n    uint256 timestamp\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the end time of the given period.\\n   */\\n  function periodEndTime(uint256 startTime, uint256 period) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd12234c42aeb8a91fb435196e0aa5f45568b9f16b44ce29ea70118393ae952b1\",\"license\":\"MIT\"},\"contracts/interfaces/IVersioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title interface for implementers that have an arbitrary associated tag\\ninterface IVersioned {\\n  /// @notice Returns the version triplet `[major, minor, patch]`\\n  function getVersion() external pure returns (uint8[3] memory);\\n}\\n\",\"keccak256\":\"0xcfad0eb9092682c0634635007f727cdcb9b95046094ea6342612a96b4a26eded\",\"license\":\"MIT\"},\"contracts/interfaces/openzeppelin/IERC165.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\n// This file copied from OZ, but with the version pragma updated to use >=.\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbbdb8f6dfaecd47a0d65bee707877d6974a0e0da6c02403ad5ce00590bd97497\"},\"contracts/interfaces/openzeppelin/IERC721.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\n// This file copied from OZ, but with the version pragma updated to use >= & reference other >= pragma interfaces.\\n// NOTE: Modified to reference our updated pragma version of IERC165\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Returns the number of NFTs in ``owner``'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the NFT specified by `tokenId`.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n   * another (`to`).\\n   *\\n   *\\n   *\\n   * Requirements:\\n   * - `from`, `to` cannot be zero.\\n   * - `tokenId` must be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this\\n   * NFT by either {approve} or {setApprovalForAll}.\\n   */\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Requirements:\\n   * - If the caller is not `from`, it must be approved to move this NFT by\\n   * either {approve} or {setApprovalForAll}.\\n   */\\n  function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n  function approve(address to, uint256 tokenId) external;\\n\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x839a8ac86a7be93a842f708f7e41a5a56a6e44ee9dcc2559b99042122dd76048\"},\"contracts/library/SaturatingSub.sol\":{\"content\":\"pragma solidity >=0.8.17;\\n\\nlibrary SaturatingSub {\\n  /// @notice Do a - b but if that would result in underflow error, then just return 0\\n  function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    unchecked {\\n      return b > a ? 0 : a - b;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1a7597e675fc659f545523a62ab38954f9a8cf014e53634fd85e1688243ec978\"},\"contracts/protocol/core/BaseUpgradeablePausable08x.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {PauserPausable} from \\\"./PauserPausable08x.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title BaseUpgradeablePausable contract\\n * @notice This is our Base contract that most other contracts inherit from. It includes many standard\\n *  useful abilities like upgradeability, pausability, access control, and re-entrancy guards.\\n * @author Goldfinch\\n */\\n\\ncontract BaseUpgradeablePausable is\\n  Initializable,\\n  AccessControlUpgradeable,\\n  PauserPausable,\\n  ReentrancyGuardUpgradeable\\n{\\n  bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n  // Pre-reserving a few slots in the base contract in case we need to add things in the future.\\n  // This does not actually take up gas cost or storage cost, but it does reserve the storage slots.\\n  // See OpenZeppelin's use of this pattern here:\\n  // https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/master/contracts/GSN/Context.sol#L37\\n  uint256[50] private __gap1;\\n  uint256[50] private __gap2;\\n  uint256[50] private __gap3;\\n  uint256[50] private __gap4;\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __BaseUpgradeablePausable__init(address owner) public initializer {\\n    require(owner != address(0), \\\"Owner cannot be the zero address\\\");\\n    __AccessControl_init_unchained();\\n    __Pausable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n\\n    _setupRole(OWNER_ROLE, owner);\\n    _setupRole(PAUSER_ROLE, owner);\\n\\n    _setRoleAdmin(PAUSER_ROLE, OWNER_ROLE);\\n    _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n  }\\n\\n  function isAdmin() public view returns (bool) {\\n    return hasRole(OWNER_ROLE, _msgSender());\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(isAdmin(), \\\"Must have admin role to perform this action\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xe84ee89051258e2b3d31f9f8fca905683dfa10385e0304b01a2a1a7978dab1d7\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigNumbersHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ConfigOptions} from \\\"./ConfigOptions.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../interfaces/IGoldfinchConfig.sol\\\";\\n\\n/**\\n * @title ConfigNumbersHelper\\n * @notice A convenience library for getting easy access to configured numbers within the\\n *  protocol, through the use of the IGoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigNumbersHelper {\\n  function getReserveDenominator(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(\\n    IGoldfinchConfig config\\n  ) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n\\n  function getLeverageRatio(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LeverageRatio));\\n  }\\n\\n  function getSeniorPoolWithdrawalCancelationFeeInBps(\\n    IGoldfinchConfig config\\n  ) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.SeniorPoolWithdrawalCancelationFeeInBps));\\n  }\\n}\\n\",\"keccak256\":\"0xb7530d2962c5485bc899dc881843ff03e4608f3fb3a2c6fc590aef149cffd71e\",\"license\":\"MIT\"},\"contracts/protocol/core/ConfigOptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ConfigOptions\\n * @notice A central place for enumerating the configurable options of our GoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary ConfigOptions {\\n  // NEVER EVER CHANGE THE ORDER OF THESE!\\n  // You can rename or append. But NEVER change the order.\\n  enum Numbers {\\n    TransactionLimit,\\n    /// @dev: TotalFundsLimit used to represent a total cap on senior pool deposits\\n    /// but is now deprecated\\n    TotalFundsLimit,\\n    MaxUnderwriterLimit,\\n    ReserveDenominator,\\n    WithdrawFeeDenominator,\\n    LatenessGracePeriodInDays,\\n    LatenessMaxDays,\\n    DrawdownPeriodInSeconds,\\n    TransferRestrictionPeriodInDays,\\n    LeverageRatio,\\n    /// A number in the range [0, 10000] representing basis points of FIDU taken as a fee\\n    /// when a withdrawal request is canceled.\\n    SeniorPoolWithdrawalCancelationFeeInBps\\n  }\\n  /// @dev TrustedForwarder is deprecated because we no longer use GSN. CreditDesk\\n  ///   and Pool are deprecated because they are no longer used in the protocol.\\n  enum Addresses {\\n    Pool, // deprecated\\n    CreditLineImplementation,\\n    GoldfinchFactory,\\n    CreditDesk, // deprecated\\n    Fidu,\\n    USDC,\\n    TreasuryReserve,\\n    ProtocolAdmin,\\n    OneInch,\\n    TrustedForwarder, // deprecated\\n    CUSDCContract,\\n    GoldfinchConfig,\\n    PoolTokens,\\n    TranchedPoolImplementation, // deprecated\\n    SeniorPool,\\n    SeniorPoolStrategy,\\n    MigratedTranchedPoolImplementation,\\n    BorrowerImplementation,\\n    GFI,\\n    Go,\\n    BackerRewards,\\n    StakingRewards,\\n    FiduUSDCCurveLP,\\n    TranchedPoolImplementationRepository,\\n    WithdrawalRequestToken,\\n    MonthlyScheduleRepo,\\n    CallableLoanImplementationRepository\\n  }\\n}\\n\",\"keccak256\":\"0xc782f8613bfcb2b4709c7919ba175bd74335586dd6c43980b496337c5bf6d132\",\"license\":\"MIT\"},\"contracts/protocol/core/PauserPausable08x.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @title PauserPausable\\n * @notice Inheriting from OpenZeppelin's Pausable contract, this does small\\n *  augmentations to make it work with a PAUSER_ROLE, leveraging the AccessControl contract.\\n *  It is meant to be inherited.\\n * @author Goldfinch\\n */\\n\\ncontract PauserPausable is AccessControlUpgradeable, PausableUpgradeable {\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function __PauserPausable__init() public initializer {\\n    __Pausable_init_unchained();\\n  }\\n\\n  /**\\n   * @dev Pauses all functions guarded by Pause\\n   *\\n   * See {Pausable-_pause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the PAUSER_ROLE.\\n   */\\n\\n  function pause() public onlyPauserRole {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Unpauses the contract\\n   *\\n   * See {Pausable-_unpause}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have the Pauser role\\n   */\\n  function unpause() public onlyPauserRole {\\n    _unpause();\\n  }\\n\\n  modifier onlyPauserRole() {\\n    /// @dev NA: not authorized\\n    require(hasRole(PAUSER_ROLE, _msgSender()), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd0797b1e279739ea547e01a5fd8a4000e95fad2fc18a3802ad6b08427bd0a18a\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/CallableLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// solhint-disable-next-line max-line-length\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {SafeERC20Upgradeable as SafeERC20} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {ICallableLoan, LoanPhase} from \\\"../../../interfaces/ICallableLoan.sol\\\";\\nimport {ICallableLoanErrors} from \\\"../../../interfaces/ICallableLoanErrors.sol\\\";\\nimport {ILoan, LoanType} from \\\"../../../interfaces/ILoan.sol\\\";\\nimport {IRequiresUID} from \\\"../../../interfaces/IRequiresUID.sol\\\";\\nimport {IERC20UpgradeableWithDec} from \\\"../../../interfaces/IERC20UpgradeableWithDec.sol\\\";\\nimport {ICreditLine} from \\\"../../../interfaces/ICreditLine.sol\\\";\\nimport {IPoolTokens} from \\\"../../../interfaces/IPoolTokens.sol\\\";\\nimport {IVersioned} from \\\"../../../interfaces/IVersioned.sol\\\";\\nimport {ISchedule} from \\\"../../../interfaces/ISchedule.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../../interfaces/IGoldfinchConfig.sol\\\";\\n\\nimport {BaseUpgradeablePausable} from \\\"../BaseUpgradeablePausable08x.sol\\\";\\n\\nimport {CallableLoanConfigHelper} from \\\"./CallableLoanConfigHelper.sol\\\";\\nimport {Waterfall} from \\\"./structs/Waterfall.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {CallableCreditLine, CallableCreditLineLogic, CheckpointedCallableCreditLineLogic, SettledTrancheInfo} from \\\"./structs/CallableCreditLine.sol\\\";\\nimport {StaleCallableCreditLine, StaleCallableCreditLineLogic} from \\\"./structs/StaleCallableCreditLine.sol\\\";\\nimport {SaturatingSub} from \\\"../../../library/SaturatingSub.sol\\\";\\nimport {PaymentSchedule, PaymentScheduleLogic} from \\\"../schedule/PaymentSchedule.sol\\\";\\nimport {CallableLoanAccountant} from \\\"./CallableLoanAccountant.sol\\\";\\n\\n// import {console2 as console} from \\\"forge-std/console2.sol\\\";\\n\\n/// @title CallableLoan\\n/// @notice A loan that allows the lenders to call back capital from the borrower.\\n/// @author Warbler Labs\\ncontract CallableLoan is\\n  BaseUpgradeablePausable,\\n  ICallableLoan,\\n  ICallableLoanErrors,\\n  ICreditLine,\\n  IRequiresUID,\\n  IVersioned\\n{\\n  using CheckpointedCallableCreditLineLogic for CallableCreditLine;\\n  using CallableLoanConfigHelper for IGoldfinchConfig;\\n  using SafeERC20 for IERC20UpgradeableWithDec;\\n  using SaturatingSub for uint256;\\n\\n  /*================================================================================\\n  Constants\\n  ================================================================================*/\\n  bytes32 public constant LOCKER_ROLE = keccak256(\\\"LOCKER_ROLE\\\");\\n  // When splitting a pool token as part of submitting a call, the remainder on a\\n  // pool token should be voided if it does not meet this threshold.\\n  // Why 5e3 (half a cent)? Large enough to rule out rounding errors, but small\\n  // enough to not materially effect USD accounting.\\n  uint256 public constant SPLIT_TOKEN_DUST_THRESHOLD = 5e3;\\n\\n  uint8 internal constant MAJOR_VERSION = 1;\\n  uint8 internal constant MINOR_VERSION = 0;\\n  uint8 internal constant PATCH_VERSION = 0;\\n\\n  /*================================================================================\\n  Storage State\\n  ================================================================================*/\\n  StaleCallableCreditLine private _staleCreditLine;\\n  bool public drawdownsPaused;\\n  uint256[] public allowedUIDTypes;\\n\\n  /*================================================================================\\n  Storage Static Configuration\\n  ================================================================================*/\\n  IGoldfinchConfig public config;\\n  uint256 public override createdAt;\\n  address public override borrower;\\n\\n  /*================================================================================\\n  Initialization\\n  ================================================================================*/\\n\\n  function initialize(\\n    IGoldfinchConfig _config,\\n    address _borrower,\\n    uint256 _limit,\\n    uint256 _interestApr,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _lateFeeApr,\\n    uint256 _fundableAt,\\n    uint256[] calldata _allowedUIDTypes\\n  ) external initializer {\\n    // NOTE: This check can be replaced with an after deploy verification rather than\\n    //       a require statement which increases bytecode size.\\n    // require(address(_config) != address(0) && address(_borrower) != address(0), \\\"00\\\");\\n    // TODO: Test this.\\n    if (_numLockupPeriods >= _schedule.periodsPerPrincipalPeriod()) {\\n      revert InvalidNumLockupPeriods(_numLockupPeriods, _schedule.periodsPerPrincipalPeriod());\\n    }\\n\\n    config = _config;\\n    borrower = _borrower;\\n    createdAt = block.timestamp;\\n    allowedUIDTypes = _allowedUIDTypes;\\n\\n    {\\n      address owner = config.protocolAdminAddress();\\n      __BaseUpgradeablePausable__init(owner);\\n\\n      _setupRole(LOCKER_ROLE, _borrower);\\n      _setupRole(LOCKER_ROLE, owner);\\n      _setRoleAdmin(LOCKER_ROLE, OWNER_ROLE);\\n    }\\n\\n    _staleCreditLine.initialize({\\n      _config: _config,\\n      _fundableAt: _fundableAt,\\n      _numLockupPeriods: _numLockupPeriods,\\n      _schedule: _schedule,\\n      _interestApr: _interestApr,\\n      _lateAdditionalApr: _lateFeeApr,\\n      _limit: _limit\\n    });\\n  }\\n\\n  /*================================================================================\\n  Main Public/External Write functions\\n  ================================================================================*/\\n  /// @inheritdoc ICallableLoan\\n  /// @notice Submit a call request for the given amount of capital.\\n  ///         The borrower is obligated to pay the call request back at the end of the\\n  ///         corresponding call request period.\\n  /// @param callAmount Amount of capital to call back\\n  /// @param poolTokenId Pool token id to be called back.\\n  function submitCall(\\n    uint256 callAmount,\\n    uint256 poolTokenId\\n  )\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 callRequestedTokenId, uint256 remainingTokenId)\\n  {\\n    // 1. Checkpoint the credit line and perform basic validation on the call request.\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    IPoolTokens.TokenInfo memory tokenInfo = poolTokens.getTokenInfo(poolTokenId);\\n    if (!poolTokens.isApprovedOrOwner(msg.sender, poolTokenId) || !hasAllowedUID(msg.sender)) {\\n      revert NotAuthorizedToSubmitCall(msg.sender, poolTokenId);\\n    }\\n    if (tokenInfo.tranche != cl.uncalledCapitalTrancheIndex()) {\\n      revert InvalidCallSubmissionPoolToken(poolTokenId);\\n    }\\n\\n    if (callAmount == 0) {\\n      revert ZeroCallSubmissionAmount();\\n    }\\n\\n    if (\\n      callAmount >\\n      cl.proportionalCallablePrincipal({\\n        trancheId: tokenInfo.tranche,\\n        principalDeposited: tokenInfo.principalAmount\\n      })\\n    ) {\\n      revert ExcessiveCallSubmissionAmount(\\n        poolTokenId,\\n        callAmount,\\n        cl.proportionalCallablePrincipal({\\n          trancheId: tokenInfo.tranche,\\n          principalDeposited: tokenInfo.principalAmount\\n        })\\n      );\\n    }\\n\\n    // 2. Determine the amount of principal and interest that can be withdrawn\\n    //    on the given pool token. Withdraw all of this amount.\\n    (uint256 totalInterestWithdrawable, uint256 totalPrincipalWithdrawable) = cl\\n      .proportionalInterestAndPrincipalAvailable({\\n        trancheId: tokenInfo.tranche,\\n        principal: tokenInfo.principalAmount,\\n        feePercent: _reserveFundsFeePercent()\\n      });\\n\\n    {\\n      uint256 netWithdrawableAmount = totalPrincipalWithdrawable -\\n        tokenInfo.principalRedeemed +\\n        totalInterestWithdrawable -\\n        tokenInfo.interestRedeemed;\\n      if (netWithdrawableAmount > 0) {\\n        _withdraw(tokenInfo, poolTokenId, netWithdrawableAmount, cl);\\n      }\\n    }\\n\\n    // 3. Account for the call request in the credit line - this will return the corresponding\\n    //    amounts of principal deposited, principal paid, and interest redeemable which have\\n    //    been moved from the pool token to the call request token.\\n    (\\n      uint256 principalDepositedMoved,\\n      uint256 principalPaidRedeemable,\\n      ,\\n      uint256 interestRedeemable\\n    ) = cl.submitCall(callAmount);\\n    interestRedeemable = (interestRedeemable * (100 - _reserveFundsFeePercent())) / 100;\\n\\n    {\\n      // 4. Mint a new token representing the call requested pool token.\\n      //    Redeem the principal paid and interest redeemed to make sure a user cannot\\n      //    double withdraw their redeemable balances on the call requested token.\\n      address owner = poolTokens.ownerOf(poolTokenId);\\n      callRequestedTokenId = poolTokens.mint(\\n        IPoolTokens.MintParams({\\n          principalAmount: principalDepositedMoved,\\n          tranche: cl.activeCallSubmissionTrancheIndex()\\n        }),\\n        owner\\n      );\\n\\n      poolTokens.redeem(callRequestedTokenId, principalPaidRedeemable, interestRedeemable);\\n\\n      // 5. If an above SPLIT_TOKEN_DUST_THRESHOLD amount of principal remains on the pool token,\\n      //    mint a new token representing the remainder.\\n      //    Redeem the principal paid and interest redeemed to make sure a user cannot\\n      //    double withdraw their redeemable balances on the call requested token.\\n      // TODO: Write test for dust threshold.\\n      if (tokenInfo.principalAmount - principalDepositedMoved > SPLIT_TOKEN_DUST_THRESHOLD) {\\n        remainingTokenId = poolTokens.mint(\\n          IPoolTokens.MintParams({\\n            principalAmount: tokenInfo.principalAmount - principalDepositedMoved,\\n            tranche: cl.uncalledCapitalTrancheIndex()\\n          }),\\n          owner\\n        );\\n\\n        assert(principalPaidRedeemable <= totalPrincipalWithdrawable);\\n        assert(interestRedeemable <= totalInterestWithdrawable);\\n\\n        poolTokens.redeem(\\n          remainingTokenId,\\n          totalPrincipalWithdrawable - principalPaidRedeemable,\\n          totalInterestWithdrawable - interestRedeemable\\n        );\\n      }\\n    }\\n\\n    // 6. Redeem the original pool token's balance so we can burn it. Then burn it.\\n    poolTokens.redeem(poolTokenId, tokenInfo.principalAmount - totalPrincipalWithdrawable, 0);\\n    poolTokens.burn(poolTokenId);\\n\\n    emit CallRequestSubmitted(poolTokenId, callRequestedTokenId, remainingTokenId, callAmount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @notice Supply capital to the loan.\\n  /// @param tranche Should always be uncalled capital tranche index.\\n  /// @param amount amount of capital to supply\\n  /// @return tokenId NFT representing your position in this pool\\n  function deposit(\\n    uint256 tranche,\\n    uint256 amount\\n  ) external override nonReentrant whenNotPaused returns (uint256) {\\n    return _deposit(tranche, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  /// @notice Supply capital to the loan.\\n  /// @param tranche Should always be uncalled capital tranche index.\\n  /// @param amount amount of capital to supply\\n  /// @param deadline deadline of permit operation\\n  /// @param v v portion of signature\\n  /// @param r r portion of signature\\n  /// @param s s portion of signature\\n  /// @return tokenId NFT representing your position in this pool\\n  function depositWithPermit(\\n    uint256 tranche,\\n    uint256 amount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override nonReentrant whenNotPaused returns (uint256 tokenId) {\\n    IERC20PermitUpgradeable(config.usdcAddress()).permit(\\n      msg.sender,\\n      address(this),\\n      amount,\\n      deadline,\\n      v,\\n      r,\\n      s\\n    );\\n    return _deposit(tranche, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function withdraw(\\n    uint256 tokenId,\\n    uint256 amount\\n  ) external override nonReentrant whenNotPaused returns (uint256, uint256) {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    return _withdraw(tokenInfo, tokenId, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function withdrawMultiple(\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata amounts\\n  ) external override nonReentrant whenNotPaused {\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    if (tokenIds.length != amounts.length) {\\n      revert ArrayLengthMismatch(tokenIds.length, amounts.length);\\n    }\\n\\n    for (uint256 i = 0; i < amounts.length; i++) {\\n      IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenIds[i]);\\n      _withdraw(tokenInfo, tokenIds[i], amounts[i], cl);\\n    }\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function withdrawMax(\\n    uint256 tokenId\\n  )\\n    external\\n    override\\n    nonReentrant\\n    whenNotPaused\\n    returns (uint256 interestWithdrawn, uint256 principalWithdrawn)\\n  {\\n    return _withdrawMax(tokenId);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function drawdown(\\n    uint256 amount\\n  ) external override(ICreditLine, ILoan) nonReentrant onlyLocker whenNotPaused {\\n    if (drawdownsPaused) {\\n      revert CannotDrawdownWhenDrawdownsPaused();\\n    }\\n    if (amount == 0) {\\n      revert ZeroDrawdownAmount();\\n    }\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n\\n    cl.drawdown(amount);\\n\\n    config.getUSDC().safeTransfer(borrower, amount);\\n    emit DrawdownMade(borrower, amount);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function pay(\\n    uint256 amount\\n  )\\n    external\\n    override(ICreditLine, ILoan)\\n    nonReentrant\\n    whenNotPaused\\n    returns (PaymentAllocation memory)\\n  {\\n    return _pay(amount);\\n  }\\n\\n  /// @notice Pauses all drawdowns (but not deposits/withdraws)\\n  function pauseDrawdowns() external onlyAdmin {\\n    drawdownsPaused = true;\\n    emit DrawdownsPaused(address(this));\\n  }\\n\\n  /// @notice Unpause drawdowns\\n  function unpauseDrawdowns() external onlyAdmin {\\n    drawdownsPaused = false;\\n    emit DrawdownsUnpaused(address(this));\\n  }\\n\\n  /// Set accepted UID types for the loan.\\n  /// Requires that users have not already begun to deposit.\\n  function setAllowedUIDTypes(uint256[] calldata ids) external onlyLocker {\\n    if (_staleCreditLine.totalPrincipalDeposited() != 0) {\\n      revert CannotSetAllowedUIDTypesAfterDeposit();\\n    }\\n    allowedUIDTypes = ids;\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function setFundableAt(uint256 newFundableAt) external override onlyLocker {\\n    _staleCreditLine.checkpoint().setFundableAt(newFundableAt);\\n  }\\n\\n  /*================================================================================\\n  Main Public/External View functions\\n  ================================================================================*/\\n\\n  /// @inheritdoc ILoan\\n  function getLoanType() external view override returns (LoanType) {\\n    return LoanType.CallableLoan;\\n  }\\n\\n  function getFundableAt() external view returns (uint256) {\\n    return _staleCreditLine.fundableAt();\\n  }\\n\\n  function getAllowedUIDTypes() external view override returns (uint256[] memory) {\\n    return allowedUIDTypes;\\n  }\\n\\n  function inLockupPeriod() public view override returns (bool) {\\n    return _staleCreditLine.inLockupPeriod();\\n  }\\n\\n  function numLockupPeriods() public view override returns (uint256) {\\n    return _staleCreditLine.numLockupPeriods();\\n  }\\n\\n  /// @inheritdoc ICallableLoan\\n  function estimateOwedInterestAt(\\n    uint256 balance,\\n    uint256 timestamp\\n  ) public view override returns (uint256) {\\n    return\\n      _staleCreditLine.interestOwed() +\\n      CallableLoanAccountant.calculateInterest(\\n        timestamp - block.timestamp,\\n        balance,\\n        _staleCreditLine.interestApr()\\n      );\\n  }\\n\\n  /// @inheritdoc ICallableLoan\\n  function estimateOwedInterestAt(uint256 timestamp) external view override returns (uint256) {\\n    return estimateOwedInterestAt(interestBearingBalance(), timestamp);\\n  }\\n\\n  /// @inheritdoc ICallableLoan\\n  function loanPhase() public view override returns (LoanPhase) {\\n    return _staleCreditLine.loanPhase();\\n  }\\n\\n  /// TODO: Low priority tests - currently only used for tests and frontend\\n  /// @inheritdoc ICallableLoan\\n  function interestBearingBalance() public view override returns (uint256) {\\n    return\\n      _staleCreditLine.totalPrincipalDeposited() -\\n      _staleCreditLine.totalPrincipalPaidAt(block.timestamp);\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function getAmountsOwed(\\n    uint256 timestamp\\n  )\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 returnedInterestOwed,\\n      uint256 returnedInterestAccrued,\\n      uint256 returnedPrincipalOwed\\n    )\\n  {\\n    if (timestamp < block.timestamp) {\\n      revert InputTimestampInThePast(timestamp);\\n    }\\n\\n    return (interestOwedAt(timestamp), interestAccruedAt(timestamp), principalOwedAt(timestamp));\\n  }\\n\\n  function uncalledCapitalTrancheIndex() public view override returns (uint256) {\\n    return _staleCreditLine.uncalledCapitalTrancheIndex();\\n  }\\n\\n  function getUncalledCapitalInfo() external view returns (UncalledCapitalInfo memory) {\\n    SettledTrancheInfo memory info = _staleCreditLine.getSettledTrancheInfo(\\n      uncalledCapitalTrancheIndex()\\n    );\\n    return\\n      UncalledCapitalInfo({\\n        interestPaid: info.interestPaid,\\n        principalDeposited: info.principalDeposited,\\n        principalPaid: info.principalPaid,\\n        principalReserved: info.principalReserved\\n      });\\n  }\\n\\n  function getCallRequestPeriod(\\n    uint256 callRequestPeriodIndex\\n  ) external view returns (CallRequestPeriod memory) {\\n    if (callRequestPeriodIndex >= uncalledCapitalTrancheIndex()) {\\n      revert OutOfCallRequestPeriodBounds(uncalledCapitalTrancheIndex() - 1);\\n    }\\n    SettledTrancheInfo memory info = _staleCreditLine.getSettledTrancheInfo(callRequestPeriodIndex);\\n    return\\n      CallRequestPeriod({\\n        interestPaid: info.interestPaid,\\n        principalDeposited: info.principalDeposited,\\n        principalPaid: info.principalPaid,\\n        principalReserved: info.principalReserved\\n      });\\n  }\\n\\n  function availableToCall(uint256 tokenId) public view override returns (uint256) {\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    if (tokenInfo.tranche != uncalledCapitalTrancheIndex()) {\\n      revert MustSubmitCallToUncalledTranche(tokenInfo.tranche, uncalledCapitalTrancheIndex());\\n    }\\n    return\\n      _staleCreditLine.proportionalCallablePrincipal({\\n        trancheId: tokenInfo.tranche,\\n        principalDeposited: tokenInfo.principalAmount\\n      });\\n  }\\n\\n  /// @inheritdoc ILoan\\n  function availableToWithdraw(uint256 tokenId) public view override returns (uint256, uint256) {\\n    return _availableToWithdraw(config.getPoolTokens().getTokenInfo(tokenId));\\n  }\\n\\n  function hasAllowedUID(address sender) public view override returns (bool) {\\n    return config.getGo().goOnlyIdTypes(sender, allowedUIDTypes);\\n  }\\n\\n  /*================================================================================\\n  Internal Write functions\\n  ================================================================================*/\\n  function _pay(uint256 amount) internal returns (ILoan.PaymentAllocation memory) {\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    if (amount == 0) {\\n      revert ZeroPaymentAmount();\\n    }\\n\\n    uint256 interestOwedBeforePayment = cl.interestOwed();\\n    uint256 interestAccruedBeforePayment = cl.interestAccrued();\\n\\n    ILoan.PaymentAllocation memory pa = CallableLoanAccountant.allocatePayment({\\n      paymentAmount: amount,\\n      interestOwed: interestOwedBeforePayment,\\n      interestAccrued: interestAccruedBeforePayment,\\n      principalOwed: cl.principalOwed(),\\n      interestRate: cl.interestApr(),\\n      timeUntilNextPrincipalSettlement: cl.nextPrincipalDueTimeAt(block.timestamp).saturatingSub(\\n        block.timestamp\\n      ),\\n      balance: cl.totalPrincipalOutstanding()\\n    });\\n\\n    uint256 totalInterestPayment = pa.owedInterestPayment + pa.accruedInterestPayment;\\n    uint256 totalPrincipalPayment = pa.principalPayment + pa.additionalBalancePayment;\\n\\n    uint256 reserveFundsFee = (_reserveFundsFeePercent() * totalInterestPayment) / 100;\\n\\n    cl.pay(totalPrincipalPayment, totalInterestPayment);\\n    // TODO: Write test that correct event is emitted.\\n    emit PaymentApplied({\\n      payer: msg.sender,\\n      pool: address(this),\\n      interest: totalInterestPayment,\\n      principal: totalPrincipalPayment,\\n      remaining: pa.paymentRemaining,\\n      reserve: reserveFundsFee\\n    });\\n\\n    config.getUSDC().safeTransferFrom(\\n      msg.sender,\\n      address(this),\\n      totalInterestPayment + totalPrincipalPayment\\n    );\\n    config.getUSDC().safeTransfer(config.reserveAddress(), reserveFundsFee);\\n    emit ReserveFundsCollected(address(this), reserveFundsFee);\\n    return pa;\\n  }\\n\\n  /// @notice Supply capital to the loan.\\n  /// @param tranche Should always be uncalled capital tranche index.\\n  /// @param amount amount of capital to supply\\n  /// @return tokenId NFT representing your position in this pool\\n  function _deposit(uint256 tranche, uint256 amount) internal returns (uint256) {\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    if (amount == 0) {\\n      revert ZeroDepositAmount();\\n    }\\n    if (tranche != cl.uncalledCapitalTrancheIndex()) {\\n      revert MustDepositToUncalledTranche(tranche, cl.uncalledCapitalTrancheIndex());\\n    }\\n    if (!hasAllowedUID(msg.sender)) {\\n      revert InvalidUIDForDepositor(msg.sender);\\n    }\\n\\n    cl.deposit(amount);\\n    uint256 tokenId = config.getPoolTokens().mint(\\n      IPoolTokens.MintParams({tranche: tranche, principalAmount: amount}),\\n      msg.sender\\n    );\\n    config.getUSDC().safeTransferFrom(msg.sender, address(this), amount);\\n\\n    emit DepositMade(msg.sender, tranche, tokenId, amount);\\n    return tokenId;\\n  }\\n\\n  function _withdraw(\\n    IPoolTokens.TokenInfo memory tokenInfo,\\n    uint256 tokenId,\\n    uint256 amount\\n  ) internal returns (uint256, uint256) {\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    _withdraw(tokenInfo, tokenId, amount, cl);\\n  }\\n\\n  function _withdraw(\\n    IPoolTokens.TokenInfo memory tokenInfo,\\n    uint256 tokenId,\\n    uint256 amount,\\n    CallableCreditLine storage cl\\n  ) internal returns (uint256, uint256) {\\n    if (amount == 0) {\\n      revert ZeroWithdrawAmount();\\n    }\\n    IPoolTokens poolTokens = config.getPoolTokens();\\n    if (!poolTokens.isApprovedOrOwner(msg.sender, tokenId) || !hasAllowedUID(msg.sender)) {\\n      revert NotAuthorizedToWithdraw(msg.sender, tokenId);\\n    }\\n\\n    // calculate the amount that will ever be redeemable\\n    (uint256 interestWithdrawable, uint256 principalWithdrawable) = _availableToWithdraw(\\n      tokenInfo,\\n      cl\\n    );\\n\\n    if (amount > interestWithdrawable + principalWithdrawable) {\\n      revert WithdrawAmountExceedsWithdrawable(\\n        amount,\\n        interestWithdrawable + principalWithdrawable\\n      );\\n    }\\n\\n    // prefer to withdraw interest first, then principal\\n    uint256 interestToRedeem = Math.min(interestWithdrawable, amount);\\n    uint256 amountAfterInterest = amount - interestToRedeem;\\n    uint256 principalToRedeem = Math.min(amountAfterInterest, principalWithdrawable);\\n\\n    {\\n      LoanPhase loanPhase = cl.loanPhase();\\n      if (loanPhase == LoanPhase.InProgress) {\\n        poolTokens.redeem({\\n          tokenId: tokenId,\\n          principalRedeemed: principalToRedeem,\\n          interestRedeemed: interestToRedeem\\n        });\\n      } else if (loanPhase == LoanPhase.Funding) {\\n        // if the pool is still funding, we need to decrease the deposit rather than the amount redeemed\\n        assert(interestToRedeem == 0);\\n        cl.withdraw(tokenInfo.tranche, principalToRedeem);\\n        poolTokens.withdrawPrincipal({tokenId: tokenId, principalAmount: principalToRedeem});\\n      } else {\\n        revert CannotWithdrawInDrawdownPeriod();\\n      }\\n    }\\n\\n    config.getUSDC().safeTransfer(msg.sender, interestToRedeem + principalToRedeem);\\n\\n    // While owner is the label of the first argument, it is actually the sender of the transaction.\\n    emit WithdrawalMade({\\n      owner: msg.sender,\\n      tranche: tokenInfo.tranche,\\n      tokenId: tokenId,\\n      interestWithdrawn: interestToRedeem,\\n      principalWithdrawn: principalToRedeem\\n    });\\n\\n    return (interestToRedeem, principalToRedeem);\\n  }\\n\\n  function _withdrawMax(uint256 tokenId) internal returns (uint256, uint256) {\\n    CallableCreditLine storage cl = _staleCreditLine.checkpoint();\\n    IPoolTokens.TokenInfo memory tokenInfo = config.getPoolTokens().getTokenInfo(tokenId);\\n    (uint256 interestWithdrawable, uint256 principalWithdrawable) = _availableToWithdraw(tokenInfo);\\n    uint256 totalWithdrawable = interestWithdrawable + principalWithdrawable;\\n    if (totalWithdrawable == 0) {\\n      return (0, 0);\\n    }\\n    return _withdraw(tokenInfo, tokenId, totalWithdrawable, cl);\\n  }\\n\\n  /*================================================================================\\n  PaymentSchedule proxy functions\\n  ================================================================================*/\\n  function nextPrincipalDueTime() public view returns (uint256) {\\n    return _staleCreditLine.nextPrincipalDueTime();\\n  }\\n\\n  function nextDueTimeAt(uint256 timestamp) public view returns (uint256) {\\n    return _staleCreditLine.nextDueTimeAt(timestamp);\\n  }\\n\\n  function nextInterestDueTimeAt(uint256 timestamp) public view returns (uint256) {\\n    return _staleCreditLine.nextInterestDueTimeAt(timestamp);\\n  }\\n\\n  function schedule() public view override returns (ISchedule) {\\n    return _staleCreditLine.schedule();\\n  }\\n\\n  /*================================================================================\\n  Internal View functions\\n  ================================================================================*/\\n  function _reserveFundsFeePercent() public view returns (uint256) {\\n    return uint256(100) / (config.getReserveDenominator());\\n  }\\n\\n  function _availableToWithdraw(\\n    IPoolTokens.TokenInfo memory tokenInfo\\n  ) internal view returns (uint256 interestAvailable, uint256 principalAvailable) {\\n    if (tokenInfo.principalAmount == 0) {\\n      // Bail out early to account for proportion of zero.\\n      return (0, 0);\\n    }\\n\\n    (uint256 totalInterestWithdrawable, uint256 totalPrincipalWithdrawable) = _staleCreditLine\\n      .proportionalInterestAndPrincipalAvailable({\\n        trancheId: tokenInfo.tranche,\\n        principal: tokenInfo.principalAmount,\\n        feePercent: _reserveFundsFeePercent()\\n      });\\n\\n    // Due to integer math, redeemeded amounts can be more than redeemable amounts after splitting.\\n    assert(tokenInfo.principalRedeemed <= totalPrincipalWithdrawable + 1);\\n    assert(tokenInfo.interestRedeemed <= totalInterestWithdrawable);\\n\\n    return (\\n      totalInterestWithdrawable - tokenInfo.interestRedeemed,\\n      totalPrincipalWithdrawable.saturatingSub(tokenInfo.principalRedeemed)\\n    );\\n  }\\n\\n  function _availableToWithdraw(\\n    IPoolTokens.TokenInfo memory tokenInfo,\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint256 interestAvailable, uint256 principalAvailable) {\\n    if (tokenInfo.principalAmount == 0) {\\n      // Bail out early to account for proportion of zero.\\n      return (0, 0);\\n    }\\n\\n    (uint256 totalInterestWithdrawable, uint256 totalPrincipalWithdrawable) = cl\\n      .proportionalInterestAndPrincipalAvailable({\\n        trancheId: tokenInfo.tranche,\\n        principal: tokenInfo.principalAmount,\\n        feePercent: _reserveFundsFeePercent()\\n      });\\n\\n    // Due to integer math, redeemeded amounts can be more than redeemable amounts after splitting.\\n    assert(tokenInfo.principalRedeemed <= totalPrincipalWithdrawable + 1);\\n    assert(tokenInfo.interestRedeemed <= totalInterestWithdrawable);\\n\\n    return (\\n      totalInterestWithdrawable - tokenInfo.interestRedeemed,\\n      totalPrincipalWithdrawable.saturatingSub(tokenInfo.principalRedeemed)\\n    );\\n  }\\n\\n  /*================================================================================\\n  Legacy ICreditLine Conformance\\n  ================================================================================*/\\n  /// @inheritdoc ILoan\\n  function creditLine() external view override returns (ICreditLine) {\\n    return this;\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function balance() public view returns (uint256) {\\n    return _staleCreditLine.totalPrincipalOutstanding();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function interestOwed() public view override returns (uint256) {\\n    return _staleCreditLine.interestOwed();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function principalOwed() public view override returns (uint256) {\\n    return _staleCreditLine.principalOwed();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function termEndTime() public view override returns (uint256) {\\n    return _staleCreditLine.termEndTime();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function nextDueTime() public view override returns (uint256) {\\n    return _staleCreditLine.nextDueTime();\\n  }\\n\\n  /// @notice We keep this to conform to the ICreditLine interface, but it's redundant information\\n  ///   now that we have `checkpointedAsOf`\\n  function interestAccruedAsOf() public view override returns (uint256) {\\n    return _staleCreditLine.checkpointedAsOf();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function currentLimit() public view override returns (uint256) {\\n    return _staleCreditLine.limit();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function limit() public view override returns (uint256) {\\n    return _staleCreditLine.limit();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function interestApr() public view override returns (uint256) {\\n    return _staleCreditLine.interestApr();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function lateFeeApr() public view override returns (uint256) {\\n    return _staleCreditLine.lateFeeApr();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function isLate() public view override returns (bool) {\\n    return _staleCreditLine.isLate();\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  /// @inheritdoc ICreditLine\\n  function totalInterestAccrued() public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestAccrued();\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  /// @inheritdoc ICreditLine\\n  function totalInterestAccruedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestAccruedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalInterestPaid() public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestPaid();\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  /// @inheritdoc ICreditLine\\n  function totalInterestOwed() public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestOwed();\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  /// @inheritdoc ICreditLine\\n  function totalInterestOwedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.totalInterestOwedAt(timestamp);\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  /// @inheritdoc ICreditLine\\n  function interestOwedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.interestOwedAt(timestamp);\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  /// @inheritdoc ICreditLine\\n  function interestAccrued() public view override returns (uint256) {\\n    return _staleCreditLine.interestAccrued();\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  /// @inheritdoc ICreditLine\\n  function interestAccruedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.interestAccruedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function principalOwedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.principalOwedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalPrincipalPaid() public view override returns (uint256) {\\n    return _staleCreditLine.totalPrincipalPaid();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalPrincipalOwedAt(uint256 timestamp) public view override returns (uint256) {\\n    return _staleCreditLine.totalPrincipalOwedAt(timestamp);\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function totalPrincipalOwed() public view override returns (uint256) {\\n    return _staleCreditLine.totalPrincipalOwed();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function termStartTime() public view override returns (uint256) {\\n    return _staleCreditLine.termStartTime();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function withinPrincipalGracePeriod() public view override returns (bool) {\\n    return _staleCreditLine.withinPrincipalGracePeriod();\\n  }\\n\\n  /// @inheritdoc ICreditLine\\n  function lastFullPaymentTime() public view override returns (uint256) {\\n    return _staleCreditLine.lastFullPaymentTime();\\n  }\\n\\n  /// Unsupported in callable loans.\\n  function pay(\\n    uint256 principalPayment,\\n    uint256 interestPayment\\n  ) external override(ICreditLine) nonReentrant whenNotPaused returns (PaymentAllocation memory) {\\n    revert(\\\"US\\\");\\n  }\\n\\n  /// Unsupported in callable loans.\\n  function maxLimit() external view override returns (uint256) {\\n    revert(\\\"US\\\");\\n  }\\n\\n  /// Unsupported in callable loans.\\n\\n  function setMaxLimit(uint256 newAmount) external override {\\n    revert(\\\"US\\\");\\n  }\\n\\n  /// Unsupported ICreditLine method kept for ICreditLine conformance\\n\\n  function setLimit(uint256 newAmount) external override {\\n    revert(\\\"US\\\");\\n  }\\n\\n  /*================================================================================\\n  Modifiers\\n  ================================================================================*/\\n  /// @inheritdoc IVersioned\\n  function getVersion() external pure override returns (uint8[3] memory version) {\\n    (version[0], version[1], version[2]) = (MAJOR_VERSION, MINOR_VERSION, PATCH_VERSION);\\n  }\\n\\n  modifier onlyLocker() {\\n    if (!hasRole(LOCKER_ROLE, msg.sender)) {\\n      revert RequiresLockerRole(msg.sender);\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2cd78b630a62a8a76f9263423aaf9233faf84db1bbdb13349966afee9162a375\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/CallableLoanAccountant.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {SaturatingSub} from \\\"../../../library/SaturatingSub.sol\\\";\\nimport {ILoan} from \\\"../../../interfaces/ILoan.sol\\\";\\n\\n/**\\n * @title CallableLoanAccountant\\n * @notice Library for handling allocations of payments and interest calculations\\n *         for callable loans.\\n * @author Goldfinch\\n */\\nlibrary CallableLoanAccountant {\\n  using SaturatingSub for uint256;\\n\\n  uint256 internal constant INTEREST_DECIMALS = 1e18;\\n  uint256 internal constant SECONDS_PER_DAY = 60 * 60 * 24;\\n  uint256 internal constant SECONDS_PER_YEAR = SECONDS_PER_DAY * 365;\\n\\n  /// @notice Allocate a payment to proper balances according to the payment waterfall.\\n  ///         Expected payment waterfall:\\n  ///         1. Interest owed\\n  ///         2. Principal owed\\n  ///         3. Interest accrued\\n  ///         4. Interest guaranteed to accrue before the next principal settlement\\n  ///         5. Any additional remaining balance\\n  /// @param paymentAmount amount to allocate\\n  /// @param balance Balance = Remaining principal outstanding\\n  /// @param interestOwed interest owed on the credit line up to the last due time\\n  /// @param interestAccrued interest accrued between the last due time and the present time\\n  /// @param interestRate interest which is guaranteed to accrue between now and\\n  ///                      the next time principal is settled\\n  /// @param timeUntilNextPrincipalSettlement time at which the next principal payment is due\\n  /// @param principalOwed principal owed on the credit line\\n  /// @return PaymentAllocation payment allocation\\n  function allocatePayment(\\n    uint256 paymentAmount,\\n    uint256 interestOwed,\\n    uint256 interestAccrued,\\n    uint256 principalOwed,\\n    uint256 interestRate,\\n    uint256 timeUntilNextPrincipalSettlement,\\n    uint256 balance\\n  ) internal pure returns (ILoan.PaymentAllocation memory) {\\n    uint256 paymentRemaining = paymentAmount;\\n    uint256 owedInterestPayment = Math.min(interestOwed, paymentRemaining);\\n    paymentRemaining -= owedInterestPayment;\\n\\n    uint256 principalPayment = Math.min(principalOwed, paymentRemaining);\\n    paymentRemaining -= principalPayment;\\n\\n    uint256 accruedInterestPayment = Math.min(interestAccrued, paymentRemaining);\\n    paymentRemaining -= accruedInterestPayment;\\n\\n    uint256 balanceRemaining = balance - principalPayment;\\n    uint256 guaranteedFutureInterest = calculateInterest({\\n      secondsElapsed: timeUntilNextPrincipalSettlement,\\n      principal: balanceRemaining,\\n      interestApr: interestRate\\n    });\\n    uint256 guaranteedFutureAccruedInterestPayment = Math.min(\\n      guaranteedFutureInterest,\\n      paymentRemaining\\n    );\\n    paymentRemaining -= guaranteedFutureAccruedInterestPayment;\\n\\n    uint256 additionalBalancePayment = Math.min(paymentRemaining, balanceRemaining);\\n    paymentRemaining -= additionalBalancePayment;\\n\\n    return\\n      ILoan.PaymentAllocation({\\n        owedInterestPayment: owedInterestPayment,\\n        accruedInterestPayment: accruedInterestPayment + guaranteedFutureAccruedInterestPayment,\\n        principalPayment: principalPayment,\\n        additionalBalancePayment: additionalBalancePayment,\\n        paymentRemaining: paymentRemaining\\n      });\\n  }\\n\\n  /**\\n   * Calculates flat interest accrued over a period of time given constant principal.\\n   */\\n  function calculateInterest(\\n    uint256 secondsElapsed,\\n    uint256 principal,\\n    uint256 interestApr\\n  ) internal pure returns (uint256) {\\n    // More readable, but less gas efficient implementation:\\n    // uint256 totalInterestPerYear = (principal * interestApr) / INTEREST_DECIMALS;\\n    // interest = (totalInterestPerYear * secondsElapsed) / SECONDS_PER_YEAR;\\n\\n    return (principal * interestApr * secondsElapsed) / (INTEREST_DECIMALS * SECONDS_PER_YEAR);\\n  }\\n\\n  /**\\n   * Calculates interest accrued along with late interest over a given time period given constant principal\\n   *\\n   */\\n  function calculateInterest(\\n    uint256 start,\\n    uint256 end,\\n    uint256 lateFeesStartsAt,\\n    uint256 principal,\\n    uint256 interestApr,\\n    uint256 lateInterestAdditionalApr\\n  ) internal pure returns (uint256 interest) {\\n    if (end <= start) return 0;\\n    uint256 totalDuration = end - start;\\n    interest = calculateInterest(totalDuration, principal, interestApr);\\n    if (lateFeesStartsAt < end) {\\n      uint256 lateDuration = end.saturatingSub(Math.max(lateFeesStartsAt, start));\\n      interest += calculateInterest(lateDuration, principal, lateInterestAdditionalApr);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9a33b9fbd997089cc6fbe5a908297d91989c268060d912a8d0f6468fc3ae116e\"},\"contracts/protocol/core/callable/CallableLoanConfigHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.17;\\n\\nimport {ConfigOptions} from \\\"../ConfigOptions.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../../interfaces/IGoldfinchConfig.sol\\\";\\nimport {IERC20UpgradeableWithDec} from \\\"../../../interfaces/IERC20UpgradeableWithDec.sol\\\";\\nimport {IPoolTokens} from \\\"../../../interfaces/IPoolTokens.sol\\\";\\nimport {IGoldfinchFactory} from \\\"../../../interfaces/IGoldfinchFactory.sol\\\";\\nimport {IGo} from \\\"../../../interfaces/IGo.sol\\\";\\nimport {ICurveLP} from \\\"../../../interfaces/ICurveLP.sol\\\";\\n\\n/**\\n * @title ConfigHelper\\n * @notice A convenience library for getting easy access to other contracts and constants within the\\n *  protocol, through the use of the IGoldfinchConfig contract\\n * @author Goldfinch\\n */\\n\\nlibrary CallableLoanConfigHelper {\\n  function getUSDC(IGoldfinchConfig config) internal view returns (IERC20UpgradeableWithDec) {\\n    return IERC20UpgradeableWithDec(usdcAddress(config));\\n  }\\n\\n  function getPoolTokens(IGoldfinchConfig config) internal view returns (IPoolTokens) {\\n    return IPoolTokens(poolTokensAddress(config));\\n  }\\n\\n  function getGoldfinchFactory(IGoldfinchConfig config) internal view returns (IGoldfinchFactory) {\\n    return IGoldfinchFactory(goldfinchFactoryAddress(config));\\n  }\\n\\n  function getGo(IGoldfinchConfig config) internal view returns (IGo) {\\n    return IGo(goAddress(config));\\n  }\\n\\n  function creditLineImplementationAddress(\\n    IGoldfinchConfig config\\n  ) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CreditLineImplementation));\\n  }\\n\\n  function configAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchConfig));\\n  }\\n\\n  function poolTokensAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.PoolTokens));\\n  }\\n\\n  function goldfinchFactoryAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GoldfinchFactory));\\n  }\\n\\n  function gfiAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.GFI));\\n  }\\n\\n  function cusdcContractAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.CUSDCContract));\\n  }\\n\\n  function usdcAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.USDC));\\n  }\\n\\n  function tranchedPoolAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TranchedPoolImplementation));\\n  }\\n\\n  function reserveAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.TreasuryReserve));\\n  }\\n\\n  function protocolAdminAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.ProtocolAdmin));\\n  }\\n\\n  function borrowerImplementationAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.BorrowerImplementation));\\n  }\\n\\n  function goAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.Go));\\n  }\\n\\n  function stakingRewardsAddress(IGoldfinchConfig config) internal view returns (address) {\\n    return config.getAddress(uint256(ConfigOptions.Addresses.StakingRewards));\\n  }\\n\\n  function getReserveDenominator(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.ReserveDenominator));\\n  }\\n\\n  function getWithdrawFeeDenominator(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.WithdrawFeeDenominator));\\n  }\\n\\n  function getLatenessGracePeriodInDays(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessGracePeriodInDays));\\n  }\\n\\n  function getLatenessMaxDays(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.LatenessMaxDays));\\n  }\\n\\n  function getDrawdownPeriodInSeconds(IGoldfinchConfig config) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.DrawdownPeriodInSeconds));\\n  }\\n\\n  function getTransferRestrictionPeriodInDays(\\n    IGoldfinchConfig config\\n  ) internal view returns (uint256) {\\n    return config.getNumber(uint256(ConfigOptions.Numbers.TransferRestrictionPeriodInDays));\\n  }\\n}\\n\",\"keccak256\":\"0xc9dbd4e6d496d54e5e3dd3b7b400a6480d57f86656c861662c3206bf32b5df40\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/structs/CallableCreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// import {console2 as console} from \\\"forge-std/console2.sol\\\";\\n\\nimport {ISchedule} from \\\"../../../../interfaces/ISchedule.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../../../interfaces/IGoldfinchConfig.sol\\\";\\nimport {ICallableLoan} from \\\"../../../../interfaces/ICallableLoan.sol\\\";\\nimport {ICallableLoanErrors} from \\\"../../../../interfaces/ICallableLoanErrors.sol\\\";\\nimport {ILoan} from \\\"../../../../interfaces/ILoan.sol\\\";\\n\\nimport {SaturatingSub} from \\\"../../../../library/SaturatingSub.sol\\\";\\nimport {CallableLoanAccountant} from \\\"../CallableLoanAccountant.sol\\\";\\nimport {LoanPhase} from \\\"../../../../interfaces/ICallableLoan.sol\\\";\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n\\nimport {Tranche} from \\\"./Tranche.sol\\\";\\nimport {Waterfall} from \\\"./Waterfall.sol\\\";\\nimport {PaymentSchedule, PaymentScheduleLogic} from \\\"../../schedule/PaymentSchedule.sol\\\";\\nimport {ConfigNumbersHelper} from \\\"../../ConfigNumbersHelper.sol\\\";\\n\\nusing CallableCreditLineLogic for CallableCreditLine global;\\n\\n/**\\n * @notice Handles the accounting of borrower obligations in a callable loan.\\n *         Supports\\n *         - Deposit of funds before the loan is drawn down.\\n *         - Drawdown of funds which should start the loan.\\n *         - Repayment of borrowed funds.\\n *         - Withdrawal of undrawndown funds which were not used to drawdown the loan.\\n *         See \\\"./notes.md\\\" for notes on entities in the CallableCreditLine\\n */\\n\\n// TODO: Add notes to fields to describe each (pseudo-natspec)\\n/// @param _numLockupPeriods Describes when newly submitted call requests are rolled over\\n///                          to the next call request period.\\n///                          Number of periods is relative to the end date of a call request period.\\n///                          e.g. if _numLockupPeriods is 2, then newly submitted call requests\\n///                          in the last two periods of a call request period will be rolled over\\n///                          to the next call request period.\\nstruct CallableCreditLine {\\n  IGoldfinchConfig _config;\\n  uint256 _fundableAt;\\n  uint256 _limit;\\n  uint256 _interestApr;\\n  uint256 _lateAdditionalApr;\\n  uint256 _numLockupPeriods;\\n  uint256 _checkpointedAsOf;\\n  uint256 _lastFullPaymentTime;\\n  uint256 _totalInterestOwedAtLastCheckpoint;\\n  uint256 _totalInterestAccruedAtLastCheckpoint;\\n  Waterfall _waterfall;\\n  PaymentSchedule _paymentSchedule;\\n  uint[20] __padding;\\n}\\n\\nstruct SettledTrancheInfo {\\n  uint256 principalDeposited;\\n  uint256 principalPaid;\\n  uint256 principalReserved;\\n  uint256 interestPaid;\\n}\\n\\nlibrary CallableCreditLineLogic {\\n  using SaturatingSub for uint256;\\n  using ConfigNumbersHelper for IGoldfinchConfig;\\n  using PreviewCallableCreditLineLogic for CallableCreditLine;\\n  using CheckpointedCallableCreditLineLogic for CallableCreditLine;\\n\\n  /*================================================================================\\n  Constants\\n  ================================================================================*/\\n  uint256 internal constant SECONDS_PER_DAY = 60 * 60 * 24;\\n\\n  /*================================================================================\\n  Errors\\n  ================================================================================*/\\n  function initialize(\\n    CallableCreditLine storage cl,\\n    IGoldfinchConfig _config,\\n    uint256 _fundableAt,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _interestApr,\\n    uint256 _lateAdditionalApr,\\n    uint256 _limit\\n  ) internal {\\n    if (cl._checkpointedAsOf != 0) {\\n      revert ICallableLoanErrors.CannotReinitialize();\\n    }\\n    cl._config = _config;\\n    cl._limit = _limit;\\n    cl._numLockupPeriods = _numLockupPeriods;\\n    // Keep PaymentSchedule's startTime \\\"0\\\" until it is set at first drawdown (schedule start).\\n    cl._paymentSchedule = PaymentSchedule({schedule: _schedule, startTime: 0});\\n    cl._waterfall.initialize(_schedule.totalPrincipalPeriods());\\n    cl._interestApr = _interestApr;\\n    cl._lateAdditionalApr = _lateAdditionalApr;\\n    cl._checkpointedAsOf = block.timestamp;\\n\\n    // Initialize cumulative/settled values\\n    cl._lastFullPaymentTime = block.timestamp;\\n    cl._totalInterestAccruedAtLastCheckpoint = 0;\\n    cl._totalInterestOwedAtLastCheckpoint = 0;\\n  }\\n\\n  /*================================================================================\\n  Main Write Functions\\n  ================================================================================*/\\n  function pay(\\n    CallableCreditLine storage cl,\\n    uint256 principalPayment,\\n    uint256 interestPayment\\n  ) internal {\\n    if (cl.loanPhase() != LoanPhase.InProgress) {\\n      revert ICallableLoanErrors.InvalidLoanPhase(cl.loanPhase(), LoanPhase.InProgress);\\n    }\\n\\n    cl._waterfall.pay({\\n      principalAmount: principalPayment,\\n      interestAmount: interestPayment,\\n      reserveTranchesIndexStart: cl._paymentSchedule.currentPrincipalPeriod()\\n    });\\n\\n    if (cl.principalOwed() == 0 && cl.interestOwed() == 0) {\\n      cl._lastFullPaymentTime = block.timestamp;\\n    }\\n  }\\n\\n  /// @notice Updates accounting for the given drawdown amount.\\n  ///         If the loan is in the Funding state, then the loan will be permanently\\n  ///         transitioned to the DrawdownPeriod state.\\n  function drawdown(CallableCreditLine storage cl, uint256 amount) internal {\\n    LoanPhase loanPhase = cl.loanPhase();\\n    if (loanPhase == LoanPhase.Funding) {\\n      cl._paymentSchedule.startAt(block.timestamp);\\n      cl._lastFullPaymentTime = block.timestamp;\\n      loanPhase = cl.loanPhase();\\n      emit DepositsLocked(address(this));\\n    }\\n    if (loanPhase != LoanPhase.DrawdownPeriod) {\\n      revert ICallableLoanErrors.InvalidLoanPhase(loanPhase, LoanPhase.DrawdownPeriod);\\n    }\\n\\n    if (amount > cl.totalPrincipalPaid()) {\\n      revert ICallableLoanErrors.DrawdownAmountExceedsDeposits(amount, cl.totalPrincipalPaid());\\n    }\\n    cl._waterfall.drawdown(amount);\\n  }\\n\\n  function submitCall(\\n    CallableCreditLine storage cl,\\n    uint256 amount\\n  )\\n    internal\\n    returns (\\n      uint256 principalDepositedMoved,\\n      uint256 principalPaidMoved,\\n      uint256 principalReservedMoved,\\n      uint256 interestMoved\\n    )\\n  {\\n    if (cl.loanPhase() != LoanPhase.InProgress) {\\n      revert ICallableLoanErrors.InvalidLoanPhase(cl.loanPhase(), LoanPhase.InProgress);\\n    }\\n\\n    uint256 activeCallTranche = cl.activeCallSubmissionTrancheIndex();\\n    if (activeCallTranche >= cl.uncalledCapitalTrancheIndex()) {\\n      revert ICallableLoanErrors.TooLateToSubmitCallRequests();\\n    }\\n    if (cl.inLockupPeriod()) {\\n      revert ICallableLoanErrors.CannotSubmitCallInLockupPeriod();\\n    }\\n    return cl._waterfall.move(amount, activeCallTranche);\\n  }\\n\\n  function deposit(CallableCreditLine storage cl, uint256 amount) internal {\\n    LoanPhase loanPhase = cl.loanPhase();\\n    if (loanPhase != LoanPhase.Funding) {\\n      revert ICallableLoanErrors.InvalidLoanPhase(loanPhase, LoanPhase.Funding);\\n    }\\n\\n    // !! Make assumption that Funding phase deposits are solely in the uncalled capital tranche.\\n    if (\\n      amount + cl._waterfall.getTranche(cl.uncalledCapitalTrancheIndex()).principalDeposited() >\\n      cl.limit()\\n    ) {\\n      revert ICallableLoanErrors.DepositExceedsLimit(\\n        amount,\\n        cl._waterfall.totalPrincipalDeposited(),\\n        cl.limit()\\n      );\\n    }\\n    cl._waterfall.deposit(amount);\\n  }\\n\\n  /// Withdraws funds from the specified tranche.\\n  function withdraw(CallableCreditLine storage cl, uint256 trancheId, uint256 amount) internal {\\n    LoanPhase loanPhase = cl.loanPhase();\\n    if (loanPhase != LoanPhase.Funding) {\\n      revert ICallableLoanErrors.InvalidLoanPhase(loanPhase, LoanPhase.Funding);\\n    }\\n    cl._waterfall.withdraw(amount);\\n  }\\n\\n  /// Settles payment reserves and updates the checkpointed values.\\n  function checkpoint(CallableCreditLine storage cl) internal {\\n    LoanPhase loanPhase = cl.loanPhase();\\n    if (loanPhase == LoanPhase.Funding) {\\n      return;\\n    }\\n\\n    uint256 currentlyActivePeriod = cl._paymentSchedule.currentPeriod();\\n    uint256 activePeriodAtLastCheckpoint = cl._paymentSchedule.periodAt(cl._checkpointedAsOf);\\n\\n    if (currentlyActivePeriod > activePeriodAtLastCheckpoint) {\\n      cl._waterfall.settleReserves(currentlyActivePeriod);\\n    }\\n\\n    cl._lastFullPaymentTime = cl.lastFullPaymentTime();\\n\\n    /// !! IMPORTANT !!\\n    /// The order of these assignments matter!\\n    /// Calculating cl.previewTotalInterestOwed() depends on the value of cl._totalInterestAccruedAtLastCheckpoint.\\n    /// _totalInterestOwedAtLastCheckpoint must use the ORIGINAL value of _totalInterestAccruedAtLastCheckpoint!\\n    /// Otherwise cl.previewTotalInterestOwed() (and thus cl._totalInterestOwedAtLastCheckpoint) will be incorrect.\\n    cl._totalInterestOwedAtLastCheckpoint = cl.previewTotalInterestOwed();\\n    cl._totalInterestAccruedAtLastCheckpoint = cl.previewTotalInterestAccrued();\\n\\n    cl._checkpointedAsOf = block.timestamp;\\n  }\\n\\n  function setFundableAt(CallableCreditLine storage cl, uint256 newFundableAt) internal {\\n    // TODO: Needs unit test\\n    if (cl.loanPhase() != LoanPhase.Prefunding) {\\n      revert ICallableLoanErrors.CannotSetFundableAtAfterFundableAt(cl._fundableAt);\\n    }\\n    cl._fundableAt = newFundableAt;\\n  }\\n\\n  /*================================================================================\\n  Main View Functions\\n  ================================================================================*/\\n  function loanPhase(CallableCreditLine storage cl) internal view returns (LoanPhase) {\\n    if (!cl._paymentSchedule.isActive()) {\\n      return block.timestamp < cl._fundableAt ? LoanPhase.Prefunding : LoanPhase.Funding;\\n    } else if (block.timestamp < cl.termStartTime() + cl._config.getDrawdownPeriodInSeconds()) {\\n      return LoanPhase.DrawdownPeriod;\\n    } else {\\n      return LoanPhase.InProgress;\\n    }\\n  }\\n\\n  function numLockupPeriods(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._numLockupPeriods;\\n  }\\n\\n  function uncalledCapitalTrancheIndex(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._waterfall.uncalledCapitalTrancheIndex();\\n  }\\n\\n  function principalOwedAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256 returnedPrincipalOwed) {\\n    return\\n      cl.totalPrincipalOwedAt(timestamp).saturatingSub(\\n        cl._waterfall.totalPrincipalPaidAfterSettlementUpToTranche(\\n          cl.trancheIndexAtTimestamp(timestamp)\\n        )\\n      );\\n  }\\n\\n  function principalOwed(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.principalOwedAt(block.timestamp);\\n  }\\n\\n  function totalPrincipalOwed(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.totalPrincipalOwedAt(block.timestamp);\\n  }\\n\\n  function totalPrincipalOwedAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._waterfall.totalPrincipalDepositedUpToTranche(cl.trancheIndexAtTimestamp(timestamp));\\n  }\\n\\n  function totalPrincipalPaid(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.totalPrincipalPaidAt(block.timestamp);\\n  }\\n\\n  /// Calculates total interest owed at a given timestamp.\\n  /// IT: Invalid timestamp - timestamp must be after the last checkpoint.\\n\\n  function totalInterestOwedAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    if (timestamp < cl._checkpointedAsOf) {\\n      revert ICallableLoanErrors.InputTimestampBeforeCheckpoint(timestamp, cl._checkpointedAsOf);\\n    }\\n    // After loan maturity there is no concept of additional interest. All interest accrued\\n    // automatically becomes interest owed.\\n    if (timestamp > cl.termEndTime()) {\\n      return cl.totalInterestAccruedAt(timestamp);\\n    }\\n\\n    uint256 lastInterestDueTimeAtTimestamp = cl._paymentSchedule.previousInterestDueTimeAt(\\n      timestamp\\n    );\\n\\n    if (lastInterestDueTimeAtTimestamp <= cl._checkpointedAsOf) {\\n      return cl._totalInterestOwedAtLastCheckpoint;\\n    } else {\\n      return cl.totalInterestAccruedAt(lastInterestDueTimeAtTimestamp);\\n    }\\n  }\\n\\n  /// Calculates total interest owed at a given timestamp.\\n  /// Assumes that principal outstanding is constant from now until the given `timestamp`.\\n  /// @notice IT: Invalid timestamp\\n  function interestOwedAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    if (timestamp < cl._checkpointedAsOf) {\\n      revert ICallableLoanErrors.InputTimestampBeforeCheckpoint(timestamp, cl._checkpointedAsOf);\\n    }\\n    return cl.totalInterestOwedAt(timestamp).saturatingSub(cl.totalInterestPaid());\\n  }\\n\\n  /// Interest accrued up to `timestamp`\\n  /// PT: Past timestamp - timestamp must be now or in the future.\\n  function interestAccruedAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    if (timestamp < block.timestamp) {\\n      revert ICallableLoanErrors.InputTimestampInThePast(timestamp);\\n    }\\n    return\\n      cl.totalInterestAccruedAt(timestamp).saturatingSub(\\n        Math.max(cl._waterfall.totalInterestPaid(), cl.totalInterestOwedAt(timestamp))\\n      );\\n  }\\n\\n  /* Test cases\\n   *S = Start B = Buffer Applied At L = Late Fees Start At E = End\\n   *SBLE\\n   *SBEL\\n   *SLEB\\n   *SLBE\\n   *SELB\\n   *SEBL\\n\\n   *LSEB\\n   *LSBE\\n   */\\n\\n  /// Calculates interest accrued over the duration bounded by the `cl._checkpointedAsOf` and `timestamp` timestamps.\\n  /// Assumes cl._waterfall.totalPrincipalOutstanding() for the principal balance that the interest is applied to.\\n  /// Assumes a checkpoint has occurred.\\n  /// If a checkpoint has not occurred, late fees will not account for balance settlement or future payments.\\n  function totalInterestAccruedAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256 totalInterestAccruedReturned) {\\n    if (timestamp < cl._checkpointedAsOf) {\\n      revert ICallableLoanErrors.InputTimestampBeforeCheckpoint(timestamp, cl._checkpointedAsOf);\\n    }\\n\\n    if (!cl._paymentSchedule.isActive()) {\\n      return 0;\\n    }\\n\\n    totalInterestAccruedReturned = cl._totalInterestAccruedAtLastCheckpoint;\\n    uint256 firstInterestEndPoint = timestamp;\\n    if (cl._checkpointedAsOf < cl.termEndTime()) {\\n      firstInterestEndPoint = Math.min(\\n        cl._paymentSchedule.nextPrincipalDueTimeAt(cl._checkpointedAsOf),\\n        timestamp\\n      );\\n    }\\n\\n    // TODO: Test scenario where cl._lastFullPaymentTime falls on due date.\\n    uint256 lateFeesStartAt = Math.max(\\n      cl._checkpointedAsOf,\\n      cl._paymentSchedule.nextDueTimeAt(cl._lastFullPaymentTime) +\\n        (cl._config.getLatenessGracePeriodInDays() * (SECONDS_PER_DAY))\\n    );\\n\\n    // Calculate interest accrued before balances are settled.\\n    totalInterestAccruedReturned += CallableLoanAccountant.calculateInterest(\\n      cl._checkpointedAsOf,\\n      firstInterestEndPoint,\\n      lateFeesStartAt,\\n      cl._waterfall.totalPrincipalOutstandingBeforeReserves(),\\n      cl._interestApr,\\n      cl._lateAdditionalApr\\n    );\\n\\n    if (firstInterestEndPoint < timestamp) {\\n      // Calculate interest accrued after balances are settled.\\n      totalInterestAccruedReturned += CallableLoanAccountant.calculateInterest(\\n        firstInterestEndPoint,\\n        timestamp,\\n        lateFeesStartAt,\\n        cl._waterfall.totalPrincipalOutstandingAfterReserves(),\\n        cl._interestApr,\\n        cl._lateAdditionalApr\\n      );\\n    }\\n  }\\n\\n  function totalPrincipalPaidAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256 principalPaidSum) {\\n    principalPaidSum = cl._waterfall.totalPrincipalPaid();\\n\\n    if (!cl.isActive()) {\\n      return principalPaidSum;\\n    }\\n\\n    uint256 trancheIndexAtTimestamp = cl.trancheIndexAtTimestamp(timestamp);\\n\\n    /// If we entered a new principal period since checkpoint,\\n    /// we should settle reserved principal in the uncalled tranche.\\n    if (trancheIndexAtTimestamp > cl.trancheIndexAtTimestamp(cl._checkpointedAsOf)) {\\n      principalPaidSum += cl\\n        ._waterfall\\n        .getTranche(cl.uncalledCapitalTrancheIndex())\\n        .principalReserved();\\n    }\\n\\n    // Unsettled principal from previous call request periods which will settle.\\n    principalPaidSum += cl._waterfall.totalPrincipalReservedUpToTranche(\\n      Math.min(trancheIndexAtTimestamp, cl.uncalledCapitalTrancheIndex())\\n    );\\n  }\\n\\n  function lastFullPaymentTime(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint256 fullPaymentTime) {\\n    if (cl.loanPhase() != LoanPhase.InProgress) {\\n      // The loan has not begun && paymentSchedule calls will revert.\\n      return block.timestamp;\\n    }\\n\\n    fullPaymentTime = cl._lastFullPaymentTime;\\n\\n    uint256 startPeriod = cl._paymentSchedule.periodAt(cl._checkpointedAsOf);\\n    uint256 currentlyActivePeriod = cl._paymentSchedule.currentPeriod();\\n\\n    for (uint256 periodIndex = startPeriod; periodIndex < currentlyActivePeriod; periodIndex++) {\\n      uint256 periodEndTime = cl._paymentSchedule.periodEndTime(periodIndex);\\n\\n      if (cl.principalOwedAt(periodEndTime) == 0 && cl.interestOwedAt(periodEndTime) == 0) {\\n        fullPaymentTime = periodEndTime;\\n      } else {\\n        // If we hit a period where there is still principal or interest owed, we can stop.\\n        break;\\n      }\\n    }\\n  }\\n\\n  function isLate(CallableCreditLine storage cl) internal view returns (bool) {\\n    return cl.isLate(block.timestamp);\\n  }\\n\\n  function isLate(CallableCreditLine storage cl, uint256 timestamp) internal view returns (bool) {\\n    if (\\n      cl.loanPhase() != LoanPhase.InProgress ||\\n      ((cl.totalPrincipalOwedAt(timestamp) + cl.totalInterestOwedAt(timestamp)) == 0)\\n    ) {\\n      return false;\\n    }\\n\\n    uint256 oldestUnpaidDueTime = cl._paymentSchedule.nextDueTimeAt(cl.lastFullPaymentTime());\\n    return timestamp > oldestUnpaidDueTime;\\n  }\\n\\n  function totalPrincipalOutstandingBeforeReserves(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._waterfall.totalPrincipalOutstandingBeforeReserves();\\n  }\\n\\n  /// Returns the total amount of principal outstanding - including reserved principal.\\n  function totalPrincipalOutstanding(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._waterfall.totalPrincipalOutstandingAfterReserves();\\n  }\\n\\n  function proportionalCallablePrincipal(\\n    CallableCreditLine storage cl,\\n    uint256 trancheId,\\n    uint256 principalDeposited\\n  ) internal view returns (uint256) {\\n    return\\n      cl._waterfall.getTranche(trancheId).proportionalPrincipalOutstandingBeforeReserves(\\n        principalDeposited\\n      );\\n  }\\n\\n  /// @notice Returns the tranche index which the given timestamp falls within.\\n  /// @return The tranche index will go 1 beyond the max tranche index to represent the \\\"after loan\\\" period.\\n  ///         This is not to be confused with activeCallSubmissionTrancheIndex, which is the tranche for which\\n  ///         current call requests should be submitted to.\\n  ///         See notes.md for explanation of relationship between principalPeriod, call request period and tranche.\\n  function trancheIndexAtTimestamp(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._paymentSchedule.principalPeriodAt(timestamp);\\n  }\\n\\n  /// Returns the index of the tranche which current call requests should be submitted to.\\n  ///See notes.md for explanation of relationship between principalPeriod, call request period and tranche.\\n  function activeCallSubmissionTrancheIndex(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint256 activeTrancheIndex) {\\n    uint256 currentTranche = cl.trancheIndexAtTimestamp(block.timestamp);\\n    // Call requests submitted in the current principal period's lockup period are\\n    // submitted into the tranche of the NEXT principal period\\n    return cl.inLockupPeriod() ? currentTranche + 1 : currentTranche;\\n  }\\n\\n  /// Returns the balances of the given tranche - only settling principal if the tranche should be settled.\\n  function getSettledTrancheInfo(\\n    CallableCreditLine storage cl,\\n    uint256 trancheId\\n  ) internal view returns (SettledTrancheInfo memory settledTrancheInfo) {\\n    Tranche storage tranche = cl._waterfall.getTranche(trancheId);\\n    settledTrancheInfo.interestPaid = tranche.interestPaid();\\n    settledTrancheInfo.principalDeposited = tranche.principalDeposited();\\n\\n    if (cl.isActive() && trancheId < cl._paymentSchedule.currentPrincipalPeriod()) {\\n      settledTrancheInfo.principalPaid = tranche.principalPaid() + tranche.principalReserved();\\n      settledTrancheInfo.principalReserved = 0;\\n    } else {\\n      settledTrancheInfo.principalPaid = tranche.principalPaid();\\n      settledTrancheInfo.principalReserved = tranche.principalReserved();\\n    }\\n  }\\n\\n  function totalInterestPaid(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._waterfall.totalInterestPaid();\\n  }\\n\\n  function totalPrincipalDeposited(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._waterfall.totalPrincipalDeposited();\\n  }\\n\\n  function inLockupPeriod(CallableCreditLine storage cl) internal view returns (bool) {\\n    uint256 currentPeriod = cl._paymentSchedule.currentPeriod();\\n    uint256 numPeriodsPerPrincipalPeriod = cl._paymentSchedule.periodsPerPrincipalPeriod();\\n    return\\n      currentPeriod % numPeriodsPerPrincipalPeriod >=\\n      numPeriodsPerPrincipalPeriod - cl._numLockupPeriods;\\n  }\\n\\n  /*================================================================================\\n  Payment Schedule Proxy Functions\\n  ================================================================================*/\\n\\n  function isActive(CallableCreditLine storage cl) internal view returns (bool) {\\n    return cl._paymentSchedule.isActive();\\n  }\\n\\n  function withinPrincipalGracePeriod(CallableCreditLine storage cl) internal view returns (bool) {\\n    return cl._paymentSchedule.withinPrincipalGracePeriodAt(block.timestamp);\\n  }\\n\\n  function principalPeriodAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._paymentSchedule.principalPeriodAt(timestamp);\\n  }\\n\\n  function nextPrincipalDueTime(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.nextPrincipalDueTimeAt(block.timestamp);\\n  }\\n\\n  function nextPrincipalDueTimeAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._paymentSchedule.nextPrincipalDueTimeAt(timestamp);\\n  }\\n\\n  function nextInterestDueTimeAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._paymentSchedule.nextInterestDueTimeAt(timestamp);\\n  }\\n\\n  function nextDueTime(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.nextDueTimeAt(block.timestamp);\\n  }\\n\\n  function nextDueTimeAt(\\n    CallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._paymentSchedule.nextDueTimeAt(timestamp);\\n  }\\n\\n  function termStartTime(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._paymentSchedule.termStartTime();\\n  }\\n\\n  function termEndTime(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._paymentSchedule.termEndTime();\\n  }\\n\\n  /*================================================================================\\n  Static Struct Config Getters\\n  ================================================================================*/\\n  function fundableAt(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._fundableAt;\\n  }\\n\\n  function interestApr(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._interestApr;\\n  }\\n\\n  function lateFeeAdditionalApr(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._lateAdditionalApr;\\n  }\\n\\n  function limit(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._limit;\\n  }\\n\\n  function checkpointedAsOf(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._checkpointedAsOf;\\n  }\\n\\n  function lateFeeApr(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._lateAdditionalApr;\\n  }\\n\\n  event DepositsLocked(address indexed loan);\\n}\\n\\n/// @notice Functions which make no assumption that a checkpoint has just occurred.\\nlibrary PreviewCallableCreditLineLogic {\\n  function previewProportionalInterestAndPrincipalAvailable(\\n    CallableCreditLine storage cl,\\n    uint256 trancheId,\\n    uint256 principal,\\n    uint256 feePercent\\n  ) internal view returns (uint256, uint256) {\\n    Tranche storage tranche = cl._waterfall.getTranche(trancheId);\\n    if (cl.loanPhase() != LoanPhase.InProgress) {\\n      return tranche.proportionalInterestAndPrincipalAvailable(principal, feePercent);\\n    }\\n    bool uncalledTrancheAndNeedsSettling = trancheId == cl.uncalledCapitalTrancheIndex() &&\\n      cl.trancheIndexAtTimestamp(cl._checkpointedAsOf) <\\n      cl._paymentSchedule.currentPrincipalPeriod();\\n    bool callRequestTrancheAndNeedsSettling = trancheId < cl.uncalledCapitalTrancheIndex() &&\\n      trancheId < cl._paymentSchedule.currentPrincipalPeriod();\\n    bool needsSettling = uncalledTrancheAndNeedsSettling || callRequestTrancheAndNeedsSettling;\\n\\n    return\\n      needsSettling\\n        ? tranche.proportionalInterestAndPrincipalAvailableAfterReserves(principal, feePercent)\\n        : tranche.proportionalInterestAndPrincipalAvailable(principal, feePercent);\\n  }\\n\\n  /// Returns the total interest owed less total interest paid\\n  function previewInterestOwed(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.interestOwedAt(block.timestamp);\\n  }\\n\\n  /// Returns the total interest owed\\n  function previewTotalInterestOwed(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.totalInterestOwedAt(block.timestamp);\\n  }\\n\\n  /// Interest accrued up to now minus the max(totalInterestPaid, totalInterestOwedAt)\\n  function previewInterestAccrued(CallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl.interestAccruedAt(block.timestamp);\\n  }\\n\\n  /// Returns the total interest accrued\\n  function previewTotalInterestAccrued(\\n    CallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl.totalInterestAccruedAt(block.timestamp);\\n  }\\n}\\n\\n/// @notice Functions which assume a checkpoint has just occurred.\\nlibrary CheckpointedCallableCreditLineLogic {\\n  using SaturatingSub for uint256;\\n\\n  function totalInterestOwed(CallableCreditLine storage cl) internal view returns (uint256) {\\n    assert(cl._checkpointedAsOf == block.timestamp);\\n    return cl._totalInterestOwedAtLastCheckpoint;\\n  }\\n\\n  function totalInterestAccrued(CallableCreditLine storage cl) internal view returns (uint256) {\\n    assert(cl._checkpointedAsOf == block.timestamp);\\n    return cl._totalInterestAccruedAtLastCheckpoint;\\n  }\\n\\n  function proportionalInterestAndPrincipalAvailable(\\n    CallableCreditLine storage cl,\\n    uint256 trancheId,\\n    uint256 principal,\\n    uint256 feePercent\\n  ) internal view returns (uint256, uint256) {\\n    assert(cl._checkpointedAsOf == block.timestamp);\\n    Tranche storage tranche = cl._waterfall.getTranche(trancheId);\\n    return tranche.proportionalInterestAndPrincipalAvailable(principal, feePercent);\\n  }\\n\\n  /// Returns the total interest owed less total interest paid\\n  function interestOwed(CallableCreditLine storage cl) internal view returns (uint256) {\\n    assert(cl._checkpointedAsOf == block.timestamp);\\n    return cl._totalInterestOwedAtLastCheckpoint.saturatingSub(cl.totalInterestPaid());\\n  }\\n\\n  /// Interest accrued up to now minus the max(totalInterestPaid, totalInterestOwedAt)\\n  function interestAccrued(CallableCreditLine storage cl) internal view returns (uint256) {\\n    assert(cl._checkpointedAsOf == block.timestamp);\\n    return\\n      cl._totalInterestAccruedAtLastCheckpoint.saturatingSub(\\n        Math.max(cl._waterfall.totalInterestPaid(), cl._totalInterestOwedAtLastCheckpoint)\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x6481d6846a8b0272043f179c7538770106c999221b6237f03ac945c222673b52\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/structs/StaleCallableCreditLine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {ISchedule} from \\\"../../../../interfaces/ISchedule.sol\\\";\\nimport {IGoldfinchConfig} from \\\"../../../../interfaces/IGoldfinchConfig.sol\\\";\\nimport {LoanPhase} from \\\"../../../../interfaces/ICallableLoan.sol\\\";\\nimport {Waterfall} from \\\"./Waterfall.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport {CallableCreditLine, CallableCreditLineLogic, PreviewCallableCreditLineLogic, SettledTrancheInfo} from \\\"./CallableCreditLine.sol\\\";\\nimport {PaymentSchedule, PaymentScheduleLogic} from \\\"../../schedule/PaymentSchedule.sol\\\";\\n\\nstruct StaleCallableCreditLine {\\n  CallableCreditLine _cl;\\n}\\n\\nusing StaleCallableCreditLineLogic for StaleCallableCreditLine global;\\n\\n/**\\n * Simple wrapper around CallableCreditLine which returns a checkpointed\\n * CallableCreditLine after checkpoint() is called.\\n */\\nlibrary StaleCallableCreditLineLogic {\\n  using PreviewCallableCreditLineLogic for CallableCreditLine;\\n\\n  function initialize(\\n    StaleCallableCreditLine storage cl,\\n    IGoldfinchConfig _config,\\n    uint256 _fundableAt,\\n    uint256 _numLockupPeriods,\\n    ISchedule _schedule,\\n    uint256 _interestApr,\\n    uint256 _lateAdditionalApr,\\n    uint256 _limit\\n  ) internal {\\n    cl._cl.initialize({\\n      _config: _config,\\n      _fundableAt: _fundableAt,\\n      _numLockupPeriods: _numLockupPeriods,\\n      _schedule: _schedule,\\n      _interestApr: _interestApr,\\n      _lateAdditionalApr: _lateAdditionalApr,\\n      _limit: _limit\\n    });\\n  }\\n\\n  function checkpoint(\\n    StaleCallableCreditLine storage cl\\n  ) internal returns (CallableCreditLine storage) {\\n    cl._cl.checkpoint();\\n    return cl._cl;\\n  }\\n\\n  function schedule(StaleCallableCreditLine storage cl) internal view returns (ISchedule) {\\n    return cl._cl._paymentSchedule.schedule;\\n  }\\n\\n  function termStartTime(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.termStartTime();\\n  }\\n\\n  function lastFullPaymentTime(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.lastFullPaymentTime();\\n  }\\n\\n  function fundableAt(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.fundableAt();\\n  }\\n\\n  function limit(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.limit();\\n  }\\n\\n  function interestApr(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.interestApr();\\n  }\\n\\n  function lateFeeApr(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.lateFeeApr();\\n  }\\n\\n  function isLate(StaleCallableCreditLine storage cl) internal view returns (bool) {\\n    return cl._cl.isLate();\\n  }\\n\\n  function loanPhase(StaleCallableCreditLine storage cl) internal view returns (LoanPhase) {\\n    return cl._cl.loanPhase();\\n  }\\n\\n  function checkpointedAsOf(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.checkpointedAsOf();\\n  }\\n\\n  function numLockupPeriods(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.numLockupPeriods();\\n  }\\n\\n  function inLockupPeriod(StaleCallableCreditLine storage cl) internal view returns (bool) {\\n    return cl._cl.inLockupPeriod();\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  function interestOwed(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.previewInterestOwed();\\n  }\\n\\n  function principalOwed(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.principalOwed();\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  function interestOwedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.interestOwedAt(timestamp);\\n  }\\n\\n  function principalOwedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.principalOwedAt(timestamp);\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  function totalInterestOwedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalInterestOwedAt(timestamp);\\n  }\\n\\n  function totalPrincipalOwedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalOwedAt(timestamp);\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  function totalInterestOwed(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.previewTotalInterestOwed();\\n  }\\n\\n  function totalPrincipalDeposited(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalDeposited();\\n  }\\n\\n  function totalPrincipalOwed(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalOwed();\\n  }\\n\\n  function totalPrincipalOutstanding(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalOutstanding();\\n  }\\n\\n  function totalPrincipalOutstandingBeforeReserves(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalOutstandingBeforeReserves();\\n  }\\n\\n  function nextInterestDueTimeAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.nextInterestDueTimeAt(timestamp);\\n  }\\n\\n  function nextPrincipalDueTime(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.nextPrincipalDueTime();\\n  }\\n\\n  function nextPrincipalDueTimeAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.nextPrincipalDueTimeAt(timestamp);\\n  }\\n\\n  function nextDueTimeAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.nextDueTimeAt(timestamp);\\n  }\\n\\n  function nextDueTime(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.nextDueTime();\\n  }\\n\\n  function termEndTime(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.termEndTime();\\n  }\\n\\n  function proportionalCallablePrincipal(\\n    StaleCallableCreditLine storage cl,\\n    uint256 trancheId,\\n    uint256 principalDeposited\\n  ) internal view returns (uint256) {\\n    return cl._cl.proportionalCallablePrincipal(trancheId, principalDeposited);\\n  }\\n\\n  function proportionalInterestAndPrincipalAvailable(\\n    StaleCallableCreditLine storage cl,\\n    uint256 trancheId,\\n    uint256 principal,\\n    uint256 feePercent\\n  ) internal view returns (uint256, uint256) {\\n    return\\n      cl._cl.previewProportionalInterestAndPrincipalAvailable({\\n        trancheId: trancheId,\\n        principal: principal,\\n        feePercent: feePercent\\n      });\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  function totalInterestAccrued(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.previewTotalInterestAccrued();\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  function totalInterestAccruedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalInterestAccruedAt(timestamp);\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  function interestAccrued(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.previewInterestAccrued();\\n  }\\n\\n  /// @notice If a checkpoint has not occurred, late fees may be overestimated beyond the next due time.\\n  function interestAccruedAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.interestAccruedAt(timestamp);\\n  }\\n\\n  function totalInterestPaid(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.totalInterestPaid();\\n  }\\n\\n  function totalPrincipalPaidAt(\\n    StaleCallableCreditLine storage cl,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalPaidAt(timestamp);\\n  }\\n\\n  function totalPrincipalPaid(StaleCallableCreditLine storage cl) internal view returns (uint256) {\\n    return cl._cl.totalPrincipalPaid();\\n  }\\n\\n  function withinPrincipalGracePeriod(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (bool) {\\n    return cl._cl.withinPrincipalGracePeriod();\\n  }\\n\\n  function uncalledCapitalTrancheIndex(\\n    StaleCallableCreditLine storage cl\\n  ) internal view returns (uint256) {\\n    return cl._cl.uncalledCapitalTrancheIndex();\\n  }\\n\\n  function getSettledTrancheInfo(\\n    StaleCallableCreditLine storage cl,\\n    uint256 trancheId\\n  ) internal view returns (SettledTrancheInfo memory) {\\n    return cl._cl.getSettledTrancheInfo(trancheId);\\n  }\\n}\\n\",\"keccak256\":\"0xd1e757178353b4938a4cdef31d086eb13fe07ddf8117b0922a7674e7787378fc\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/structs/Tranche.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {ICallableLoanErrors} from \\\"../../../../interfaces/ICallableLoanErrors.sol\\\";\\n\\nusing TrancheLogic for Tranche global;\\n\\n/**\\n * @notice Handles the accounting of borrower obligations for a single tranche.\\n *         Supports\\n *         - Deposit of funds\\n *         - Drawdown of funds\\n *         - Repayment of borrowed funds\\n *         - Withdrawal of paid funds\\n *         See \\\"./notes.md\\\" for notes on relationships between struct entities in Callable Loans.\\n */\\n\\nstruct Tranche {\\n  uint256 _principalDeposited;\\n  uint256 _principalPaid;\\n  uint256 _principalReserved;\\n  uint256 _interestPaid;\\n  // TODO: verify that this works for upgradeability\\n  uint[28] __padding;\\n}\\n\\nlibrary TrancheLogic {\\n  function settleReserves(Tranche storage t) internal {\\n    t._principalPaid += t._principalReserved;\\n    t._principalReserved = 0;\\n  }\\n\\n  function pay(Tranche storage t, uint256 principalAmount, uint256 interestAmount) internal {\\n    assert(t._principalPaid + t._principalReserved + principalAmount <= t.principalDeposited());\\n\\n    t._interestPaid += interestAmount;\\n    t._principalPaid += principalAmount;\\n  }\\n\\n  function reserve(Tranche storage t, uint256 principalAmount, uint256 interestAmount) internal {\\n    assert(t._principalPaid + t._principalReserved + principalAmount <= t.principalDeposited());\\n\\n    t._interestPaid += interestAmount;\\n    t._principalReserved += principalAmount;\\n  }\\n\\n  /**\\n   * Returns principal outstanding, omitting _principalReserved.\\n   */\\n  function principalOutstandingBeforeReserves(Tranche storage t) internal view returns (uint256) {\\n    return t._principalDeposited - t._principalPaid;\\n  }\\n\\n  /**\\n   * Returns principal outstanding, taking into account any _principalReserved.\\n   */\\n  function principalOutstandingAfterReserves(Tranche storage t) internal view returns (uint256) {\\n    return t._principalDeposited - t._principalPaid - t._principalReserved;\\n  }\\n\\n  /**\\n   * @notice Only valid for Uncalled Tranche\\n   * @notice Withdraw principal from tranche - effectively nullifying the deposit.\\n   * @dev reverts if interest has been paid to tranche\\n   */\\n  function withdraw(Tranche storage t, uint256 principal) internal {\\n    assert(t._interestPaid == 0);\\n    t._principalDeposited -= principal;\\n    t._principalPaid -= principal;\\n  }\\n\\n  /// @notice Only valid for Uncalled Tranche\\n  /// @notice remove `principalOutstanding` from the Tranche and its corresponding interest.\\n  ///         Take as much reserved principal as possible.\\n  ///         Only applicable to the uncalled tranche.\\n  function take(\\n    Tranche storage t,\\n    uint256 principalOutstandingToTake\\n  )\\n    internal\\n    returns (\\n      uint256 principalDepositedTaken,\\n      uint256 principalPaidTaken,\\n      uint256 principalReservedTaken,\\n      uint256 interestTaken\\n    )\\n  {\\n    uint tranchePrincipalOutstandingBeforeReserves = t.principalOutstandingBeforeReserves();\\n\\n    // Sanity check - expect `take` to always be called with valid inputs.\\n    assert(principalOutstandingToTake <= tranchePrincipalOutstandingBeforeReserves);\\n\\n    principalReservedTaken = Math.min(t._principalReserved, principalOutstandingToTake);\\n    principalDepositedTaken =\\n      (t._principalDeposited * principalOutstandingToTake) /\\n      tranchePrincipalOutstandingBeforeReserves;\\n    principalPaidTaken = principalDepositedTaken - principalOutstandingToTake;\\n    interestTaken = (t._interestPaid * principalDepositedTaken) / t._principalDeposited;\\n\\n    t._principalPaid -= principalPaidTaken;\\n    t._interestPaid -= interestTaken;\\n    t._principalDeposited -= principalDepositedTaken;\\n    t._principalReserved -= principalReservedTaken;\\n\\n    // Sanity check - accounting math should always bear this out.\\n    assert(t._principalDeposited >= t._principalPaid + t._principalReserved);\\n  }\\n\\n  /// @notice Only valid for Uncalled Tranche\\n  /// @notice depositing into the tranche for the first time(uncalled)\\n  function deposit(Tranche storage t, uint256 principal) internal {\\n    // SAFETY but gas cost\\n    assert(t._interestPaid == 0);\\n    t._principalDeposited += principal;\\n    // NOTE: this is so that principalOutstanding = 0 before drawdown\\n    t._principalPaid += principal;\\n  }\\n\\n  /// @notice Only valid for Callable Principal Tranches in the context of a call submission\\n  function addToBalances(\\n    Tranche storage t,\\n    uint256 addToPrincipalDeposited,\\n    uint256 addToPrincipalPaid,\\n    uint256 addToPrincipalReserved,\\n    uint256 addToInterestPaid\\n  ) internal {\\n    t._principalDeposited += addToPrincipalDeposited;\\n    t._principalPaid += addToPrincipalPaid;\\n    t._principalReserved += addToPrincipalReserved;\\n    t._interestPaid += addToInterestPaid;\\n  }\\n\\n  function principalDeposited(Tranche storage t) internal view returns (uint256) {\\n    return t._principalDeposited;\\n  }\\n\\n  /// @notice Returns the amount of principal paid to the tranche\\n  function principalPaid(Tranche storage t) internal view returns (uint256) {\\n    return t._principalPaid;\\n  }\\n\\n  /// @notice Returns the amount of principal paid to the tranche\\n  function principalReserved(Tranche storage t) internal view returns (uint256) {\\n    return t._principalReserved;\\n  }\\n\\n  /// @notice Returns the amount of principal paid + principal reserved\\n  function principalPaidAfterSettlement(Tranche storage t) internal view returns (uint256) {\\n    return t._principalPaid + t._principalReserved;\\n  }\\n\\n  function interestPaid(Tranche storage t) internal view returns (uint256) {\\n    return t._interestPaid;\\n  }\\n\\n  // returns principal, interest withdrawable\\n  function proportionalInterestAndPrincipalAvailableAfterReserves(\\n    Tranche storage t,\\n    uint256 principalAmount,\\n    uint256 feePercent\\n  ) internal view returns (uint256, uint256) {\\n    return (\\n      t.proportionalInterestWithdrawable(principalAmount, feePercent),\\n      t.proportionalPrincipalAvailableAfterReserves(principalAmount)\\n    );\\n  }\\n\\n  function proportionalInterestAndPrincipalAvailable(\\n    Tranche storage t,\\n    uint256 principalAmount,\\n    uint256 feePercent\\n  ) internal view returns (uint256, uint256) {\\n    return (\\n      t.proportionalInterestWithdrawable(principalAmount, feePercent),\\n      t.proportionalPrincipalWithdrawable(principalAmount)\\n    );\\n  }\\n\\n  function proportionalPrincipalAvailableAfterReserves(\\n    Tranche storage t,\\n    uint256 principalAmount\\n  ) internal view returns (uint256) {\\n    return ((t.principalPaid() + t._principalReserved) * principalAmount) / t.principalDeposited();\\n  }\\n\\n  function proportionalPrincipalWithdrawable(\\n    Tranche storage t,\\n    uint256 principalAmount\\n  ) internal view returns (uint256) {\\n    return (t.principalPaid() * principalAmount) / t.principalDeposited();\\n  }\\n\\n  function proportionalPrincipalOutstandingBeforeReserves(\\n    Tranche storage t,\\n    uint256 principalAmount\\n  ) internal view returns (uint256) {\\n    return (t.principalOutstandingBeforeReserves() * principalAmount) / t.principalDeposited();\\n  }\\n\\n  function proportionalInterestWithdrawable(\\n    Tranche storage t,\\n    uint256 principalAmount,\\n    uint256 feePercent\\n  ) internal view returns (uint256) {\\n    return\\n      (t.interestPaid() * principalAmount * (100 - feePercent)) / (t.principalDeposited() * 100);\\n  }\\n\\n  /// @notice Only valid for Uncalled Tranche\\n  /// Updates the tranche as the result of a drawdown\\n  function drawdown(Tranche storage t, uint256 principalAmount) internal {\\n    if (principalAmount > t._principalPaid) {\\n      revert ICallableLoanErrors.DrawdownAmountExceedsDeposits(principalAmount, t._principalPaid);\\n    }\\n    t._principalPaid -= principalAmount;\\n  }\\n}\\n\",\"keccak256\":\"0x81a449c37064c682034213260f60d5b407b0af6bee1c8c15cd408753d7760d4c\",\"license\":\"MIT\"},\"contracts/protocol/core/callable/structs/Waterfall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {MathUpgradeable as Math} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\n// import {console2 as console} from \\\"forge-std/console2.sol\\\";\\nimport {Tranche} from \\\"./Tranche.sol\\\";\\nimport {ICallableLoanErrors} from \\\"../../../../interfaces/ICallableLoanErrors.sol\\\";\\n\\nusing Math for uint256;\\nusing WaterfallLogic for Waterfall global;\\n\\n/**\\n * @notice Handles the accounting of borrower obligations across all tranches.\\n *         Supports\\n *         - Deposit of funds (into the uncalled tranche)\\n *         - Drawdown of funds  (from the uncalled tranche)\\n *         - Repayment of borrowed funds - across all tranches\\n *         - Withdrawal of paid funds (from the uncalled tranche)\\n *         - Summing accounting variables across all tranches\\n *         See \\\"./notes.md\\\" for notes on relationships between struct entities in Callable Loans.\\n */\\n\\nstruct Waterfall {\\n  Tranche[] _tranches;\\n  uint[31] __padding;\\n}\\n\\nlibrary WaterfallLogic {\\n  /*================================================================================\\n  Constants\\n  ================================================================================*/\\n  uint256 internal constant MINIMUM_WATERFALL_TRANCHES = 2;\\n\\n  function initialize(Waterfall storage w, uint256 nTranches) internal returns (Waterfall storage) {\\n    if (w._tranches.length != 0) {\\n      revert ICallableLoanErrors.CannotReinitialize();\\n    }\\n    if (nTranches < 2) {\\n      revert ICallableLoanErrors.HasInsufficientTranches(nTranches, MINIMUM_WATERFALL_TRANCHES);\\n    }\\n    for (uint256 i = 0; i < nTranches; i++) {\\n      Tranche memory t;\\n      w._tranches.push(t);\\n    }\\n    return w;\\n  }\\n\\n  /*================================================================================\\n  Main Write Functions\\n  ================================================================================*/\\n  /// @notice apply a payment to tranches in the waterfall.\\n  ///         The principal payment is applied to the tranches in order of priority\\n  ///         The interest payment is applied to the tranches pro rata\\n  /// @param principalAmount: the amount of principal to apply to the tranches\\n  /// @param interestAmount: the amount of interest to apply to the tranches\\n  /// @param reserveTranchesIndexStart: After this index (inclusive), tranches will reserve principal\\n  function pay(\\n    Waterfall storage w,\\n    uint256 principalAmount,\\n    uint256 interestAmount,\\n    uint256 reserveTranchesIndexStart\\n  ) internal {\\n    uint256 _totalPrincipalOutstandingBeforeReserves = w.totalPrincipalOutstandingBeforeReserves();\\n    if (_totalPrincipalOutstandingBeforeReserves == 0) {\\n      revert ICallableLoanErrors.NoBalanceToPay(principalAmount);\\n    }\\n\\n    // assume that tranches are ordered in priority. First is highest priority\\n    // NOTE: if we start i at the earliest unpaid tranche/quarter and end at the current quarter\\n    //        then we skip iterations that would result in a no-op\\n\\n    for (uint256 i = 0; i < w._tranches.length; i++) {\\n      Tranche storage tranche = w.getTranche(i);\\n      uint256 proRataInterestPayment = (interestAmount *\\n        tranche.principalOutstandingBeforeReserves()) / _totalPrincipalOutstandingBeforeReserves;\\n      uint256 principalPayment = Math.min(\\n        tranche.principalOutstandingAfterReserves(),\\n        principalAmount\\n      );\\n      // subtract so that future iterations can't re-allocate a principal payment\\n      principalAmount -= principalPayment;\\n      if (i < reserveTranchesIndexStart) {\\n        tranche.pay({principalAmount: principalPayment, interestAmount: proRataInterestPayment});\\n      } else {\\n        tranche.reserve({\\n          principalAmount: principalPayment,\\n          interestAmount: proRataInterestPayment\\n        });\\n      }\\n    }\\n\\n    // Sanity check - CallableLoanAccountant should have already accounted for any excess payment.\\n    assert(principalAmount == 0);\\n  }\\n\\n  function drawdown(Waterfall storage w, uint256 principalAmount) internal {\\n    Tranche storage tranche = w.getTranche(w.uncalledCapitalTrancheIndex());\\n    tranche.drawdown(principalAmount);\\n  }\\n\\n  /**\\n   * @notice Move principal and paid interest from one tranche to another\\n   */\\n  function move(\\n    Waterfall storage w,\\n    uint256 principalOutstanding,\\n    uint256 toCallRequestPeriodTrancheId\\n  )\\n    internal\\n    returns (\\n      uint256 principalDeposited,\\n      uint256 principalPaid,\\n      uint256 principalReserved,\\n      uint256 interestPaid\\n    )\\n  {\\n    (principalDeposited, principalPaid, principalReserved, interestPaid) = w\\n      .getTranche(w.uncalledCapitalTrancheIndex())\\n      .take(principalOutstanding);\\n\\n    w.getTranche(toCallRequestPeriodTrancheId).addToBalances(\\n      principalDeposited,\\n      principalPaid,\\n      principalReserved,\\n      interestPaid\\n    );\\n  }\\n\\n  /**\\n   * @notice Withdraw principal from the uncalled tranche.\\n            Assumes that the caller is allowed to withdraw.\\n   */\\n  function withdraw(Waterfall storage w, uint256 principalAmount) internal {\\n    return w.getTranche(w.uncalledCapitalTrancheIndex()).withdraw(principalAmount);\\n  }\\n\\n  /**\\n   * @notice Deposits principal into the uncalled tranche.\\n            Assumes that the caller is allowed to deposit.\\n   */\\n  function deposit(Waterfall storage w, uint256 principalAmount) internal {\\n    return w.getTranche(w.uncalledCapitalTrancheIndex()).deposit(principalAmount);\\n  }\\n\\n  /*================================================================================\\n  Main View Functions\\n  ================================================================================*/\\n  /// Settle all past due tranches as well as the last tranche.\\n  /// @param currentTrancheIndex - Index of the current tranche. All previous tranches are due.\\n  function settleReserves(Waterfall storage w, uint256 currentTrancheIndex) internal {\\n    uint256 uncalledCapitalTrancheIdx = w.uncalledCapitalTrancheIndex();\\n    Tranche storage uncalledCapitalTranche = w.getTranche(uncalledCapitalTrancheIdx);\\n    uncalledCapitalTranche.settleReserves();\\n    for (uint256 i = 0; i < currentTrancheIndex && i < uncalledCapitalTrancheIdx; i++) {\\n      w._tranches[i].settleReserves();\\n    }\\n  }\\n\\n  function getTranche(\\n    Waterfall storage w,\\n    uint256 trancheId\\n  ) internal view returns (Tranche storage) {\\n    return w._tranches[trancheId];\\n  }\\n\\n  function numTranches(Waterfall storage w) internal view returns (uint256) {\\n    return w._tranches.length;\\n  }\\n\\n  function uncalledCapitalTrancheIndex(Waterfall storage w) internal view returns (uint256) {\\n    return w.numTranches() - 1;\\n  }\\n\\n  /// @notice Returns the total amount of principal paid to all tranches\\n  function totalPrincipalDeposited(Waterfall storage w) internal view returns (uint256 sum) {\\n    for (uint256 i = 0; i < w.numTranches(); i++) {\\n      sum += w.getTranche(i).principalDeposited();\\n    }\\n  }\\n\\n  /// @notice Returns the total amount of interest paid to all tranches\\n  function totalInterestPaid(Waterfall storage w) internal view returns (uint256 sum) {\\n    for (uint256 i = 0; i < w.numTranches(); i++) {\\n      sum += w.getTranche(i).interestPaid();\\n    }\\n  }\\n\\n  /// @notice Returns the total amount of principal paid to all tranches\\n  function totalPrincipalPaidAfterSettlementUpToTranche(\\n    Waterfall storage w,\\n    uint256 trancheIndex\\n  ) internal view returns (uint256 sum) {\\n    for (uint256 i = 0; i < trancheIndex; i++) {\\n      sum += w.getTranche(i).principalPaidAfterSettlement();\\n    }\\n  }\\n\\n  /// @notice Returns the total amount of principal paid to all tranches\\n  function totalPrincipalPaid(\\n    Waterfall storage w\\n  ) internal view returns (uint256 totalPrincipalPaidSum) {\\n    for (uint256 i = 0; i < w.numTranches(); i++) {\\n      totalPrincipalPaidSum += w.getTranche(i).principalPaid();\\n    }\\n  }\\n\\n  function totalPrincipalOutstandingBeforeReserves(\\n    Waterfall storage w\\n  ) internal view returns (uint256 sum) {\\n    for (uint256 i = 0; i < w._tranches.length; i++) {\\n      sum += w.getTranche(i).principalOutstandingBeforeReserves();\\n    }\\n  }\\n\\n  function totalPrincipalOutstandingAfterReserves(\\n    Waterfall storage w\\n  ) internal view returns (uint256 sum) {\\n    for (uint256 i = 0; i < w._tranches.length; i++) {\\n      sum += w.getTranche(i).principalOutstandingAfterReserves();\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @param trancheIndex Exclusive upper bound (i.e. the tranche at this index is not included)\\n   */\\n  function totalPrincipalReservedUpToTranche(\\n    Waterfall storage w,\\n    uint256 trancheIndex\\n  ) internal view returns (uint256 sum) {\\n    for (uint256 i = 0; i < trancheIndex; i++) {\\n      sum += w.getTranche(i).principalReserved();\\n    }\\n  }\\n\\n  /**\\n   *\\n   * @param trancheIndex Exclusive upper bound (i.e. the tranche at this index is not included)\\n   */\\n  function totalPrincipalDepositedUpToTranche(\\n    Waterfall storage w,\\n    uint256 trancheIndex\\n  ) internal view returns (uint256 sum) {\\n    for (uint256 i = 0; i < trancheIndex; i++) {\\n      sum += w.getTranche(i).principalDeposited();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xb56dfe4e5cde9ca4db190bd62802d841199840b0fa14cea693f12a46297714c7\",\"license\":\"MIT\"},\"contracts/protocol/core/schedule/PaymentSchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\npragma experimental ABIEncoderV2;\\n\\nimport {ISchedule} from \\\"../../../interfaces/ISchedule.sol\\\";\\n// import {console2 as console} from \\\"forge-std/console2.sol\\\";\\n\\n/// @notice Convenience struct for passing startTime to all Schedule methods\\nstruct PaymentSchedule {\\n  ISchedule schedule;\\n  uint64 startTime;\\n}\\n\\nusing PaymentScheduleLogic for PaymentSchedule global;\\n\\nlibrary PaymentScheduleLogic {\\n  using PaymentScheduleLogic for PaymentSchedule;\\n\\n  function startAt(PaymentSchedule storage s, uint256 timestamp) internal {\\n    assert(s.startTime == 0);\\n    s.startTime = uint64(timestamp);\\n  }\\n\\n  function previousDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.previousDueTimeAt(s.startTime, timestamp);\\n  }\\n\\n  function previousInterestDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.previousInterestDueTimeAt(s.startTime, timestamp);\\n  }\\n\\n  function nextInterestDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.nextInterestDueTimeAt(s.startTime, timestamp);\\n  }\\n\\n  function nextPrincipalDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.nextPrincipalDueTimeAt(s.startTime, timestamp);\\n  }\\n\\n  function principalPeriodAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.principalPeriodAt(s.startTime, timestamp);\\n  }\\n\\n  function currentPrincipalPeriod(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.principalPeriodAt(block.timestamp);\\n  }\\n\\n  function currentPeriod(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.periodAt(block.timestamp);\\n  }\\n\\n  function periodEndTime(\\n    PaymentSchedule storage s,\\n    uint256 period\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.periodEndTime(s.startTime, period);\\n  }\\n\\n  function periodAt(\\n    PaymentSchedule storage s,\\n    uint timestamp\\n  ) internal view isActiveMod(s) returns (uint256) {\\n    return s.schedule.periodAt(s.startTime, timestamp);\\n  }\\n\\n  function totalPrincipalPeriods(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.schedule.totalPrincipalPeriods();\\n  }\\n\\n  function isActive(PaymentSchedule storage s) internal view returns (bool) {\\n    return s.startTime != 0;\\n  }\\n\\n  function termEndTime(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.isActive() ? s.schedule.termEndTime(s.startTime) : 0;\\n  }\\n\\n  function termStartTime(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.isActive() ? s.schedule.termStartTime(s.startTime) : 0;\\n  }\\n\\n  function periodsPerPrincipalPeriod(PaymentSchedule storage s) internal view returns (uint256) {\\n    return s.schedule.periodsPerPrincipalPeriod();\\n  }\\n\\n  function nextDueTimeAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view returns (uint256) {\\n    return s.isActive() ? s.schedule.nextDueTimeAt(s.startTime, timestamp) : 0;\\n  }\\n\\n  function withinPrincipalGracePeriodAt(\\n    PaymentSchedule storage s,\\n    uint256 timestamp\\n  ) internal view returns (bool) {\\n    return !s.isActive() || s.schedule.withinPrincipalGracePeriodAt(s.startTime, timestamp);\\n  }\\n\\n  modifier isActiveMod(PaymentSchedule storage s) {\\n    // @dev: NA: not active\\n    require(s.isActive(), \\\"NA\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x84d475b94cf8f59929c228a7d54120d8e28f085d8abed8bba78deab53232eb5c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Warbler Labs",
    "kind": "dev",
    "methods": {
      "availableToWithdraw(uint256)": {
        "params": {
          "tokenId": "position to query max amount withdrawable for"
        },
        "returns": {
          "_0": "total interest withdrawable on the position",
          "_1": "total principal redeemable on the position"
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "amount": "amount of capital to supply",
          "tranche": "Should always be uncalled capital tranche index."
        },
        "returns": {
          "_0": "tokenId NFT representing your position in this pool"
        }
      },
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "amount of capital to supply",
          "deadline": "deadline of permit operation",
          "r": "r portion of signature",
          "s": "s portion of signature",
          "tranche": "Should always be uncalled capital tranche index.",
          "v": "v portion of signature"
        },
        "returns": {
          "tokenId": "NFT representing your position in this pool"
        }
      },
      "drawdown(uint256)": {
        "params": {
          "amount": "USDC to drawdown. This amount is transferred to the caller"
        }
      },
      "getAmountsOwed(uint256)": {
        "params": {
          "timestamp": "time to calculate up to"
        },
        "returns": {
          "returnedInterestAccrued": "amount of accrued interest (not yet owed) that can be paid at `timestamp`",
          "returnedInterestOwed": "amount of obligated interest owed at `timestamp`",
          "returnedPrincipalOwed": "amount of principal owed at `timestamp`"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])": {
        "params": {
          "_borrower": "address of borrower, a non-transferrable role for performing privileged actions like   drawdown",
          "_config": "address of GoldfinchConfig",
          "_fundableAt": "earliest time at which the first slice can be funded",
          "_interestApr": "interest rate for the loan",
          "_lateFeeApr": "late fee interest rate for the loan, which kicks in `LatenessGracePeriodInDays` days after a   payment becomes late",
          "_numLockupPeriods": "the number of periods at the tail end of a principal period during which call requests   are not allowed"
        }
      },
      "pause()": {
        "details": "Pauses all functions guarded by Pause See {Pausable-_pause}. Requirements: - the caller must have the PAUSER_ROLE."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay(uint256)": {
        "details": "{this} must be approved by msg.sender to transfer {amount} of USDC",
        "params": {
          "amount": "USDC amount to pay"
        },
        "returns": {
          "_0": "PaymentAllocation info on how the payment was allocated"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "submitCall(uint256,uint256)": {
        "params": {
          "callAmount": "Amount of capital to call back",
          "poolTokenId": "Pool token id to be called back."
        },
        "returns": {
          "callRequestedTokenId": " Token id of the call requested token.",
          "remainingTokenId": "Token id of the remaining token."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "Unpauses the contract See {Pausable-_unpause}. Requirements: - the caller must have the Pauser role"
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "amount": "amount to withdraw (must be <= interest+principal available to withdraw)",
          "tokenId": "the NFT representing the position"
        },
        "returns": {
          "_0": "interest withdrawn",
          "_1": "principal withdrawn"
        }
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "params": {
          "amounts": "amounts to withdraw from positions such that amounts[i] is withdrawn from position tokenIds[i]",
          "tokenIds": "NFT positions to withdraw. Caller must be an owner or approved on all tokens in the array"
        }
      }
    },
    "title": "CallableLoan",
    "version": 1
  },
  "userdoc": {
    "events": {
      "PaymentApplied(address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted on payment"
      },
      "WithdrawalMade(address,uint256,uint256,uint256,uint256)": {
        "notice": "While owner is the label of the first argument, it is actually the sender of the transaction."
      }
    },
    "kind": "user",
    "methods": {
      "availableToWithdraw(uint256)": {
        "notice": "Query the max amount available to withdraw for tokenId's position"
      },
      "createdAt()": {
        "notice": "Time when the pool was initialized. Zero if uninitialized"
      },
      "creditLine()": {
        "notice": "Pool's credit line, responsible for managing the loan's accounting variables"
      },
      "deposit(uint256,uint256)": {
        "notice": "Supply capital to the loan."
      },
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Supply capital to the loan."
      },
      "drawdown(uint256)": {
        "notice": "Drawdown the loan. The credit line's balance should increase by the amount drawn down.   Junior capital must be locked before this function can be called. If senior capital isn't locked   then this function will lock it for you (convenience to avoid calling lockPool() separately).   This function should revert if the amount requested exceeds the the current slice's currentLimit   This function should revert if the caller is not the borrower."
      },
      "estimateOwedInterestAt(uint256)": {
        "notice": "Returns a naive estimate of the interest owed at the timestamp.         Omits any late fees, and assumes no future payments."
      },
      "estimateOwedInterestAt(uint256,uint256)": {
        "notice": "Returns a naive estimate of the interest owed at the timestamp.         Omits any late fees, and assumes no future payments."
      },
      "getAmountsOwed(uint256)": {
        "notice": "Compute interest and principal owed on the current balance at a future timestamp"
      },
      "getLoanType()": {
        "notice": "getLoanType was added to support the new callable loan type.         It is not supported in older versions of ILoan (e.g. legacy TranchedPools)"
      },
      "getVersion()": {
        "notice": "Returns the version triplet `[major, minor, patch]`"
      },
      "initialize(address,address,uint256,uint256,uint256,address,uint256,uint256,uint256[])": {
        "notice": "Initialize the pool. Can only be called once, and should be called in the same transaction as   contract creation to avoid initialization front-running"
      },
      "interestAccrued()": {
        "notice": "If a checkpoint has not occurred, late fees may be overestimated beyond the next due time."
      },
      "interestAccruedAsOf()": {
        "notice": "We keep this to conform to the ICreditLine interface, but it's redundant information   now that we have `checkpointedAsOf`"
      },
      "interestAccruedAt(uint256)": {
        "notice": "If a checkpoint has not occurred, late fees may be overestimated beyond the next due time."
      },
      "interestBearingBalance()": {
        "notice": "TODO: Low priority tests - currently only used for tests and frontend"
      },
      "interestOwedAt(uint256)": {
        "notice": "If a checkpoint has not occurred, late fees may be overestimated beyond the next due time."
      },
      "loanPhase()": {
        "notice": "Returns the current phase of the loan.         See documentation on LoanPhase enum."
      },
      "maxLimit()": {
        "notice": "Unsupported in callable loans."
      },
      "pauseDrawdowns()": {
        "notice": "Pauses all drawdowns (but not deposits/withdraws)"
      },
      "pay(uint256)": {
        "notice": "Pay down interest + principal. Excess payments are refunded to the caller"
      },
      "pay(uint256,uint256)": {
        "notice": "Unsupported in callable loans."
      },
      "principalOwedAt(uint256)": {
        "notice": "Principal owed up to `timestamp`"
      },
      "setAllowedUIDTypes(uint256[])": {
        "notice": "Set accepted UID types for the loan. Requires that users have not already begun to deposit."
      },
      "setFundableAt(uint256)": {
        "notice": "Update `fundableAt` to a new timestamp. Only the borrower can call this."
      },
      "setLimit(uint256)": {
        "notice": "Unsupported ICreditLine method kept for ICreditLine conformance"
      },
      "setMaxLimit(uint256)": {
        "notice": "Unsupported in callable loans."
      },
      "submitCall(uint256,uint256)": {
        "notice": "Submit a call request for the given amount of capital.         The borrower is obligated to pay the call request back at the end of the         corresponding call request period."
      },
      "termStartTime()": {
        "notice": "Time of first drawdown"
      },
      "totalInterestAccrued()": {
        "notice": "If a checkpoint has not occurred, late fees may be overestimated beyond the next due time."
      },
      "totalInterestAccruedAt(uint256)": {
        "notice": "If a checkpoint has not occurred, late fees may be overestimated beyond the next due time."
      },
      "totalInterestOwed()": {
        "notice": "If a checkpoint has not occurred, late fees may be overestimated beyond the next due time."
      },
      "totalInterestOwedAt(uint256)": {
        "notice": "If a checkpoint has not occurred, late fees may be overestimated beyond the next due time."
      },
      "totalInterestPaid()": {
        "notice": "Cumulative interest paid back up to now"
      },
      "totalPrincipalOwed()": {
        "notice": "Cumulative principal owed at current timestamp"
      },
      "totalPrincipalOwedAt(uint256)": {
        "notice": "Cumulative principal owed at timestamp"
      },
      "totalPrincipalPaid()": {
        "notice": "Returns the total amount of principal thats been paid"
      },
      "unpauseDrawdowns()": {
        "notice": "Unpause drawdowns"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw an already deposited amount if the funds are available. Caller must be the owner or   approved by the owner on tokenId. Amount withdrawn is sent to the caller."
      },
      "withdrawMax(uint256)": {
        "notice": "Similar to withdraw but withdraw the max interest and principal available for `tokenId`"
      },
      "withdrawMultiple(uint256[],uint256[])": {
        "notice": "Withdraw from multiple tokens"
      }
    },
    "notice": "A loan that allows the lenders to call back capital from the borrower.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 663,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 666,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3057,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3673,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 258,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)253_storage)"
      },
      {
        "astId": 543,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 724,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 815,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 830,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 873,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11777,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap1",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11781,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap2",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11785,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap3",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11789,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "__gap4",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12335,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "_staleCreditLine",
        "offset": 0,
        "slot": "451",
        "type": "t_struct(StaleCallableCreditLine)17305_storage"
      },
      {
        "astId": 12337,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "drawdownsPaused",
        "offset": 0,
        "slot": "514",
        "type": "t_bool"
      },
      {
        "astId": 12340,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "allowedUIDTypes",
        "offset": 0,
        "slot": "515",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 12343,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "config",
        "offset": 0,
        "slot": "516",
        "type": "t_contract(IGoldfinchConfig)8841"
      },
      {
        "astId": 12346,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "createdAt",
        "offset": 0,
        "slot": "517",
        "type": "t_uint256"
      },
      {
        "astId": 12349,
        "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
        "label": "borrower",
        "offset": 0,
        "slot": "518",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Tranche)18030_storage)dyn_storage": {
        "base": "t_struct(Tranche)18030_storage",
        "encoding": "dynamic_array",
        "label": "struct Tranche[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_array(t_uint256)28_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[28]",
        "numberOfBytes": "896"
      },
      "t_array(t_uint256)31_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[31]",
        "numberOfBytes": "992"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGoldfinchConfig)8841": {
        "encoding": "inplace",
        "label": "contract IGoldfinchConfig",
        "numberOfBytes": "20"
      },
      "t_contract(ISchedule)10541": {
        "encoding": "inplace",
        "label": "contract ISchedule",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)253_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)253_storage"
      },
      "t_struct(CallableCreditLine)15278_storage": {
        "encoding": "inplace",
        "label": "struct CallableCreditLine",
        "members": [
          {
            "astId": 15249,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_config",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IGoldfinchConfig)8841"
          },
          {
            "astId": 15251,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_fundableAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15253,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_limit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15255,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_interestApr",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15257,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_lateAdditionalApr",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15259,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_numLockupPeriods",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15261,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_checkpointedAsOf",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 15263,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_lastFullPaymentTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 15265,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_totalInterestOwedAtLastCheckpoint",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 15267,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_totalInterestAccruedAtLastCheckpoint",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 15270,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_waterfall",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(Waterfall)18633_storage"
          },
          {
            "astId": 15273,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_paymentSchedule",
            "offset": 0,
            "slot": "42",
            "type": "t_struct(PaymentSchedule)23329_storage"
          },
          {
            "astId": 15277,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "__padding",
            "offset": 0,
            "slot": "43",
            "type": "t_array(t_uint256)20_storage"
          }
        ],
        "numberOfBytes": "2016"
      },
      "t_struct(PaymentSchedule)23329_storage": {
        "encoding": "inplace",
        "label": "struct PaymentSchedule",
        "members": [
          {
            "astId": 23326,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "schedule",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ISchedule)10541"
          },
          {
            "astId": 23328,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "startTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)253_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 250,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 252,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StaleCallableCreditLine)17305_storage": {
        "encoding": "inplace",
        "label": "struct StaleCallableCreditLine",
        "members": [
          {
            "astId": 17304,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_cl",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(CallableCreditLine)15278_storage"
          }
        ],
        "numberOfBytes": "2016"
      },
      "t_struct(Tranche)18030_storage": {
        "encoding": "inplace",
        "label": "struct Tranche",
        "members": [
          {
            "astId": 18019,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_principalDeposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18021,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_principalPaid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18023,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_principalReserved",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18025,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_interestPaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18029,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "__padding",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)28_storage"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_struct(Waterfall)18633_storage": {
        "encoding": "inplace",
        "label": "struct Waterfall",
        "members": [
          {
            "astId": 18628,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "_tranches",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Tranche)18030_storage)dyn_storage"
          },
          {
            "astId": 18632,
            "contract": "contracts/protocol/core/callable/CallableLoan.sol:CallableLoan",
            "label": "__padding",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)31_storage"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
