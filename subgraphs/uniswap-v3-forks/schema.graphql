# Subgraph Schema: DEX AMM (Extended)
# Version: 3.0.3
# See https://github.com/messari/subgraphs/blob/master/docs/Schema.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

enum TokenType {
  MULTIPLE
  UNKNOWN
  ERC20
  ERC721
  ERC1155
  BEP20
  BEP721
  BEP1155
  # Will add more
}

type Token @entity {
  " Smart contract address of the token "
  id: Bytes!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt

  " amount of tokens in the protocol "
  _totalSupply: BigInt!

  " Total value locked in the protocol "
  _totalValueLockedUSD: BigDecimal!

  _largePriceChangeBuffer: Int!

  _largeTVLImpactBuffer: Int!
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT

  " For reward tokens awarded to borrowers "
  BORROW
}

type RewardToken @entity(immutable: true) {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: Bytes!

  " Reference to the actual token "
  token: Token!

  " The type of the reward token "
  type: RewardTokenType!
}

# Note that trading fee is the fee paid *by* the users, whereas LP fee and
# protocol fee are fees paid *to* the corresponding parties.
# Most of the time, trading fee = liquidity provider fee + protocol fee,
# but not always. Thus we explicitly specify all different fee types.
enum LiquidityPoolFeeType {
  " Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1. "
  FIXED_TRADING_FEE

  " Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code. "
  TIERED_TRADING_FEE

  " Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_TRADING_FEE

  " Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1. "
  FIXED_LP_FEE

  " Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_LP_FEE

  " Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1. "
  FIXED_PROTOCOL_FEE

  " Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_PROTOCOL_FEE

  " One-time fee charged by the protocol during deposit, in percentages of the deposit token "
  DEPOSIT_FEE

  " One-time fee charged by the protocol (e.g. Bancor v3) during withdrawal, in percentages of the withdrawal token "
  WITHDRAWAL_FEE
}

type LiquidityPoolFee @entity {
  " { Fee type }-{ Pool address } "
  id: Bytes!

  " Fee as a percentage of the trade (swap) amount. Does not always apply "
  feePercentage: BigDecimal

  " Type of fee this pool uses "
  feeType: LiquidityPoolFeeType!
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: Bytes!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of pools "
  totalPoolCount: Int!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type DexAmmProtocol implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: Bytes!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " The sum of all active and non-active liquidity in USD for this pool. "
  totalLiquidityUSD: BigDecimal!

  " All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. "
  activeLiquidityUSD: BigDecimal!

  " All protocol-side value locking in USD that remains uncollected and unused in the protocol. "
  uncollectedProtocolSideValueUSD: BigDecimal!

  " All supply-side value locking in USD that remains uncollected and unused in the protocol. "
  uncollectedSupplySideValueUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " All historical volume in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of cumulative liquidity providers "
  cumulativeUniqueLPs: Int!

  " Number of cumulative traders "
  cumulativeUniqueTraders: Int!

  " Total number of pools "
  totalPoolCount: Int!

  " Total number of open positions "
  openPositionCount: Int!

  " Total number of positions (open and closed) "
  cumulativePositionCount: Int!

  " Day ID of the most recent daily snapshot "
  lastSnapshotDayID: Int!

  " Timestamp of the last time this entity was updated "
  lastUpdateTimestamp: BigInt!

  " Block number of the last time this entity was updated "
  lastUpdateBlockNumber: BigInt!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Pools #####

  " All pools that belong to this protocol "
  pools: [LiquidityPool!]! @derivedFrom(field: "protocol")

  " This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis "
  _regenesis: Boolean!
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: DexAmmProtocol!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Total number of pools "
  totalPoolCount: Int!

  " Total number of deposits (add liquidity) in an day "
  dailyDepositCount: Int!

  " Total number of withdrawals (remove liquidity) in an day "
  dailyWithdrawCount: Int!

  " Total number of trades (swaps) in an day "
  dailySwapCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type UsageMetricsHourlySnapshot @entity {
  " { # of hours since Unix epoch time } "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hour: Int!

  " Protocol this snapshot is associated with "
  protocol: DexAmmProtocol!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " Total number of deposits (add liquidity) in an hour "
  hourlyDepositCount: Int!

  " Total number of withdrawals (remove liquidity) in an hour "
  hourlyWithdrawCount: Int!

  " Total number of trades (swaps) in an hour "
  hourlySwapCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type FinancialsDailySnapshot @entity(immutable: true) {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: DexAmmProtocol!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " The sum of all active and non-active liquidity in USD for this pool. "
  totalLiquidityUSD: BigDecimal!

  " All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. "
  activeLiquidityUSD: BigDecimal!

  " All protocol-side value locking in USD that remains uncollected and unused in the protocol. "
  uncollectedProtocolSideValueUSD: BigDecimal!

  " All supply-side value locking in USD that remains uncollected and unused in the protocol. "
  uncollectedSupplySideValueUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " All trade volume occurred in a given day, in USD "
  dailyVolumeUSD: BigDecimal!

  " All historical trade volume in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  dailySupplySideRevenueUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

###############################
##### Pool-Level Metadata #####
###############################

type LiquidityPool @entity {
  " Smart contract address of the pool "
  id: Bytes!

  " The protocol this pool belongs to "
  protocol: DexAmmProtocol!

  " Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) "
  name: String

  " Symbol of liquidity pool (e.g. 3CRV) "
  symbol: String

  " Token that is to represent ownership of liquidity "
  liquidityToken: Token

  " Type of token used to track liquidity "
  liquidityTokenType: TokenType

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer "
  inputTokens: [Token!]!

  " Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon "
  rewardTokens: [RewardToken!]

  " Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. ) "
  fees: [LiquidityPoolFee!]!

  " Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol. "
  isSingleSided: Boolean!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  ##### Quantitative Data #####

  " Current tick representing the price of token0/token1 "
  tick: BigInt

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " The sum of all active and non-active liquidity for this pool. "
  totalLiquidity: BigInt!

  " The sum of all active and non-active liquidity in USD for this pool. "
  totalLiquidityUSD: BigDecimal!

  " All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. "
  activeLiquidity: BigInt!

  " All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. "
  activeLiquidityUSD: BigDecimal!

  " All protocol-side value locked in token amounts that remains uncollected and unused in the pool. "
  uncollectedProtocolSideTokenAmounts: [BigInt!]!

  " All protocol-side value locking in USD that remains uncollected and unused in the pool. "
  uncollectedProtocolSideValuesUSD: [BigDecimal!]!

  " All supply-side value locked in token amounts that remains uncollected and unused in the pool. "
  uncollectedSupplySideTokenAmounts: [BigInt!]!

  " All supply-side value locked in USD that remains uncollected and unused in the pool. "
  uncollectedSupplySideValuesUSD: [BigDecimal!]!

  " All revenue generated by the liquidity pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumeTokenAmounts: [BigInt!]!

  " All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumesUSD: [BigDecimal!]!

  " All historical trade volume occurred in this pool, in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalancesUSD: [BigDecimal!]!

  " Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool "
  inputTokenWeights: [BigDecimal!]!

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Total number of deposits (add liquidity) "
  cumulativeDepositCount: Int!

  " Total number of withdrawals (remove liquidity) "
  cumulativeWithdrawCount: Int!

  " Total number of trades (swaps) "
  cumulativeSwapCount: Int!

  ##### Account/Position Data #####

  " All positions in this market "
  positions: [Position!]! @derivedFrom(field: "pool")

  " Number of positions in this market "
  positionCount: Int!

  " Number of open positions in this market "
  openPositionCount: Int!

  " Number of closed positions in this market "
  closedPositionCount: Int!

  " Day ID of the most recent daily snapshot "
  lastSnapshotDayID: Int!

  " Hour ID of the most recent hourly snapshot "
  lastSnapshotHourID: Int!

  " Timestamp of the last time this entity was updated "
  lastUpdateTimestamp: BigInt!

  " Block number of the last time this entity was updated "
  lastUpdateBlockNumber: BigInt!

  ##### Snapshots #####

  " Liquidity pool daily snapshots "
  dailySnapshots: [LiquidityPoolDailySnapshot!]! @derivedFrom(field: "pool")

  " Liquidity pool hourly snapshots "
  hourlySnapshots: [LiquidityPoolHourlySnapshot!]! @derivedFrom(field: "pool")

  ##### Events #####

  " All deposit (add liquidity) events occurred in this pool "
  deposits: [Deposit!]! @derivedFrom(field: "pool")

  " All withdraw (remove liquidity) events occurred in this pool "
  withdraws: [Withdraw!]! @derivedFrom(field: "pool")

  " All trade (swap) events occurred in this pool "
  swaps: [Swap!]! @derivedFrom(field: "pool")
}

#################################
##### Pool-Level Timeseries #####
#################################

type LiquidityPoolDailySnapshot @entity(immutable: true) {
  " { Smart contract address of the pool }-{ # of days since Unix epoch time } "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " The protocol this snapshot belongs to "
  protocol: DexAmmProtocol!

  " The pool this snapshot belongs to "
  pool: LiquidityPool!

  ##### Quantitative Data #####

  " Current tick representing the price of token0/token1 "
  tick: BigInt

  " Current TVL (Total Value Locked) of this pool "
  totalValueLockedUSD: BigDecimal!

  " The sum of all active and non-active liquidity for this pool. "
  totalLiquidity: BigInt!

  " The sum of all active and non-active liquidity in USD for this pool. "
  totalLiquidityUSD: BigDecimal!

  " All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. "
  activeLiquidity: BigInt!

  " All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. "
  activeLiquidityUSD: BigDecimal!

  " All protocol-side value locked in token amounts that remains uncollected and unused in the pool. "
  uncollectedProtocolSideTokenAmounts: [BigInt!]!

  " All protocol-side value locking in USD that remains uncollected and unused in the pool. "
  uncollectedProtocolSideValuesUSD: [BigDecimal!]!

  " All supply-side value locked in token amounts that remains uncollected and unused in the pool. "
  uncollectedSupplySideTokenAmounts: [BigInt!]!

  " All supply-side value locked in USD that remains uncollected and unused in the pool. "
  uncollectedSupplySideValuesUSD: [BigDecimal!]!

  " All revenue generated by the liquidity pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily revenue generated by the liquidity pool, accrued to the supply side. "
  dailySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the liquidity pool, accrued to the protocol. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Daily revenue generated by the liquidity pool. "
  dailyTotalRevenueUSD: BigDecimal!

  " All historical trade volume occurred in this pool, in USD "
  cumulativeVolumeUSD: BigDecimal!

  " All trade volume occurred in a given day, in USD "
  dailyTotalVolumeUSD: BigDecimal!

  " All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumeTokenAmounts: [BigInt!]!

  " All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. "
  dailyVolumeTokenAmounts: [BigInt!]!

  " All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumesUSD: [BigDecimal!]!

  " All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. "
  dailyVolumesUSD: [BigDecimal!]!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalancesUSD: [BigDecimal!]!

  " Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool "
  inputTokenWeights: [BigDecimal!]!

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Total number of deposits (add liquidity) "
  cumulativeDepositCount: Int!

  " Total number of deposits (add liquidity) in a day "
  dailyDepositCount: Int!

  " Total number of withdrawals (remove liquidity) "
  cumulativeWithdrawCount: Int!

  " Total number of withdrawals (remove liquidity) in a day "
  dailyWithdrawCount: Int!

  " Total number of trades (swaps) "
  cumulativeSwapCount: Int!

  " Total number of trades (swaps) in a day "
  dailySwapCount: Int!

  ##### Account/Position Data #####

  " Number of positions in this market "
  positionCount: Int!

  " Number of open positions in this market "
  openPositionCount: Int!

  " Number of closed positions in this market "
  closedPositionCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type LiquidityPoolHourlySnapshot @entity(immutable: true) {
  " { Smart contract address of the pool }-{ # of hours since Unix epoch time } "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hour: Int!

  " The protocol this snapshot belongs to "
  protocol: DexAmmProtocol!

  " The pool this snapshot belongs to "
  pool: LiquidityPool!

  ##### Quantitative Data #####

  " Current tick representing the price of token0/token1 "
  tick: BigInt

  " Current TVL (Total Value Locked) of this pool "
  totalValueLockedUSD: BigDecimal!

  " The sum of all active and non-active liquidity for this pool. "
  totalLiquidity: BigInt!

  " The sum of all active and non-active liquidity in USD for this pool. "
  totalLiquidityUSD: BigDecimal!

  " All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. "
  activeLiquidity: BigInt!

  " All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. "
  activeLiquidityUSD: BigDecimal!

  " All protocol-side value locked in token amounts that remains uncollected and unused in the pool. "
  uncollectedProtocolSideTokenAmounts: [BigInt!]!

  " All protocol-side value locking in USD that remains uncollected and unused in the pool. "
  uncollectedProtocolSideValuesUSD: [BigDecimal!]!

  " All supply-side value locked in token amounts that remains uncollected and unused in the pool. "
  uncollectedSupplySideTokenAmounts: [BigInt!]!

  " All supply-side value locked in USD that remains uncollected and unused in the pool. "
  uncollectedSupplySideValuesUSD: [BigDecimal!]!

  " All revenue generated by the liquidity pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the liquidity pool, accrued to the supply side. "
  hourlySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the liquidity pool, accrued to the protocol. "
  hourlyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Hourly revenue generated by the liquidity pool. "
  hourlyTotalRevenueUSD: BigDecimal!

  " All historical trade volume occurred in this pool, in USD "
  cumulativeVolumeUSD: BigDecimal!

  " All trade volume occurred in a given day, in USD "
  hourlyTotalVolumeUSD: BigDecimal!

  " All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumeTokenAmounts: [BigInt!]!

  " All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyVolumeTokenAmounts: [BigInt!]!

  " All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumesUSD: [BigDecimal!]!

  " All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyVolumesUSD: [BigDecimal!]!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalancesUSD: [BigDecimal!]!

  " Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool "
  inputTokenWeights: [BigDecimal!]!

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Total number of deposits (add liquidity) "
  cumulativeDepositCount: Int!

  " Total number of deposits (add liquidity) in an hour "
  hourlyDepositCount: Int!

  " Total number of withdrawals (remove liquidity) "
  cumulativeWithdrawCount: Int!

  " Total number of withdrawals (remove liquidity) in an hour "
  hourlyWithdrawCount: Int!

  " Total number of trades (swaps) "
  cumulativeSwapCount: Int!

  " Total number of trades (swaps) in an hour "
  hourlySwapCount: Int!

  ##### Account/Position Data #####

  " Number of positions in this market "
  positionCount: Int!

  " Number of open positions in this market "
  openPositionCount: Int!

  " Number of closed positions in this market "
  closedPositionCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

####################################
##### Pool Tick-Level Metadata #####
####################################

type Tick @entity {
  " { pool address }-{ tick index } "
  id: Bytes!

  " tick index "
  index: BigInt!

  " Liquidity pool this tick belongs to "
  pool: LiquidityPool!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " calculated price of token0 of tick within this pool - constant "
  prices: [BigDecimal!]!

  " total liquidity pool has as tick lower or upper "
  liquidityGross: BigInt!

  " total liquidity in USD pool has as tick lower or upper "
  liquidityGrossUSD: BigDecimal!

  " how much liquidity changes when tick crossed "
  liquidityNet: BigInt!

  " how much liquidity in USD changes when tick crossed "
  liquidityNetUSD: BigDecimal!

  " Day ID of the most recent daily snapshot "
  lastSnapshotDayID: Int!

  " Hour ID of the most recent hourly snapshot "
  lastSnapshotHourID: Int!

  " Timestamp of the last time this entity was updated "
  lastUpdateTimestamp: BigInt!

  " Block number of the last time this entity was updated "
  lastUpdateBlockNumber: BigInt!
}

#######################################
##### Pool Tick-Level Time Series #####
#######################################

type TickDailySnapshot @entity(immutable: true) {
  " { pool address }-{ tick index }-{ day ID } "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " tick index "
  tick: Tick!

  " liquidity pool this tick belongs to "
  pool: LiquidityPool!

  " total liquidity pool has as tick lower or upper "
  liquidityGross: BigInt!

  " total liquidity in USD pool has as tick lower or upper "
  liquidityGrossUSD: BigDecimal!

  " how much liquidity changes when tick crossed "
  liquidityNet: BigInt!

  " how much liquidity in USD changes when tick crossed "
  liquidityNetUSD: BigDecimal!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type TickHourlySnapshot @entity(immutable: true) {
  " { pool address }-{ tick index }-{ hour ID } "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hour: Int!

  " tick index "
  tick: Tick!

  " liquidity pool this tick belongs to "
  pool: LiquidityPool!

  " total liquidity pool has as tick lower or upper "
  liquidityGross: BigInt!

  " total liquidity in USD pool has as tick lower or upper "
  liquidityGrossUSD: BigDecimal!

  " how much liquidity changes when tick crossed "
  liquidityNet: BigInt!

  " how much liquidity in USD changes when tick crossed "
  liquidityNetUSD: BigDecimal!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

##############################
##### Account-Level Data #####
##############################

type Account @entity {
  " { Account address } "
  id: Bytes!

  " Number of positions this account has "
  positionCount: Int!

  " All positions that belong to this account "
  positions: [Position!]! @derivedFrom(field: "account")

  " Number of open positions this account has "
  openPositionCount: Int!

  " Number of closed positions this account has "
  closedPositionCount: Int!

  " Number of deposits this account made "
  depositCount: Int!

  " All deposit events of this account "
  deposits: [Deposit!]! @derivedFrom(field: "account")

  " Number of withdrawals this account made "
  withdrawCount: Int!

  " All withdraw events of this account "
  withdraws: [Withdraw!]! @derivedFrom(field: "account")

  " Number of times this account has traded/swapped"
  swapCount: Int!

  " All swap events of this account "
  swaps: [Swap!]! @derivedFrom(field: "account")
}

type Position @entity {
  " { Account address }-{ Market address }-{ Count } "
  id: Bytes!

  " Account that owns this position "
  account: Account!

  " The liquidity pool in which this position was opened "
  pool: LiquidityPool!

  " The hash of the transaction that opened this position "
  hashOpened: Bytes!

  " The hash of the transaction that closed this position "
  hashClosed: Bytes

  " Block number of when the position was opened "
  blockNumberOpened: BigInt!

  " Timestamp when the position was opened "
  timestampOpened: BigInt!

  " Block number of when the position was closed (0 if still open) "
  blockNumberClosed: BigInt

  " Timestamp when the position was closed (0 if still open) "
  timestampClosed: BigInt

  " lower tick of the position "
  tickLower: Tick

  " upper tick of the position "
  tickUpper: Tick

  " Token that is to represent ownership of liquidity "
  liquidityToken: Token

  " Type of token used to track liquidity "
  liquidityTokenType: TokenType

  " total position liquidity "
  liquidity: BigInt!

  " total position liquidity in USD "
  liquidityUSD: BigDecimal!

  " amount of tokens ever deposited to position "
  cumulativeDepositTokenAmounts: [BigInt!]!

  " amount of tokens in USD deposited to position "
  cumulativeDepositUSD: BigDecimal!

  " amount of tokens ever withdrawn from position (without fees) "
  cumulativeWithdrawTokenAmounts: [BigInt!]!

  " amount of tokens in USD withdrawn from position (without fees) "
  cumulativeWithdrawUSD: BigDecimal!

  " Total reward token accumulated under this position, in USD "
  cumulativeRewardUSD: [BigInt!]

  " Number of deposits related to this position "
  depositCount: Int!

  " All deposit events of this position "
  deposits: [Deposit!]! @derivedFrom(field: "position")

  " Number of withdrawals related to this position "
  withdrawCount: Int!

  " All withdraw events of this position "
  withdraws: [Withdraw!]! @derivedFrom(field: "position")

  " Position daily snapshots for open positions "
  snapshots: [PositionSnapshot!]! @derivedFrom(field: "position")
}

# Unlike other snapshots that are taken at a fixed time interval. Position
# snapshots should be taken after every event, including the opening and
# closing events. This will prevent an ever growing number of snapshots
# for positions that are not moving. As we are only recording the balance
# in token amounts instead of in USD, this will work well.
# Note that we only take snapshot for open positions
type PositionSnapshot @entity(immutable: true) {
  " { Position ID }-{ Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that triggered this snapshot "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Nonce of the transaction that triggered this snapshot "
  nonce: BigInt!

  " Position of this snapshot "
  position: Position!

  " Type of token used to track liquidity "
  liquidityTokenType: TokenType

  " total position liquidity "
  liquidity: BigInt

  " total position liquidity in USD "
  liquidityUSD: BigDecimal

  " amount of tokens ever deposited to position "
  cumulativeDepositTokenAmounts: [BigInt!]!

  " amount of tokens in USD deposited to position "
  cumulativeDepositUSD: BigDecimal!

  " amount of tokens ever withdrawn from position (without fees) "
  cumulativeWithdrawTokenAmounts: [BigInt!]!

  " amount of tokens in USD withdrawn from position (without fees) "
  cumulativeWithdrawUSD: BigDecimal!

  " Total reward token accumulated under this position, in native amounts "
  cumulativeRewardTokenAmounts: [BigInt!]

  " Total reward token accumulated under this position, in USD "
  cumulativeRewardUSD: [BigInt!]

  " Number of deposits related to this position "
  depositCount: Int!

  " Number of withdrawals related to this position "
  withdrawCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
##### Event-Level Data ###########
##################################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
type Deposit @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Gas limit of the transaction that emitted this event "
  gasLimit: BigInt

  " Gas used in this transaction. (Optional because not every chain will support this) "
  gasUsed: BigInt

  " Gas price of the transaction that emitted this event "
  gasPrice: BigInt

  " The protocol this transaction belongs to "
  protocol: DexAmmProtocol!

  " Account that emitted this event "
  account: Account!

  " The user position changed by this event "
  position: Position

  " The pool involving this event "
  pool: LiquidityPool!

  " lower tick of position "
  tickLower: BigInt

  " upper tick of position "
  tickUpper: BigInt

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Amount of liquidity minted "
  liquidity: BigInt!

  " Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool "
  inputTokens: [Token!]!

  " Amount of input tokens in the token's native unit "
  inputTokenAmounts: [BigInt!]!

  " USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool) "
  amountUSD: BigDecimal!
}

type Withdraw @entity(immutable: true) {
  " { Transaction hash }-{ Log index }"
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Gas limit of the transaction that emitted this event "
  gasLimit: BigInt

  " Gas used in this transaction. (Optional because not every chain will support this) "
  gasUsed: BigInt

  " Gas price of the transaction that emitted this event "
  gasPrice: BigInt

  " The protocol this transaction belongs to "
  protocol: DexAmmProtocol!

  " Account that emitted this event "
  account: Account!

  " The user position changed by this event "
  position: Position

  " lower tick of position "
  tickLower: BigInt

  " upper tick of position "
  tickUpper: BigInt

  " The pool involving this event "
  pool: LiquidityPool!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Amount of liquidity burned "
  liquidity: BigInt!

  " Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool "
  inputTokens: [Token!]!

  " Amount of input tokens in the token's native unit "
  inputTokenAmounts: [BigInt!]!

  " USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool) "
  amountUSD: BigDecimal!
}

type Swap @entity(immutable: true) {
  " { Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Gas limit of the transaction that emitted this event "
  gasLimit: BigInt

  " Gas used in this transaction. (Optional because not every chain will support this) "
  gasUsed: BigInt

  " Gas price of the transaction that emitted this event "
  gasPrice: BigInt

  " The protocol this transaction belongs to "
  protocol: DexAmmProtocol!

  " Account that emitted this event "
  account: Account!

  " The pool involving this event "
  pool: LiquidityPool!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " the tick after the swap "
  tick: BigInt

  " Token deposited into pool "
  tokenIn: Token!

  " Amount of token deposited into pool in native units "
  amountIn: BigInt!

  " Amount of token deposited into pool in USD "
  amountInUSD: BigDecimal!

  " Token withdrawn from pool "
  tokenOut: Token!

  " Amount of token withdrawn from pool in native units "
  amountOut: BigInt!

  " Amount of token withdrawn from pool in USD "
  amountOutUSD: BigDecimal!
}

# Helper entity for calculating daily/hourly active users
type ActiveAccount @entity(immutable: true) {
  " { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } "
  id: Bytes!
}

#Added Entities

type _LiquidityPoolAmount @entity {
  " Smart contract address of the pool "
  id: Bytes!

  " Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool "
  inputTokens: [Token!]!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigDecimal!]!

  tokenPrices: [BigDecimal!]!
}

"  Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users "
type _HelperStore @entity {
  id: Bytes!

  " Token Prices "
  valueDecimalList: [BigDecimal!]

  " price of ETH/TVL in USD "
  valueDecimal: BigDecimal

  " # of deposits, # of unique users "
  valueInt: Int
}

" This is used to keep tract of the derived price of tokens in ethereum and the whitelisted pools to which it belongs"
type _TokenWhitelist @entity {
  " Token Address "
  id: Bytes!
  " pools token is in that are white listed for USD pricing "
  whitelistPools: [LiquidityPool!]!
}

type _TokenWhitelistSymbol @entity(immutable: true) {
  " Whitelist Token Symbol "
  id: ID!

  " Whitelist Token Address"
  address: Bytes!
}
