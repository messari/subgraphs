# Subgraph Schema: Non-Standard
# Version: 1.0.0
# (Based on Subgraph Schema: Generic - Version: 2.1.1)
# See https://github.com/messari/subgraphs/blob/master/docs/SCHEMA.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BASE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  GNOSIS
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

enum TradeType {
  BUY
  SELL
}

type Token @entity @regularPolling {
  " Smart contract address of the token "
  id: Bytes!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT

  " For reward tokens awarded to borrowers "
  BORROW
}

type RewardToken @entity @regularPolling {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: Bytes!

  " Reference to the actual token "
  token: Token!

  " The type of the reward token "
  type: RewardTokenType!
}

#############################
##### Protocol Metadata #####
#############################

type Protocol @entity @regularPolling {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: Bytes!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Cumulative value of shares bought "
  cumulativeBuyVolumeUSD: BigDecimal!

  " Cumulative value of shares sold "
  cumulativeSellVolumeUSD: BigDecimal!

  " Volume bought plus volume sold "
  cumulativeTotalVolumeUSD: BigDecimal!

  " Volume bought minus volume sold "
  netVolumeUSD: BigDecimal!

  ##### Usage Data #####

  " Number of cumulative unique addresses that bought shares "
  cumulativeUniqueBuyers: Int!

  " Number of cumulative unique addresses that sold shares "
  cumulativeUniqueSellers: Int!

  " Number of cumulative unique addresses that interacted with the protocol "
  cumulativeUniqueUsers: Int!

  " Total number of buy trades "
  cumulativeBuyCount: Int!

  " Total number of sell trades "
  cumulativeSellCount: Int!

  " Total number of trades "
  cumulativeTransactionCount: Int!

  ##### Pools #####

  " Total number of Subjects "
  totalPoolCount: Int!

  " All pools that belong to this protocol "
  pools: [Pool!]! @derivedFrom(field: "protocol")

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  " Helper field for taking daily snapshots "
  _lastDailySnapshotTimestamp: BigInt!

  " Helper field for taking hourly snapshots "
  _lastHourlySnapshotTimestamp: BigInt!
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity(immutable: true) @dailySnapshot {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Number of unique daily active buyers "
  dailyActiveBuyers: Int!

  " Number of cumulative unique buyers "
  cumulativeUniqueBuyers: Int!

  " Number of unique daily active sellers "
  dailyActiveSellers: Int!

  " Number of cumulative unique sellers "
  cumulativeUniqueSellers: Int!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of daily buy trades "
  dailyBuyCount: Int!

  " Number of cumulative buy trades "
  cumulativeBuyCount: Int!

  " Number of daily sell trades "
  dailySellCount: Int!

  " Number of cumulative sell trades "
  cumulativeSellCount: Int!

  " Number of daily trades "
  dailyTransactionCount: Int!

  " Total number of trades "
  cumulativeTransactionCount: Int!

  " Total number of pools "
  totalPoolCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type UsageMetricsHourlySnapshot @entity(immutable: true) @hourlySnapshot {
  " ID is # of hours since Unix epoch time "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hour: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " Total number of transactions. Transactions include events triggered by outside users (ie, deposit, withdraw, etc.)"
  cumulativeTransactionCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type FinancialsDailySnapshot @entity(immutable: true) @dailySnapshot {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Daily revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  dailySupplySideRevenueUSD: BigDecimal!

  " Cumulative revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " Cumulative gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Daily value of shares bought "
  dailyBuyVolumeUSD: BigDecimal!

  " Cumulative value of shares bought "
  cumulativeBuyVolumeUSD: BigDecimal!

  " Daily value of shares sold "
  dailySellVolumeUSD: BigDecimal!

  " Cumulative value of shares sold "
  cumulativeSellVolumeUSD: BigDecimal!

  " Daily volume bought plus daily volume sold "
  dailyTotalVolumeUSD: BigDecimal!

  " Volume bought plus volume sold "
  cumulativeTotalVolumeUSD: BigDecimal!

  " Daily volume bought minus daily volume sold "
  dailyNetVolumeUSD: BigDecimal!

  " Volume bought minus volume sold "
  netVolumeUSD: BigDecimal!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

###########################
##### Pool-Level Data #####
###########################

type Pool @entity @regularPolling {
  " Address of the subject "
  id: Bytes!

  " The protocol this pool belongs to "
  protocol: Protocol!

  " Name of the pool  "
  name: String

  " Symbol of liquidity pool "
  symbol: String

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon "
  rewardTokens: [RewardToken!]

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the pool "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Amount & Value of input tokens in the pool. The ordering should be the same as the pool's inputTokens field. "
  inputTokenBalances: [BigInt!]!
  inputTokenBalancesUSD: [BigDecimal!]!

  " Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) "
  outputTokenSupply: BigInt

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Cumulative value bought of subject shares "
  cumulativeBuyVolumeAmount: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Cumulative value sold of subject shares "
  cumulativeSellVolumeAmount: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Volume bought plus volume sold of subject shares "
  cumulativeTotalVolumeAmount: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Volume bought minus volume sold of subject shares "
  netVolumeAmount: BigInt!
  netVolumeUSD: BigDecimal!

  ##### Usage Data #####

  " Number of cumulative unique addresses that bought or sold subject shares "
  cumulativeUniqueUsers: Int!

  " Total number of buy trades of subject shares "
  cumulativeBuyCount: Int!

  " Total number of sell trades of subject shares "
  cumulativeSellCount: Int!

  " Total number of trades of subject shares "
  cumulativeTransactionCount: Int!

  ##### Shares #####

  " Total supply of subject shares "
  supply: BigInt!

  " Last price of subject shares "
  sharePriceAmount: BigInt!
  sharePriceUSD: BigDecimal!

  ##### Connections #####

  " Traders that have bought subject shares "
  traders: [Account!]!

  " Info about the connection between a trader and a subject "
  connections: [Connection!]! @derivedFrom(field: "subject")

  ##### Snapshots #####

  " Pool daily snapshots "
  dailySnapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")

  " Pool hourly snapshots "
  hourlySnapshots: [PoolHourlySnapshot!]! @derivedFrom(field: "pool")

  " Helper field for taking daily snapshots "
  _lastDailySnapshotTimestamp: BigInt!

  " Helper field for taking hourly snapshots "
  _lastHourlySnapshotTimestamp: BigInt!
}

###############################
####### Pool Timeseries #######
###############################

type PoolDailySnapshot @entity(immutable: true) @dailySnapshot {
  " { Smart contract address of the pool }-{ ID is # of days since Unix epoch time } "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " The pool this snapshot belongs to "
  pool: Pool!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the pool "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily revenue generated by the pool, accrued to the supply side. "
  dailySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the pool, accrued to the protocol. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Daily revenue generated by the pool. "
  dailyTotalRevenueUSD: BigDecimal!

  " Amount & Value of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!
  inputTokenBalancesUSD: [BigDecimal!]!

  " Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) "
  outputTokenSupply: BigInt

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Daily value of shares bought "
  dailyBuyVolumeAmount: BigInt!
  dailyBuyVolumeUSD: BigDecimal!

  " Cumulative value of shares bought "
  cumulativeBuyVolumeAmount: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Daily value of shares sold "
  dailySellVolumeAmount: BigInt!
  dailySellVolumeUSD: BigDecimal!

  " Cumulative value of shares sold "
  cumulativeSellVolumeAmount: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Daily volume bought plus daily volume sold "
  dailyTotalVolumeAmount: BigInt!
  dailyTotalVolumeUSD: BigDecimal!

  " Volume bought plus volume sold "
  cumulativeTotalVolumeAmount: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Daily volume bought minus daily volume sold "
  dailyNetVolumeAmount: BigInt!
  dailyNetVolumeUSD: BigDecimal!

  " Volume bought minus volume sold "
  netVolumeAmount: BigInt!
  netVolumeUSD: BigDecimal!

  ##### Usage Data #####

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique active users "
  cumulativeUniqueUsers: Int!

  " Number of daily buy trades "
  dailyBuyCount: Int!

  " Number of cumulative buy trades "
  cumulativeBuyCount: Int!

  " Number of daily sell trades "
  dailySellCount: Int!

  " Number of cumulative sell trades "
  cumulativeSellCount: Int!

  " Number of daily trades "
  dailyTransactionCount: Int!

  " Total number of trades "
  cumulativeTransactionCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type PoolHourlySnapshot @entity(immutable: true) @hourlySnapshot {
  " { Smart contract address of the pool }-{ ID is # of hours since Unix epoch time } "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hour: Int!

  " The pool this snapshot belongs to "
  pool: Pool!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of this pool "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the pool, accrued to the supply side. "
  hourlySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the pool, accrued to the protocol. "
  hourlyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Hourly revenue generated by the pool. "
  hourlyTotalRevenueUSD: BigDecimal!

  " Amount & Value of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!
  inputTokenBalancesUSD: [BigDecimal!]!

  " Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) "
  outputTokenSupply: BigInt

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day (not hour). This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

##################################
##### Transaction-Level Data #####
##################################

interface Event {
  " event.transaction.hash.concatI32(event.logIndex) "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

type Trade implements Event @entity(immutable: true) @transaction {
  " event.transaction.hash.concatI32(event.logIndex) "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Trader address"
  trader: Account!

  " Subject address"
  subject: Pool!

  " trade type - BUY / SELL "
  type: TradeType!

  " Number of shares "
  shares: BigInt!

  " price of shares "
  sharePriceAmount: BigInt!
  sharePriceUSD: BigDecimal!

  " protocol fee "
  protocolFeeAmount: BigInt!
  protocolFeeUSD: BigDecimal!

  " subject fee "
  subjectFeeAmount: BigInt!
  subjectFeeUSD: BigDecimal!

  " total trade amount (sharePrice + protocolFee + subjectFee) "
  amount: BigInt!
  amountUSD: BigDecimal!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

###########################
##### User-Level Data #####
###########################

type Account @entity @regularPolling {
  " Address of the trader "
  id: Bytes!

  " Cumulative value of shares bought by the trader "
  cumulativeBuyVolumeUSD: BigDecimal!

  " Cumulative value of shares sold by the trader "
  cumulativeSellVolumeUSD: BigDecimal!

  " Volume bought plus volume sold by the trader "
  cumulativeTotalVolumeUSD: BigDecimal!

  " Volume bought minus volume sold by the trader "
  netVolumeUSD: BigDecimal!

  " Total number of buy trades by the trader "
  cumulativeBuyCount: Int!

  " Total number of sell trades by the trader "
  cumulativeSellCount: Int!

  " Total number of trades by the trader "
  cumulativeTransactionCount: Int!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " All buy events for this account. "
  buys: [Trade!]!

  " All sell events for this account. "
  sells: [Trade!]!

  " Subjects that have been bought by the trader "
  subjects: [Pool!]!

  " Info about the connection between a trader and a subject "
  connections: [Connection!]! @derivedFrom(field: "trader")
}

# Helper entity for calculating daily/hourly active users
type ActiveAccount @entity @regularPolling {
  " {daily/hourly}-{ Days since Unix epoch }-{ Address of the account } "
  id: Bytes!

  " All buy events for this account. "
  buys: [Trade!]!

  " All sell events for this account. "
  sells: [Trade!]!
}

#######################
##### Connections #####
#######################

type Connection @entity @regularPolling {
  " {Trader ID}-{Subject ID} "
  id: Bytes!

  " Trader and Subject between which this connection exists "
  trader: Account!
  subject: Pool!

  " Number of subject shares held by the trader "
  shares: BigInt!

  " Cumulative value of subject shares bought by the trader "
  cumulativeBuyVolumeUSD: BigDecimal!

  " Cumulative value of subject shares sold by the trader "
  cumulativeSellVolumeUSD: BigDecimal!

  " Volume bought plus volume sold of subject shares by the trader "
  cumulativeTotalVolumeUSD: BigDecimal!

  " Volume bought minus volume sold of subject shares by the trader "
  netVolumeUSD: BigDecimal!

  " Total number of buy trades of subject shares by the trader "
  cumulativeBuyCount: Int!

  " Total number of sell trades of subject shares by the trader "
  cumulativeSellCount: Int!

  " Total number of trades of subject shares by the trader "
  cumulativeTransactionCount: Int!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!
}
