# Subgraph Schema: Non-Standard
# Version: 1.0.0
# See https://github.com/messari/subgraphs/blob/master/docs/SCHEMA.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BASE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  GNOSIS
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  SOCIAL
  # Will add more
}

enum TradeType {
  BUY
  SELL
}

type Token @entity @regularPolling {
  " Smart contract address of the token "
  id: Bytes!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

#############################
##### Protocol Metadata #####
#############################

type Protocol @entity @regularPolling {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: Bytes!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedETH: BigInt!
  totalValueLockedUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueETH: BigInt!
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  "
  cumulativeProtocolSideRevenueETH: BigInt!
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueETH: BigInt!
  cumulativeTotalRevenueUSD: BigDecimal!

  " Cumulative value of shares bought "
  cumulativeBuyVolumeETH: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Cumulative value of shares sold "
  cumulativeSellVolumeETH: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Volume bought plus volume sold "
  cumulativeTotalVolumeETH: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Volume bought minus volume sold "
  netVolumeETH: BigInt!
  netVolumeUSD: BigDecimal!

  ##### Usage Data #####

  " Number of cumulative unique addresses that bought shares "
  cumulativeUniqueBuyers: Int!

  " Number of cumulative unique addresses that sold shares "
  cumulativeUniqueSellers: Int!

  " Number of cumulative unique addresses that bought or sold shares "
  cumulativeUniqueTraders: Int!

  " Number of cumulative unique addresses that registered and minted their shares on the protocol "
  cumulativeUniqueSubjects: Int!

  " Number of cumulative unique addresses that interacted with the protocol "
  cumulativeUniqueUsers: Int!

  " Total number of buy trades "
  cumulativeBuyCount: Int!

  " Total number of sell trades "
  cumulativeSellCount: Int!

  " Total number of trades "
  cumulativeTradesCount: Int!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  " Day ID of the most recent daily snapshot "
  lastSnapshotDayID: Int!

  " Timestamp of the last time this entity was updated "
  lastUpdateTimestamp: BigInt!
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity @dailySnapshot(immutable: true) {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Number of unique daily active buyers "
  dailyActiveBuyers: Int!

  " Number of cumulative unique buyers "
  cumulativeUniqueBuyers: Int!

  " Number of unique daily active sellers "
  dailyActiveSellers: Int!

  " Number of cumulative unique sellers "
  cumulativeUniqueSellers: Int!

  " Number of unique daily active traders "
  dailyActiveTraders: Int!

  " Number of cumulative unique traders "
  cumulativeUniqueTraders: Int!

  " Number of unique daily active subjects "
  dailyActiveSubjects: Int!

  " Number of cumulative unique subjects "
  cumulativeUniqueSubjects: Int!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of daily buy trades "
  dailyBuyCount: Int!

  " Number of cumulative buy trades "
  cumulativeBuyCount: Int!

  " Number of daily sell trades "
  dailySellCount: Int!

  " Number of cumulative sell trades "
  cumulativeSellCount: Int!

  " Number of daily trades "
  dailyTradesCount: Int!

  " Number of cumulative trades "
  cumulativeTradesCount: Int!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type FinancialsDailySnapshot @entity @dailySnapshot(immutable: true) {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedETH: BigInt!
  totalValueLockedUSD: BigDecimal!

  " Daily revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  dailySupplySideRevenueETH: BigInt!
  dailySupplySideRevenueUSD: BigDecimal!

  " Cumulative revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueETH: BigInt!
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  dailyProtocolSideRevenueETH: BigInt!
  dailyProtocolSideRevenueUSD: BigDecimal!

  " Cumulative gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueETH: BigInt!
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  dailyTotalRevenueETH: BigInt!
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueETH: BigInt!
  cumulativeTotalRevenueUSD: BigDecimal!

  " Daily value of shares bought "
  dailyBuyVolumeETH: BigInt!
  dailyBuyVolumeUSD: BigDecimal!

  " Cumulative value of shares bought "
  cumulativeBuyVolumeETH: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Daily value of shares sold "
  dailySellVolumeETH: BigInt!
  dailySellVolumeUSD: BigDecimal!

  " Cumulative value of shares sold "
  cumulativeSellVolumeETH: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Daily volume bought minus daily volume sold "
  dailyTotalVolumeETH: BigInt!
  dailyTotalVolumeUSD: BigDecimal!

  " Volume bought plus volume sold "
  cumulativeTotalVolumeETH: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Daily volume bought minus daily volume sold "
  dailyNetVolumeETH: BigInt!
  dailyNetVolumeUSD: BigDecimal!

  " Volume bought minus volume sold "
  netVolumeETH: BigInt!
  netVolumeUSD: BigDecimal!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

###########################
##### User-Level Data #####
###########################

type Trader @entity @regularPolling {
  " Address of the trader "
  id: Bytes!

  " Cumulative value of shares bought by the trader "
  cumulativeBuyVolumeETH: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Cumulative value of shares sold by the trader "
  cumulativeSellVolumeETH: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Volume bought plus volume sold by the trader "
  cumulativeTotalVolumeETH: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Volume bought minus volume sold by the trader "
  netVolumeETH: BigInt!
  netVolumeUSD: BigDecimal!

  " Total number of buy trades by the trader "
  cumulativeBuyCount: Int!

  " Total number of sell trades by the trader "
  cumulativeSellCount: Int!

  " Total number of trades by the trader "
  cumulativeTradesCount: Int!

  " Timestamp of when this trader first used the protocol "
  registeredAt: BigInt!

  " Info about the connection between a trader and a subject "
  connections: [Connection!]!
}

type Subject @entity @regularPolling {
  " Address of the subject "
  id: Bytes!

  " All revenue generated by the subject "
  cumulativeRevenueETH: BigInt!
  cumulativeRevenueUSD: BigDecimal!

  " Cumulative value bought of subject shares "
  cumulativeBuyVolumeETH: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Cumulative value sold of subject shares "
  cumulativeSellVolumeETH: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Volume bought plus volume sold of subject shares "
  cumulativeTotalVolumeETH: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Volume bought minus volume sold of subject shares "
  netVolumeETH: BigInt!
  netVolumeUSD: BigDecimal!

  " Total number of buy trades of subject shares "
  cumulativeBuyCount: Int!

  " Total number of sell trades of subject shares "
  cumulativeSellCount: Int!

  " Total number of trades of subject shares "
  cumulativeTradesCount: Int!

  " Total supply of subject shares "
  supply: BigInt!

  " Last price of subject shares "
  sharePriceETH: BigInt!
  sharePriceUSD: BigDecimal!

  " Timestamp of when this subject first used the protocol "
  registeredAt: BigInt!

  " Info about the connection between a trader and a subject "
  connections: [Connection!]!
}

type Connection @entity @regularPolling {
  " {Trader ID}-{Subject ID} "
  id: Bytes!

  " Trader and Subject between which this connection exists "
  trader: Trader!
  subject: Subject!

  " Number of subject shares held by the trader "
  shares: BigInt!

  " Cumulative value of subject shares bought by the trader "
  cumulativeBuyVolumeETH: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Cumulative value of subject shares sold by the trader "
  cumulativeSellVolumeETH: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Volume bought plus volume sold of subject shares by the trader "
  cumulativeTotalVolumeETH: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Volume bought minus volume sold of subject shares by the trader "
  netVolumeETH: BigInt!
  netVolumeUSD: BigDecimal!

  " Total number of buy trades of subject shares by the trader "
  cumulativeBuyCount: Int!

  " Total number of sell trades of subject shares by the trader "
  cumulativeSellCount: Int!

  " Total number of trades of subject shares by the trader "
  cumulativeTradesCount: Int!

  " Timestamp in which this connection is created or first time used "
  createdTimestamp: BigInt!

  " Block number in which this connection is created or first time used "
  createdBlockNumber: BigInt!
}

###############################
####### User Timeseries #######
###############################

type TraderDailySnapshot @entity @dailySnapshot(immutable: true) {
  " {ID is # of days since Unix epoch time}-{Trader ID} "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Trader this snapshot is associated with "
  trader: Trader!

  " Daily value of shares bought by the trader "
  dailyBuyVolumeETH: BigInt!
  dailyBuyVolumeUSD: BigDecimal!

  " Cumulative value of shares bought by the trader "
  cumulativeBuyVolumeETH: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Daily value of shares sold by the trader "
  dailySellVolumeETH: BigInt!
  dailySellVolumeUSD: BigDecimal!

  " Cumulative value of shares sold by the trader "
  cumulativeSellVolumeETH: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Daily volume bought plus daily volume sold by the trader "
  dailyTotalVolumeETH: BigInt!
  dailyTotalVolumeUSD: BigDecimal!

  " Volume bought plus volume sold by the trader "
  cumulativeTotalVolumeETH: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Daily volume bought minus daily volume sold by the trader "
  dailyNetVolumeETH: BigInt!
  dailyNetVolumeUSD: BigDecimal!

  " Volume bought minus volume sold by the trader "
  netVolumeETH: BigInt!
  netVolumeUSD: BigDecimal!

  " Number of daily buy trades by the trader "
  dailyBuyCount: Int!

  " Number of cumulative buy trades by the trader "
  cumulativeBuyCount: Int!

  " Number of daily sell trades by the trader "
  dailySellCount: Int!

  " Number of cumulative sell trades by the trader "
  cumulativeSellCount: Int!

  " Number of daily trades by the trader "
  dailyTradesCount: Int!

  " Number of cumulative trades by the trader "
  cumulativeTradesCount: Int!

  " Info about the connection between a trader and a subject "
  connections: [ConnectionDailySnapshot!]!

  " Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) "
  timestamp: BigInt!

  " Block number of when this snapshot was taken/last modified (May be taken after interval has passed) "
  blockNumber: BigInt!
}

type SubjectDailySnapshot @entity @dailySnapshot(immutable: true) {
  " {ID is # of days since Unix epoch time}-{Subject ID} "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Subject this snapshot is associated with "
  subject: Subject!

  " Daily revenue generated by the subject "
  dailyRevenueETH: BigInt!
  dailyRevenueUSD: BigDecimal!

  " All revenue generated by the subject "
  cumulativeRevenueETH: BigInt!
  cumulativeRevenueUSD: BigDecimal!

  " Daily value bought of subject shares "
  dailyBuyVolumeETH: BigInt!
  dailyBuyVolumeUSD: BigDecimal!

  " Cumulative value bought of subject shares "
  cumulativeBuyVolumeETH: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Daily value sold of subject shares "
  dailySellVolumeETH: BigInt!
  dailySellVolumeUSD: BigDecimal!

  " Cumulative value sold of subject shares "
  cumulativeSellVolumeETH: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Daily volume bought plus daily volume sold of subject shares "
  dailyTotalVolumeETH: BigInt!
  dailyTotalVolumeUSD: BigDecimal!

  " Volume bought plus volume sold of subject shares "
  cumulativeTotalVolumeETH: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Daily volume bought minus daily volume sold of subject shares "
  dailyNetVolumeETH: BigInt!
  dailyNetVolumeUSD: BigDecimal!

  " Volume bought minus volume sold of subject shares "
  netVolumeETH: BigInt!
  netVolumeUSD: BigDecimal!

  " Daily number of buy trades of subject shares "
  dailyBuyCount: Int!

  " Total number of buy trades of subject shares "
  cumulativeBuyCount: Int!

  " Daily number of sell trades of subject shares "
  dailySellCount: Int!

  " Total number of sell trades of subject shares "
  cumulativeSellCount: Int!

  " Daily number of trades of subject shares "
  dailyTradesCount: Int!

  " Total number of trades of subject shares "
  cumulativeTradesCount: Int!

  " Total supply of subject shares "
  supply: BigInt!

  " Last price of subject shares "
  sharePriceETH: BigInt!
  sharePriceUSD: BigDecimal!

  " Info about the connection between a trader and a subject "
  connections: [ConnectionDailySnapshot!]!

  " Timestamp of when this trader first used the protocol "
  timestamp: BigInt!

  " Info about the connection between a trader and a subject "
  blockNumber: BigInt!
}

type ConnectionDailySnapshot @entity @regularPolling(immutable: true) {
  " {Day ID}-{Trader ID}-{Subject ID} "
  id: Bytes!

  " Number of days since Unix epoch time "
  day: Int!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Trader and Subject between which this connection exists "
  trader: Trader!
  subject: Subject!

  " Number of subject shares held by the trader "
  shares: BigInt!

  " Daily value of subject shares bought by the trader "
  dailyBuyVolumeETH: BigInt!
  dailyBuyVolumeUSD: BigDecimal!

  " Cumulative value of subject shares bought by the trader "
  cumulativeBuyVolumeETH: BigInt!
  cumulativeBuyVolumeUSD: BigDecimal!

  " Daily value of subject shares sold by the trader "
  dailySellVolumeETH: BigInt!
  dailySellVolumeUSD: BigDecimal!

  " Cumulative value of subject shares sold by the trader "
  cumulativeSellVolumeETH: BigInt!
  cumulativeSellVolumeUSD: BigDecimal!

  " Daily volume bought plus daily volume sold of subject shares by the trader "
  dailyTotalVolumeETH: BigInt!
  dailyTotalVolumeUSD: BigDecimal!

  " Volume bought plus volume sold of subject shares by the trader "
  cumulativeTotalVolumeETH: BigInt!
  cumulativeTotalVolumeUSD: BigDecimal!

  " Daily volume bought minus daily volume sold of subject shares by the trader "
  dailyNetVolumeETH: BigInt!
  dailyNetVolumeUSD: BigDecimal!

  " Volume bought minus volume sold of subject shares by the trader "
  netVolumeETH: BigInt!
  netVolumeUSD: BigDecimal!

  " Daily number of buy trades of subject shares by the trader "
  dailyBuyCount: Int!

  " Total number of buy trades of subject shares by the trader "
  cumulativeBuyCount: Int!

  " Daily number of sell trades of subject shares by the trader "
  dailySellCount: Int!

  " Total number of sell trades of subject shares by the trader "
  cumulativeSellCount: Int!

  " Daily number of trades of subject shares by the trader "
  dailyTradesCount: Int!

  " Total number of trades of subject shares by the trader "
  cumulativeTradesCount: Int!

  " Timestamp in which this route is created or first time used "
  createdTimestamp: BigInt!

  " Block number in which this route is created or first time used "
  createdBlockNumber: BigInt!
}

##################################
##### Transaction-Level Data #####
##################################

interface Event {
  " event.transaction.hash.concatI32(event.logIndex) "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

type Trade implements Event @entity(immutable: true) @transaction {
  " event.transaction.hash.concatI32(event.logIndex) "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Trader address"
  trader: Trader!

  " Subject address"
  subject: Subject!

  " trade type - BUY / SELL "
  type: TradeType!

  " Number of shares "
  shares: BigInt!

  " price of shares "
  sharePriceETH: BigInt!
  sharePriceUSD: BigDecimal!

  " protocol fee "
  protocolFeeETH: BigInt!
  protocolFeeUSD: BigDecimal!

  " subject fee "
  subjectFeeETH: BigInt!
  subjectFeeUSD: BigDecimal!

  " total trade amount (sharePrice + protocolFee + subjectFee) "
  amountETH: BigInt!
  amountUSD: BigDecimal!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

##################################
############# Helpers ############
##################################

# Helps to accumulate total unique users
type _Account @entity @regularPolling {
  " Address of the Account "
  id: Bytes!
  isBuyer: Boolean!
  isSeller: Boolean!
  isSubject: Boolean!
}

# Helper entity for calculating daily active users
type _ActiveAccount @entity @regularPolling {
  " { Address of the Account }-{ Days since Unix epoch } "
  id: Bytes!
  isActiveBuyer: Boolean!
  isActiveSeller: Boolean!
  isActiveSubject: Boolean!
}
