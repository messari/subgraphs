# Subgraph Schema: ERC20 Tokens
# Version: 1.0.0

#############################
####### Token Metadata ######
#############################

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " If token transfers are paused, derived from paused event "
  isPaused: Boolean

  " Token Holders Balance "
  holdersBalance: [AccountBalance!]! @derivedFrom(field: "token")

  " Number of token holders "
  holderCount: BigInt!

  " Total number of token transfer transactions "
  transferCount: BigInt!

  " Total number of token mint transactions "
  mintCount: BigInt!

  " Total number of token burn transactions "
  burnCount: BigInt!

  " Total token supply "
  totalSupply: BigDecimal!

  " Total token burned "
  totalBurned: BigDecimal!

  " Total token minted "
  totalMinted: BigDecimal!

  " List of token transfers "
  transfers: [Transfer!]! @derivedFrom(field: "token")

  ##### Snapshots #####

  " Daily usage metrics for this Token "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "token")

  " Hourly usage metrics for this Token "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "token")

  dailyTokenSnapshot: [TokenDailySnapshot!]! @derivedFrom(field: "token")
}

###############################
####### Token Timeseries ######
###############################

type UsageMetricsDailySnapshot @entity {
  " { Token Address } - {# of days since Unix epoch time} "
  id: ID!

  " Token this snapshot is associated with "
  token: Token!

  " # of accounts holding this token "
  dailyHolderCount: Int!

  " # of unique daily active users "
  dailyActiveUsers: Int!

  " # of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Total number of mints in a day "
  dailyMintCount: Int!

  " Total number of token minted in a day "
  dailyMintAmount: BigInt!

  " Total number of burns in a day "
  dailyBurnCount: Int!

  " Total number of token burnt in a day "
  dailyBurnAmount: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type UsageMetricsHourlySnapshot @entity {
  " { Token Address } - {# of hours since Unix epoch time} "
  id: ID!

  " Token this snapshot is associated with "
  token: Token!

  " # of accounts holding this token "
  hourlyHolderCount: Int!

  " # of unique hourly active users "
  hourlyActiveUsers: Int!

  " # of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " Total number of mints in a hour "
  hourlyMintCount: Int!

  " Total amount of token minted in a hour "
  hourlyMintAmount: BigInt!

  " Total number of burns in a hour "
  hourlyBurnCount: Int!

  " Total number of token burnt in a hour "
  hourlyBurnAmount: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type TokenDailySnapshot @entity {
  " { Token Address } - {# of hours since Unix epoch time} "
  id: ID!

  " Token this snapshot is associated with "
  token: Token!

  " Daily total Supply of the token "
  dailyTotalSupply: BigInt!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
##### Transaction-Level Data #####
##################################

"""
An event is any user action that occurs in a token. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
interface Event {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this transaction belongs to "
  token: Token!

  nonce: Int!

  " Address that received the tokens "
  to: String!

  " Address that sent the tokens "
  from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

type Transfer implements Event @entity {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this transaction belongs to "
  token: Token!

  nonce: Int!

  " Account that received the tokens "
  to: Account!

  " Account that sent the tokens "
  from: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

##################################
######## Account MetaData ########
##################################

# An account is a unique Ethereum address
type Account @entity {
  " Address of the account "
  id: ID!

  " Token Transfers by this account "
  transferTo: [Transfer!]! @derivedFrom(field: "to")

  " Token Transfers from this account "
  transferFrom: [Transfer!]! @derivedFrom(field: "from")

  " Token balances that this account holds "
  balances: [AccountBalance!]! @derivedFrom(field: "account")

  " Token balances snapshot that this account holds "
  balancesSnapshot: [AccountBalanceDailySnapshot!]!
    @derivedFrom(field: "account")
}

type AccountBalance @entity {
  " { Address Of the Account } - {Address of the Token}"
  id: ID!

  " Account address "
  account: Account!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigDecimal!

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

###############################
###### Account Timeseries #####
###############################

type AccountBalanceDailySnapshot @entity {
  " { Address Of the Account } - {Address of the Token} - {# of hours since Unix epoch time} "
  id: ID!

  " Account address "
  account: Account!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigDecimal!

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}
