import * as MAINNET from "../config/mainnet";
import * as FANTOM from "../config/fantom";
import * as ARBITRUM_ONE from "../config/arbitrum_one";
import * as MATIC from "../config/matic";
import * as AURORA from "../config/aurora";
import * as AVALANCHE from "../config/avalanche";
import * as BSC from "../config/bsc";
import * as CELO from "../config/celo";
import * as CRONOS from "../config/cronos";
import * as FUSE from "../config/fuse";
import * as HARMONY from "../config/harmony";
import * as HECO from "../config/heco";
import * as METIS from "../config/metis";
import * as MOONBEAM from "../config/moonbeam";
import * as MOONRIVER from "../config/moonriver";
import * as OASIS from "../config/oasis";

import { Address, BigDecimal, BigInt, TypedMap } from "@graphprotocol/graph-ts";
import { UniswapPair__getReservesResult } from "../../../generated/Standard/UniswapPair";
import { SushiSwapPair__getReservesResult } from "../../../generated/Standard/SushiSwapPair";

///////////////////////////////////////////////////////////////////////////
/////////////////////////////////// COMMON ////////////////////////////////
///////////////////////////////////////////////////////////////////////////

export const BIGINT_ZERO = BigInt.fromI32(0);
export const BIGINT_ONE = BigInt.fromI32(1);
export const BIGINT_TEN = BigInt.fromI32(10);
export const BIGINT_HUNDRED = BigInt.fromI32(100);
export const BIGINT_TEN_THOUSAND = BigInt.fromI32(10000);

export const BIGDECIMAL_ZERO = new BigDecimal(BIGINT_ZERO);
export const BIGDECIMAL_HUNDRED = new BigDecimal(BIGINT_HUNDRED);

export const DEFAULT_USDC_DECIMALS = 6;
export const DEFAULT_DECIMALS = BigInt.fromI32(18);

export const ZERO_ADDRESS_STRING = "0x0000000000000000000000000000000000000000";

export const ZERO_ADDRESS = Address.fromString(
  "0x0000000000000000000000000000000000000000"
);
export const CHAIN_LINK_USD_ADDRESS = Address.fromString(
  "0x0000000000000000000000000000000000000348"
);

export const WHITELIST_TOKENS_LIST: string[] = [
  "WETH",
  "USDT",
  "DAI",
  "USDC",
  "ETH",
  "WBTC",
  "EURS",
  "LINK",
  "gfUSDT",
  "WFTM",
  "fBTC",
  "FRAX",
  "CRV",
];

export const PROTOCOL_ID: string = "BeefyFinance";

///////////////////////////////////////////////////////////////////////////
///////////////////////////// CURVE CONTRACT //////////////////////////////
///////////////////////////////////////////////////////////////////////////

export const CURVE_CALCULATIONS_ADDRESS_MAP = new TypedMap<string, Address>();
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.CURVE_CALCULATIONS_ADDRESS
);

export const CURVE_REGISTRY_ADDRESS_MAP = new TypedMap<string, Address>();
CURVE_REGISTRY_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(BSC.NETWORK_STRING, BSC.CURVE_REGISTRY_ADDRESS);
CURVE_REGISTRY_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.CURVE_REGISTRY_ADDRESS
);

export const CURVE_POOL_REGISTRY_ADDRESS_MAP = new TypedMap<string, Address>();
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.CURVE_POOL_REGISTRY_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////// SUSHISWAP CONTRACT //////////////////////////
///////////////////////////////////////////////////////////////////////////

export const SUSHISWAP_DEFAULT_RESERVE_CALL =
  new SushiSwapPair__getReservesResult(BIGINT_ZERO, BIGINT_ZERO, BIGINT_ZERO);

export const SUSHISWAP_CALCULATIONS_ADDRESS_MAP = new TypedMap<
  string,
  Address
>();
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.SUSHISWAP_CALCULATIONS_ADDRESS
);

export const SUSHISWAP_WETH_ADDRESS = new TypedMap<string, Address>();
SUSHISWAP_WETH_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(MATIC.NETWORK_STRING, MATIC.SUSHISWAP_WETH_ADDRESS);
SUSHISWAP_WETH_ADDRESS.set(
  AURORA.NETWORK_STRING,
  AURORA.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(BSC.NETWORK_STRING, BSC.SUSHISWAP_WETH_ADDRESS);
SUSHISWAP_WETH_ADDRESS.set(CELO.NETWORK_STRING, CELO.SUSHISWAP_WETH_ADDRESS);
SUSHISWAP_WETH_ADDRESS.set(
  CRONOS.NETWORK_STRING,
  CRONOS.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(FUSE.NETWORK_STRING, FUSE.SUSHISWAP_WETH_ADDRESS);
SUSHISWAP_WETH_ADDRESS.set(
  HARMONY.NETWORK_STRING,
  HARMONY.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(HECO.NETWORK_STRING, HECO.SUSHISWAP_WETH_ADDRESS);
SUSHISWAP_WETH_ADDRESS.set(METIS.NETWORK_STRING, METIS.SUSHISWAP_WETH_ADDRESS);
SUSHISWAP_WETH_ADDRESS.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(OASIS.NETWORK_STRING, OASIS.SUSHISWAP_WETH_ADDRESS);

export const SUSHISWAP_ROUTER_ADDRESS_MAP = new TypedMap<
  string,
  TypedMap<string, Address>
>();
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.SUSHISWAP_ROUTER_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////// UNISWAP CONTRACT ////////////////////////////
///////////////////////////////////////////////////////////////////////////

export const UNISWAP_DEFAULT_RESERVE_CALL = new UniswapPair__getReservesResult(
  BIGINT_ZERO,
  BIGINT_ZERO,
  BIGINT_ZERO
);

export const UNISWAP_ROUTER_CONTRACT_ADDRESSES = new TypedMap<
  string,
  TypedMap<string, Address>
>();
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  MAINNET.NETWORK_STRING,
  MAINNET.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SPOOKY_SWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  MATIC.NETWORK_STRING,
  MATIC.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  AURORA.NETWORK_STRING,
  AURORA.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  BSC.NETWORK_STRING,
  BSC.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  CELO.NETWORK_STRING,
  CELO.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  CRONOS.NETWORK_STRING,
  CRONOS.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  FUSE.NETWORK_STRING,
  FUSE.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  HARMONY.NETWORK_STRING,
  HARMONY.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  HECO.NETWORK_STRING,
  HECO.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  METIS.NETWORK_STRING,
  METIS.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  OASIS.NETWORK_STRING,
  OASIS.UNISWAP_ROUTER_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////// YEARNLENS CONTRACT //////////////////////////
///////////////////////////////////////////////////////////////////////////

export const YEARN_LENS_CONTRACT_ADDRESS = new Map<string, Address>();
YEARN_LENS_CONTRACT_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  MATIC.NETWORK_STRING,
  MATIC.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  AURORA.NETWORK_STRING,
  AURORA.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  BSC.NETWORK_STRING,
  BSC.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  CELO.NETWORK_STRING,
  CELO.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  CRONOS.NETWORK_STRING,
  CRONOS.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  FUSE.NETWORK_STRING,
  FUSE.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  HARMONY.NETWORK_STRING,
  HARMONY.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  HECO.NETWORK_STRING,
  HECO.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  METIS.NETWORK_STRING,
  METIS.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  OASIS.NETWORK_STRING,
  OASIS.YEARN_LENS_CONTRACT_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////// CHAINLINK CONTRACT //////////////////////////
///////////////////////////////////////////////////////////////////////////

export const CHAIN_LINK_CONTRACT_ADDRESS = new Map<string, Address>();
CHAIN_LINK_CONTRACT_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  MATIC.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  AURORA.NETWORK_STRING,
  AURORA.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  BSC.NETWORK_STRING,
  BSC.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  CELO.NETWORK_STRING,
  CELO.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  CRONOS.NETWORK_STRING,
  CRONOS.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  FUSE.NETWORK_STRING,
  FUSE.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  HARMONY.NETWORK_STRING,
  HARMONY.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  HECO.NETWORK_STRING,
  HECO.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  METIS.NETWORK_STRING,
  METIS.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  OASIS.NETWORK_STRING,
  OASIS.CHAIN_LINK_CONTRACT_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////////// HELPERS /////////////////////////////////
///////////////////////////////////////////////////////////////////////////

export const WHITELIST_TOKENS_MAP = new TypedMap<
  string,
  TypedMap<string, Address>
>();
WHITELIST_TOKENS_MAP.set(MAINNET.NETWORK_STRING, MAINNET.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(FANTOM.NETWORK_STRING, FANTOM.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.WHITELIST_TOKENS
);
WHITELIST_TOKENS_MAP.set(MATIC.NETWORK_STRING, MATIC.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(AURORA.NETWORK_STRING, AURORA.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(AVALANCHE.NETWORK_STRING, AVALANCHE.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(BSC.NETWORK_STRING, BSC.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(CELO.NETWORK_STRING, CELO.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(CRONOS.NETWORK_STRING, CRONOS.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(FUSE.NETWORK_STRING, FUSE.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(HARMONY.NETWORK_STRING, HARMONY.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(HECO.NETWORK_STRING, HECO.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(METIS.NETWORK_STRING, METIS.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(MOONBEAM.NETWORK_STRING, MOONBEAM.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(MOONRIVER.NETWORK_STRING, MOONRIVER.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(OASIS.NETWORK_STRING, OASIS.WHITELIST_TOKENS);

export const NETWORK_SUFFIX_MAP = new Map<string, string>();
NETWORK_SUFFIX_MAP.set(MAINNET.NETWORK_STRING, MAINNET.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(FANTOM.NETWORK_STRING, FANTOM.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.NETWORK_SUFFIX
);
NETWORK_SUFFIX_MAP.set(MATIC.NETWORK_STRING, MATIC.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(AURORA.NETWORK_STRING, AURORA.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(AVALANCHE.NETWORK_STRING, AVALANCHE.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(BSC.NETWORK_STRING, BSC.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(CELO.NETWORK_STRING, CELO.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(CRONOS.NETWORK_STRING, CRONOS.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(FUSE.NETWORK_STRING, FUSE.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(HARMONY.NETWORK_STRING, HARMONY.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(HECO.NETWORK_STRING, HECO.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(METIS.NETWORK_STRING, METIS.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(MOONBEAM.NETWORK_STRING, MOONBEAM.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(MOONRIVER.NETWORK_STRING, MOONRIVER.NETWORK_SUFFIX);
NETWORK_SUFFIX_MAP.set(OASIS.NETWORK_STRING, OASIS.NETWORK_SUFFIX);
