# Subgraph Schema: Derivatives Perpetual Futures
# Version: 1.3.1
# See https://github.com/messari/subgraphs/blob/master/docs/SCHEMA.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  OPTION
  PERPETUAL
  GENERIC
  # Will add more
}

type Token @entity @regularPolling {
  " Smart contract address of the token "
  id: Bytes!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT

  " For reward tokens awarded to borrowers "
  BORROW

  " For reward tokens awarded to stakers of native token (e.g. GMX stakers) "
  STAKE
}

type RewardToken @entity(immutable: true) @regularPolling {
  " Bytes.fromI32(0|1).concat(rewardTokenAddress), where 0 is for deposit and 1 is for borrow "
  id: Bytes!

  " Reference to the actual token "
  token: Token!

  " The type of the reward token "
  type: RewardTokenType!
}

# Note that trading fee is the premium paid *by* the users, whereas LP fee, stake fee and
# protocol fee are fees paid *to* the corresponding parties.
# Most of the time, trading fee = liquidity provider fee + protocol fee+stake fee,
# but not always. Thus we explicitly specify all different fee types.
enum LiquidityPoolFeeType {
  " Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1. "
  FIXED_TRADING_FEE

  " Some protocols use tiered fees instead of fixed fee (e.g. DYDX). Set `feePercentage` as 0 but handle the tiered fees in the mapping code. "
  TIERED_TRADING_FEE

  " Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_TRADING_FEE

  " Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 10% of fees to GMX LP providers (GLP holders). "
  FIXED_LP_FEE

  " Some protocols use dynamic LP fees . Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_LP_FEE

  " Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 10% of GMX fees to protocol. "
  FIXED_PROTOCOL_FEE

  " Some protocols use dynamic protocol fees. Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_PROTOCOL_FEE

  " Fixed fee that's paid to the stakers, as a percentage of the traded amount. e.g. 15% of all fees on GMX to stakers. "
  FIXED_STAKE_FEE

  " Some protocols use dynamic stakers fees. Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_STAKE_FEE

  " One-time fee charged by the protocol during deposit, in percentages of the deposit token (e.g. dynamic fee collected for LP providers in GMX)"
  DEPOSIT_FEE

  " One-time fee charged by the protocol (e.g. GMX charges a fee from certain pools with withdrawing) during withdrawal, in percentages of the withdrawal token "
  WITHDRAWAL_FEE
}

type LiquidityPoolFee @entity @regularPolling {
  " { Fee type }-{ Pool address } "
  id: Bytes!

  " Fee as a percentage of the trade (swap) amount. Does not always apply "
  feePercentage: BigDecimal

  " Type of fee this pool uses "
  feeType: LiquidityPoolFeeType!
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: Bytes!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 70% of fees on GMX). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: 15% on GMX goes to protocol . OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Gross revenue for the stakers (this is defined as recieving a share of revenue or tokens equal to share e.g. buying eth with DAI revenue). Examples: GMX 30% of trade fees goes to stakers of native token (e.g. GMX stakers) "
  cumulativeStakeSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " All premium paid to enter a  position. "
  cumulativeEntryPremiumUSD: BigDecimal!

  " All premium paid to exit a position. "
  cumulativeExitPremiumUSD: BigDecimal!

  " All premium paid. "
  cumulativeTotalPremiumUSD: BigDecimal!

  " All premium paid to deposit in liquidity pools. "
  cumulativeDepositPremiumUSD: BigDecimal!

  " All premium paid to withdraw from liquidity pools. "
  cumulativeWithdrawPremiumUSD: BigDecimal!

  " All premium paid to enter and exit liquidity pool. "
  cumulativeTotalLiquidityPremiumUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of cumulative borrowers "
  cumulativeUniqueBorrowers: Int!

  " Number of cumulative liquidators (accounts that performed liquidation) "
  cumulativeUniqueLiquidators: Int!

  " Number of cumulative liquidatees (accounts that got liquidated) "
  cumulativeUniqueLiquidatees: Int!

  " Notional value of all open long positions "
  longOpenInterestUSD: BigDecimal!

  " Notional value of all open short positions "
  shortOpenInterestUSD: BigDecimal!

  " Notional value of all open positions "
  totalOpenInterestUSD: BigDecimal!

  " Total number of long positions (not cumulative) "
  longPositionCount: Int!

  " Total number of short positions (not cumulative) "
  shortPositionCount: Int!

  " Total number of open positions (not cumulative) "
  openPositionCount: Int!

  " Total number of closed positions "
  closedPositionCount: Int!

  " Total number of positions (open and closed) "
  cumulativePositionCount: Int!

  " Total number of transactions "
  transactionCount: Int!

  " Total number of deposits "
  depositCount: Int!

  " Total number of withdrawals "
  withdrawCount: Int!

  " Total number of borrows "
  borrowCount: Int!

  " Total number of pools "
  totalPoolCount: Int!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type DerivPerpProtocol implements Protocol @entity @regularPolling {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: Bytes!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " All historical Notional volume in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Inflow historical trade notional volume occurred in this protocol, in USD, based on value of underlying assets coming into protocol from trade, at the time of position opened. "
  cumulativeInflowVolumeUSD: BigDecimal!

  " Inflow historical trade notional volume occurred in this protocol, in USD, based on value of underlying assets coming into protocol from trade, at the time of position closed. "
  cumulativeClosedInflowVolumeUSD: BigDecimal!

  " Outflow historical trade notional volume occurred in this protocol, in USD, based on value of underlying assets coming out of protocol from trade. "
  cumulativeOutflowVolumeUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Gross revenue for the stakers (this is defined as receiving a share of revenue or tokens equal to share e.g. buying eth with DAI revenue). Examples: GMX 15% of trade fees goes to stakers "
  cumulativeStakeSideRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " All premium paid to enter a  position. "
  cumulativeEntryPremiumUSD: BigDecimal!

  " All premium paid to exit a position. "
  cumulativeExitPremiumUSD: BigDecimal!

  " All premium paid. "
  cumulativeTotalPremiumUSD: BigDecimal!

  " All premium paid to deposit in the protocol. "
  cumulativeDepositPremiumUSD: BigDecimal!

  " All premium paid to withdraw from the protocol. "
  cumulativeWithdrawPremiumUSD: BigDecimal!

  " All premium paid to enter and exit the protocol. "
  cumulativeTotalLiquidityPremiumUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Number of cumulative depositors "
  cumulativeUniqueDepositors: Int!

  " Number of cumulative borrowers "
  cumulativeUniqueBorrowers: Int!

  " Number of cumulative liquidators (accounts that performed liquidation) "
  cumulativeUniqueLiquidators: Int!

  " Number of cumulative liquidatees (accounts that got liquidated) "
  cumulativeUniqueLiquidatees: Int!

  " Notional value of all open long positions "
  longOpenInterestUSD: BigDecimal!

  " Notional value of all open short positions "
  shortOpenInterestUSD: BigDecimal!

  " Notional value of all open positions "
  totalOpenInterestUSD: BigDecimal!

  " Total number of long positions (not cumulative) "
  longPositionCount: Int!

  " Total number of short positions (not cumulative) "
  shortPositionCount: Int!

  " Total number of open positions (not cumulative) "
  openPositionCount: Int!

  " Total number of closed positions "
  closedPositionCount: Int!

  " Total number of positions (open and closed) "
  cumulativePositionCount: Int!

  " Total number of transactions "
  transactionCount: Int!

  " Total number of deposits "
  depositCount: Int!

  " Total number of withdrawals "
  withdrawCount: Int!

  " Total number of borrows "
  borrowCount: Int!

  " Total number of swaps "
  swapCount: Int!

  " Total number of collateral In from traders "
  collateralInCount: Int!

  " Total number of collateral Out from traders "
  collateralOutCount: Int!

  " Total number of pools "
  totalPoolCount: Int!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Pools #####

  " All pools that belong to this protocol "
  pools: [LiquidityPool!]! @derivedFrom(field: "protocol")

  " Day ID of the most recent daily snapshot "
  _lastSnapshotDayID: BigInt

  " Hour ID of the most recent hourly snapshot "
  _lastSnapshotHourID: BigInt

  " Timestamp of the last time this entity was updated "
  _lastUpdateTimestamp: BigInt
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity(immutable: true) @dailySnapshot {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  days: Int!

  " Protocol this snapshot is associated with "
  protocol: DerivPerpProtocol!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Daily number of long positions "
  dailyLongPositionCount: Int!

  " Total number of long positions (not cumulative) "
  longPositionCount: Int!

  " Daily number of short positions "
  dailyShortPositionCount: Int!

  " Total number of short positions (not cumulative) "
  shortPositionCount: Int!

  " Daily number of open positions "
  dailyOpenPositionCount: Int!

  " Total number of open positions (not cumulative) "
  openPositionCount: Int!

  " Daily number of closed positions "
  dailyClosedPositionCount: Int!

  " Total number of closed positions "
  closedPositionCount: Int!

  " Daily number of positions (open and closed) "
  dailyCumulativePositionCount: Int!

  " Total number of positions (open and closed) "
  cumulativePositionCount: Int!

  " Daily number of transactions. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Daily number of deposits (add liquidity) "
  dailyDepositCount: Int!

  " Daily number of withdrawals (remove liquidity) "
  dailyWithdrawCount: Int!

  " Daily number of borrows for leverage "
  dailyBorrowCount: Int!

  " Daily number of trades (swaps) "
  dailySwapCount: Int!

  " Number of unique daily depositors "
  dailyActiveDepositors: Int!

  " Number of cumulative depositors "
  cumulativeUniqueDepositors: Int!

  " Number of unique daily borrowers "
  dailyActiveBorrowers: Int!

  " Number of cumulative borrowers "
  cumulativeUniqueBorrowers: Int!

  " Number of unique daily liquidators (accounts that performed liquidation) "
  dailyActiveLiquidators: Int!

  " Number of cumulative liquidators (accounts that performed liquidation) "
  cumulativeUniqueLiquidators: Int!

  " Number of unique daily liquidatees (accounts that got liquidated) "
  dailyActiveLiquidatees: Int!

  " Number of cumulative liquidatees (accounts that got liquidated) "
  cumulativeUniqueLiquidatees: Int!

  " Daily number of collateral In from traders "
  dailyCollateralIn: Int!

  " Cumulative number of collateral In from traders "
  cumulativeCollateralIn: Int!

  " Daily number of collateral Out from traders "
  dailyCollateralOut: Int!

  " Cumulative number of collateral Out from traders "
  cumulativeCollateralOut: Int!

  " Total number of pools "
  totalPoolCount: Int!
}

type UsageMetricsHourlySnapshot @entity(immutable: true) @hourlySnapshot {
  " { # of hours since Unix epoch time } "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hours: Int!

  " Protocol this snapshot is associated with "
  protocol: DerivPerpProtocol!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " Total number of deposits (add liquidity) in an hour "
  hourlyDepositCount: Int!

  " Total number of withdrawals (remove liquidity) in an hour "
  hourlyWithdrawCount: Int!

  " Total number of borrows (for additional leverage) in an hour "
  hourlyBorrowCount: Int!

  " Total number of trades (swaps) in an hour "
  hourlySwapCount: Int!
}

type FinancialsDailySnapshot @entity(immutable: true) @dailySnapshot {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  days: Int!

  " Protocol this snapshot is associated with "
  protocol: DerivPerpProtocol!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Daily trade Notional volume, in USD "
  dailyVolumeUSD: BigDecimal!

  " All historical trade Notional volume in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Daily Inflow trade Notional volume, in USD, based on value of underlying assets coming into protocol at the time of position open "
  dailyInflowVolumeUSD: BigDecimal!

  " Inflow historical trade Notional volume in USD, based on value of underlying assets coming into protocol from trade at the time of position open "
  cumulativeInflowVolumeUSD: BigDecimal!

  " Daily Inflow trade Notional volume, in USD, based on value of underlying assets coming into protocol at the time of position Closed "
  dailyClosedInflowVolumeUSD: BigDecimal!

  " Inflow historical trade Notional volume in USD, based on value of underlying assets coming into protocol from trade at the time of position closed "
  cumulativeClosedInflowVolumeUSD: BigDecimal!

  " Daily Outflow trade Notional volume, in USD, based on value of underlying assets coming out of protocol from trade "
  dailyOutflowVolumeUSD: BigDecimal!

  " Outflow historical trade Notional volume in USD, based on value of underlying assets coming out of protocol from trade "
  cumulativeOutflowVolumeUSD: BigDecimal!

  " Daily notional value of all open long positions "
  dailyLongOpenInterestUSD: BigDecimal!

  " Daily notional value of all open short positions "
  dailyShortOpenInterestUSD: BigDecimal!

  " Daily notional value of all open positions "
  dailyTotalOpenInterestUSD: BigDecimal!

  " Daily revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  dailySupplySideRevenueUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Daily revenue for the stakers (this is defined as recieving a share of revenue or tokens equal to share e.g. buying eth with DAI revenue). Examples: GMX 30% of trade fees goes to stakers "
  dailyStakeSideRevenueUSD: BigDecimal!

  " Gross revenue for the stakers (this is defined as recieving a share of revenue or tokens equal to share e.g. buying eth with DAI revenue). Examples: GMX 30% of trade fees goes to stakers "
  cumulativeStakeSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Daily premium paid to enter a position. "
  dailyEntryPremiumUSD: BigDecimal!

  " All premium paid to enter a position. "
  cumulativeEntryPremiumUSD: BigDecimal!

  " Daily premium paid to exit a position. "
  dailyExitPremiumUSD: BigDecimal!

  " All premium paid to exit a position. "
  cumulativeExitPremiumUSD: BigDecimal!

  " Daily premium paid. "
  dailyTotalPremiumUSD: BigDecimal!

  " All premium paid. "
  cumulativeTotalPremiumUSD: BigDecimal!

  " Daily premium paid to deposit in liquidity pools. "
  dailyDepositPremiumUSD: BigDecimal!

  " All premium paid to deposit in liquidity pools. "
  cumulativeDepositPremiumUSD: BigDecimal!

  " Daily premium paid to withdraw from liquidity pools. "
  dailyWithdrawPremiumUSD: BigDecimal!

  " All premium paid to withdraw from liquidity pools. "
  cumulativeWithdrawPremiumUSD: BigDecimal!

  " Daily premium paid to enter and exit liquidity pool. "
  dailyTotalLiquidityPremiumUSD: BigDecimal!

  " All premium paid to enter and exit liquidity pool. "
  cumulativeTotalLiquidityPremiumUSD: BigDecimal!
}

###############################
##### Pool-Level Metadata #####
###############################

type LiquidityPool @entity @regularPolling {
  " Smart contract address of the pool "
  id: Bytes!

  " The protocol this pool belongs to "
  protocol: DerivPerpProtocol!

  " Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) "
  name: String

  " Symbol of liquidity pool (e.g. 3CRV) "
  symbol: String

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon "
  rewardTokens: [RewardToken!]

  " Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. ) "
  fees: [LiquidityPoolFee!]!

  " Name of oracle source (e.g. chainlink, uniswap, pyth) "
  oracle: String

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of this pool in USD "
  totalValueLockedUSD: BigDecimal!

  " All funding rates for this liquidity pool. (Should be in APR format and the same order as inputTokens) "
  fundingrate: [BigDecimal!]!

  " All revenue generated by the liquidity pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the stakers of governance token. Examples: GMX 30% of trade fees goes to stakers of native token (e.g. GMX stakers) "
  cumulativeStakeSideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " All premium paid to enter a position. "
  cumulativeEntryPremiumUSD: BigDecimal!

  " All premium paid to exit a position. "
  cumulativeExitPremiumUSD: BigDecimal!

  " All premium paid. "
  cumulativeTotalPremiumUSD: BigDecimal!

  " All premium paid to deposit in liquidity pools. "
  cumulativeDepositPremiumUSD: BigDecimal!

  " All premium paid to withdraw from liquidity pools. "
  cumulativeWithdrawPremiumUSD: BigDecimal!

  " All premium paid to enter and exit liquidity pool. "
  cumulativeTotalLiquidityPremiumUSD: BigDecimal!

  " Number of cumulative unique users in this pool "
  cumulativeUniqueUsers: Int!

  " Number of cumulative depositors in this pool "
  cumulativeUniqueDepositors: Int!

  " Number of cumulative borrowers "
  cumulativeUniqueBorrowers: Int!

  " Number of cumulative liquidators (accounts that performed liquidation) "
  cumulativeUniqueLiquidators: Int!

  " Number of cumulative liquidatees (accounts that got liquidated) "
  cumulativeUniqueLiquidatees: Int!

  " Notional value of all open long positions "
  longOpenInterestUSD: BigDecimal!

  " Notional value of all open short positions "
  shortOpenInterestUSD: BigDecimal!

  " Notional value of all open positions "
  totalOpenInterestUSD: BigDecimal!

  " Total number of long positions (not cumulative) "
  longPositionCount: Int!

  " Total number of short positions (not cumulative) "
  shortPositionCount: Int!

  " Total number of open positions (not cumulative) "
  openPositionCount: Int!

  " Total number of closed positions "
  closedPositionCount: Int!

  " Total number of positions (open and closed) "
  cumulativePositionCount: Int!

  " All historical trade notional volume occurred in this pool, in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumeByTokenAmount: [BigInt!]!

  " Trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumeByTokenUSD: [BigDecimal!]!

  " Inflow historical trade notional volume occurred in this pool, in USD, based on value of underlying assets coming into protocol from trade, at the time of position opened. "
  cumulativeInflowVolumeUSD: BigDecimal!

  " Inflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeInflowVolumeByTokenAmount: [BigInt!]!

  " Inflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeInflowVolumeByTokenUSD: [BigDecimal!]!

  " Inflow historical trade notional volume occurred in this pool, in USD, based on value of underlying assets coming into protocol from trade, at the time of position closed. "
  cumulativeClosedInflowVolumeUSD: BigDecimal!

  " Inflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position closed The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeClosedInflowVolumeByTokenAmount: [BigInt!]!

  " Inflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position closed. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeClosedInflowVolumeByTokenUSD: [BigDecimal!]!

  " Outflow historical trade notional volume occurred in this pool, in USD, based on value of underlying assets coming outof protocol from trade. "
  cumulativeOutflowVolumeUSD: BigDecimal!

  " Outflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeOutflowVolumeByTokenAmount: [BigInt!]!

  " Outflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeOutflowVolumeByTokenUSD: [BigDecimal!]!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool "
  inputTokenWeights: [BigDecimal!]!

  " Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) "
  outputTokenSupply: BigInt

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]

  ##### Snapshots #####

  " Liquidity pool daily snapshots "
  dailySnapshots: [LiquidityPoolDailySnapshot!]! @derivedFrom(field: "pool")

  " Liquidity pool hourly snapshots "
  hourlySnapshots: [LiquidityPoolHourlySnapshot!]! @derivedFrom(field: "pool")

  ##### Events #####

  " All deposit (add liquidity) events occurred in this pool "
  deposits: [Deposit!]! @derivedFrom(field: "pool")

  " All withdraw (remove liquidity) events occurred in this pool "
  withdraws: [Withdraw!]! @derivedFrom(field: "pool")

  " All trade (swap) events occurred in this pool "
  swaps: [Swap!]! @derivedFrom(field: "pool")

  " Day ID of the most recent daily snapshot "
  _lastSnapshotDayID: BigInt

  " Hour ID of the most recent hourly snapshot "
  _lastSnapshotHourID: BigInt

  " Timestamp of the last time this entity was updated "
  _lastUpdateTimestamp: BigInt
}

#################################
##### Pool-Level Timeseries #####
#################################

type LiquidityPoolDailySnapshot @entity(immutable: true) @dailySnapshot {
  " { Smart contract address of the pool }-{ # of days since Unix epoch time } "
  id: Bytes!

  " Number of days since Unix epoch time "
  days: Int!

  " The protocol this snapshot belongs to "
  protocol: DerivPerpProtocol!

  " The pool this snapshot belongs to "
  pool: LiquidityPool!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of this pool "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Daily revenue generated by the liquidity pool, accrued to the supply side. "
  dailySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the liquidity pool, accrued to the protocol. "
  dailyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the stakers of the governance token. Examples: GMX 30% of trade fees goes to stakers of native token (e.g. GMX stakers) "
  cumulativeStakeSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the liquidity pool, accrued to the stakers of the governance token. Examples: GMX 30% of trade fees goes to stakers of native token (e.g. GMX stakers)"
  dailyStakeSideRevenueUSD: BigDecimal!

  " Daily revenue generated by the liquidity pool. "
  dailyTotalRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Daily funding rate based on rate given by protocol, inform us if this is not provided."
  dailyFundingrate: [BigDecimal!]!

  " Daily notional value of all open long positions "
  dailyLongOpenInterestUSD: BigDecimal!

  " Daily notional value of all open short positions "
  dailyShortOpenInterestUSD: BigDecimal!

  " Daily notional value of all open positions "
  dailyTotalOpenInterestUSD: BigDecimal!

  " Daily premium paid to enter a position. "
  dailyEntryPremiumUSD: BigDecimal!

  " All premium paid to enter a position. "
  cumulativeEntryPremiumUSD: BigDecimal!

  " Daily premium paid to exit a position. "
  dailyExitPremiumUSD: BigDecimal!

  " All premium paid to exit a position. "
  cumulativeExitPremiumUSD: BigDecimal!

  " Daily premium paid. "
  dailyTotalPremiumUSD: BigDecimal!

  " All premium paid. "
  cumulativeTotalPremiumUSD: BigDecimal!

  " Daily premium paid to deposit in liquidity pools. "
  dailyDepositPremiumUSD: BigDecimal!

  " All premium paid to deposit in liquidity pools. "
  cumulativeDepositPremiumUSD: BigDecimal!

  " Daily premium paid to withdraw from liquidity pools. "
  dailyWithdrawPremiumUSD: BigDecimal!

  " All premium paid to withdraw from liquidity pools. "
  cumulativeWithdrawPremiumUSD: BigDecimal!

  " Daily premium paid to enter and exit liquidity pool. "
  dailyTotalLiquidityPremiumUSD: BigDecimal!

  " All premium paid to enter and exit liquidity pool. "
  cumulativeTotalLiquidityPremiumUSD: BigDecimal!

  " Number of unique daily users "
  dailyActiveUsers: Int!

  " Number of cumulative users "
  cumulativeUniqueUsers: Int!

  " Number of unique daily depositors "
  dailyActiveDepositors: Int!

  " Number of cumulative depositors "
  cumulativeUniqueDepositors: Int!

  " Number of unique daily borrowers "
  dailyActiveBorrowers: Int!

  " Number of cumulative borrowers "
  cumulativeUniqueBorrowers: Int!

  " Number of unique daily liquidators (accounts that performed liquidation) "
  dailyActiveLiquidators: Int!

  " Number of cumulative liquidators (accounts that performed liquidation) "
  cumulativeUniqueLiquidators: Int!

  " Number of unique daily liquidatees (accounts that got liquidated) "
  dailyActiveLiquidatees: Int!

  " Number of cumulative liquidatees (accounts that got liquidated) "
  cumulativeUniqueLiquidatees: Int!

  " Daily number of long positions "
  dailyLongPositionCount: Int!

  " Total number of long positions (not cumulative) "
  longPositionCount: Int!

  " Daily number of short positions "
  dailyShortPositionCount: Int!

  " Total number of short positions (not cumulative) "
  shortPositionCount: Int!

  " Daily number of open positions "
  dailyOpenPositionCount: Int!

  " Total number of open positions (not cumulative) "
  openPositionCount: Int!

  " Daily number of closed positions "
  dailyClosedPositionCount: Int!

  " Total number of closed positions "
  closedPositionCount: Int!

  " Daily number of positions (open and closed) "
  dailyCumulativePositionCount: Int!

  " Total number of positions (open and closed) "
  cumulativePositionCount: Int!

  " Daily trade notional volume occurred in USD "
  dailyVolumeUSD: BigDecimal!

  " Daily trade notional volume for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. "
  dailyVolumeByTokenAmount: [BigInt!]!

  " Daily trade notional volume for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. "
  dailyVolumeByTokenUSD: [BigDecimal!]!

  " All historical trade notional volume occurred in this pool, in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Daily Inflow trade notional volume in this pool, in USD, based on value of underlying assets coming into protocol from trade, at time of position open"
  dailyInflowVolumeUSD: BigDecimal!

  " Daily Inflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  dailyInflowVolumeByTokenAmount: [BigInt!]!

  " Daily Inflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  dailyInflowVolumeByTokenUSD: [BigDecimal!]!

  " Inflow historical trade notional volume occurred in this pool, in USD, based on value of underlying assets coming into protocol from trade, at the time of position open. "
  cumulativeInflowVolumeUSD: BigDecimal!

  " Daily Inflow trade notional volume in this pool, in USD, based on value of underlying assets coming into protocol from trade, at time of position closed"
  dailyClosedInflowVolumeUSD: BigDecimal!

  " Daily Inflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position closed The ordering should be the same as the pool's `inputTokens` field. "
  dailyClosedInflowVolumeByTokenAmount: [BigInt!]!

  " Daily Inflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position closed. The ordering should be the same as the pool's `inputTokens` field. "
  dailyClosedInflowVolumeByTokenUSD: [BigDecimal!]!

  " Inflow historical trade notional volume occurred in this pool, in USD, based on value of underlying assets coming into protocol from trade, at the time of position closed. "
  cumulativeClosedInflowVolumeUSD: BigDecimal!

  " Daily Outflow trade notional volume occurred in this pool in USD, based on value of underlying assets coming out of protocol from trade "
  dailyOutflowVolumeUSD: BigDecimal!

  " Daily Outflow trade notional volume occurred in this pool for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. "
  dailyOutflowVolumeByTokenAmount: [BigInt!]!

  " Daily Outflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming out of protocol from trade. The ordering should be the same as the pool's `inputTokens` field. "
  dailyOutflowVolumeByTokenUSD: [BigDecimal!]!

  " Outflow historical trade notional volume occurred in this pool, in USD, based on value of underlying assets coming outof protocol from trade. "
  cumulativeOutflowVolumeUSD: BigDecimal!

  " Trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumeByTokenAmount: [BigInt!]!

  " Trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumeByTokenUSD: [BigDecimal!]!

  " Inflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeInflowVolumeByTokenAmount: [BigInt!]!

  " Inflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeInflowVolumeByTokenUSD: [BigDecimal!]!

  " Inflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position closed The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeClosedInflowVolumeByTokenAmount: [BigInt!]!

  " Inflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position closed. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeClosedInflowVolumeByTokenUSD: [BigDecimal!]!

  " Outflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeOutflowVolumeByTokenAmount: [BigInt!]!

  " Outflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeOutflowVolumeByTokenUSD: [BigDecimal!]!

  " Array to account for multi-asset pools. "
  _inputTokens: [Token!]

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool "
  inputTokenWeights: [BigDecimal!]!

  " Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) "
  outputTokenSupply: BigInt

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]
}

type LiquidityPoolHourlySnapshot @entity(immutable: true) @hourlySnapshot {
  " { Smart contract address of the pool }-{ # of hours since Unix epoch time } "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hours: Int!

  " The protocol this snapshot belongs to "
  protocol: DerivPerpProtocol!

  " The pool this snapshot belongs to "
  pool: LiquidityPool!

  ##### Quantitative Data #####

  " Current TVL (Total Value Locked) of this pool "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the supply side. "
  cumulativeSupplySideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the liquidity pool, accrued to the supply side. "
  hourlySupplySideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the protocol. "
  cumulativeProtocolSideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the liquidity pool, accrued to the protocol. "
  hourlyProtocolSideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool, accrued to the stakers of the native governance token. Examples: GMX 30% of trade fees goes to stakers of native token (e.g. GMX stakers)"
  cumulativeStakeSideRevenueUSD: BigDecimal!

  " Hourly revenue generated by the liquidity pool, accrued to the stakers of the native governance tokens. Examples: GMX 30% of trade fees goes to stakers of native token (e.g. GMX stakers)"
  hourlyStakeSideRevenueUSD: BigDecimal!

  " All revenue generated by the liquidity pool. "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Hourly revenue generated by the liquidity pool. "
  hourlyTotalRevenueUSD: BigDecimal!

  " Hourly funding rate based on rate given by protocol, inform us if this is not provided."
  hourlyFundingrate: [BigDecimal!]!

  " Hourly notional value of all open long positions "
  hourlyLongOpenInterestUSD: BigDecimal!

  " Hourly notional value of all open short positions "
  hourlyShortOpenInterestUSD: BigDecimal!

  " Hourly notional value of all open positions "
  hourlyTotalOpenInterestUSD: BigDecimal!

  " All premium paid to enter a position. "
  hourlyEntryPremiumUSD: BigDecimal!

  " All premium paid to enter a position. "
  cumulativeEntryPremiumUSD: BigDecimal!

  " Hourly premium paid to exit a position. "
  hourlyExitPremiumUSD: BigDecimal!

  " All premium paid to exit a position. "
  cumulativeExitPremiumUSD: BigDecimal!

  " Hourly premium paid. "
  hourlyTotalPremiumUSD: BigDecimal!

  " All premium paid. "
  cumulativeTotalPremiumUSD: BigDecimal!

  " Hourly premium paid to deposit in liquidity pools. "
  hourlyDepositPremiumUSD: BigDecimal!

  " All premium paid to deposit in liquidity pools. "
  cumulativeDepositPremiumUSD: BigDecimal!

  " Hourly premium paid to withdraw from liquidity pools. "
  hourlyWithdrawPremiumUSD: BigDecimal!

  " All premium paid to withdraw from liquidity pools. "
  cumulativeWithdrawPremiumUSD: BigDecimal!

  " Hourly premium paid to enter and exit liquidity pool. "
  hourlyTotalLiquidityPremiumUSD: BigDecimal!

  " All premium paid to enter and exit liquidity pool. "
  cumulativeTotalLiquidityPremiumUSD: BigDecimal!

  "Hourly trade volume, in USD "
  hourlyVolumeUSD: BigDecimal!

  " Hourly trade volume occurred in this pool for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyVolumeByTokenAmount: [BigInt!]!

  " Hourly trade volume occurred in this pool for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyVolumeByTokenUSD: [BigDecimal!]!

  " All historical trade volume occurred in this pool, in USD "
  cumulativeVolumeUSD: BigDecimal!

  " Hourly Inflow trade notional volume, in USD, at time position open. "
  hourlyInflowVolumeUSD: BigDecimal!

  " Hourly Inflow trade notional volume occurred in this pool for a specific input token, in native amount, at time position open. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyInflowVolumeByTokenAmount: [BigInt!]!

  " Hourly Inflow trade notional volume occurred in in this pool for a specific input token, in USD, at time position open. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyInflowVolumeByTokenUSD: [BigDecimal!]!

  " Inflow historical trade notional volume occurred in this pool, in USD, at time position open. "
  cumulativeInflowVolumeUSD: BigDecimal!

  " Hourly Inflow trade notional volume, in USD, at time position closed. "
  hourlyClosedInflowVolumeUSD: BigDecimal!

  " Hourly Inflow trade notional volume occurred in this pool for a specific input token, in native amount, at time position closed. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyClosedInflowVolumeByTokenAmount: [BigInt!]!

  " Hourly Inflow trade notional volume occurred in in this pool for a specific input token, in USD, at time position closed. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyClosedInflowVolumeByTokenUSD: [BigDecimal!]!

  " Inflow historical trade notional volume occurred in this pool, in USD, at time position closed. "
  cumulativeClosedInflowVolumeUSD: BigDecimal!

  " Hourly Outflow trade notional volume occurred in this pool, in USD "
  hourlyOutflowVolumeUSD: BigDecimal!

  " Hourly Outflow trade notional volume occurred in this pool for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyOutflowVolumeByTokenAmount: [BigInt!]!

  " Hourly Outflow trade notional volume occurred in this pool for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. "
  hourlyOutflowVolumeByTokenUSD: [BigDecimal!]!

  " Outflow historical trade notional volume occurred in this pool, in USD "
  cumulativeOutflowVolumeUSD: BigDecimal!

  " Trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumeByTokenAmount: [BigInt!]!

  " Trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeVolumeByTokenUSD: [BigDecimal!]!

  " Inflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeInflowVolumeByTokenAmount: [BigInt!]!

  " Inflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeInflowVolumeByTokenUSD: [BigDecimal!]!

  " Inflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position closed The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeClosedInflowVolumeByTokenAmount: [BigInt!]!

  " Inflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position closed. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeClosedInflowVolumeByTokenUSD: [BigDecimal!]!

  " Outflow trade notional volume occurred in in this pool for a specific input token, in native amount, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeOutflowVolumeByTokenAmount: [BigInt!]!

  " Outflow trade notional volume occurred in this pool for a specific input token, in USD, based on value of underlying assets coming into protocol from trade, at time of position open. The ordering should be the same as the pool's `inputTokens` field. "
  cumulativeOutflowVolumeByTokenUSD: [BigDecimal!]!

  " Array to account for multi-asset pools. "
  _inputTokens: [Token!]

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool "
  inputTokenWeights: [BigDecimal!]!

  " Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) "
  outputTokenSupply: BigInt

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal

  " Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
  stakedOutputTokenAmount: BigInt

  " Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsAmount: [BigInt!]

  " Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
  rewardTokenEmissionsUSD: [BigDecimal!]
}

##################################
##### Transaction-Level Data #####
##################################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
interface Event {
  " { Event type }-{ Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: DerivPerpProtocol!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Account that controls this transaction "
  account: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

"Deposits in liquidity pool"
type Deposit implements Event @entity(immutable: true) @transaction {
  " deposit-{ Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: DerivPerpProtocol!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Account that controls this transaction "
  account: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool "
  inputTokens: [Token!]!

  " Output token of the pool. E.g. the UNI-LP token "
  outputToken: Token

  " Amount of input tokens in the token's native unit "
  inputTokenAmounts: [BigInt!]!

  " Amount of output tokens in the token's native unit "
  outputTokenAmount: BigInt

  " USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool) "
  amountUSD: BigDecimal!

  " The pool involving this transaction "
  pool: LiquidityPool!
}

"Withdraw in liquidity pool"
type Withdraw implements Event @entity(immutable: true) @transaction {
  " withdraw-{ Transaction hash }-{ Log index }"
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: DerivPerpProtocol!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Account that controls this transaction "
  account: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool "
  inputTokens: [Token!]!

  " Output token of the pool (not output token of the event/transaction). E.g. the UNI-LP token "
  outputToken: Token

  " Amount of input tokens in the token's native unit "
  inputTokenAmounts: [BigInt!]!

  " Amount of output tokens in the token's native unit "
  outputTokenAmount: BigInt

  " USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool) "
  amountUSD: BigDecimal!

  " The pool involving this transaction "
  pool: LiquidityPool!
}

type Borrow implements Event @entity(immutable: true) @transaction {
  " borrow-{ Transaction hash }-{ Log index }"
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: DerivPerpProtocol!

  " The position this Borrow belongs to"
  position: Position!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that is borrowing "
  account: Account!

  " Asset borrowed "
  asset: Token!

  " Amount of borrowed in token "
  amount: BigInt!

  " Amount of borrowed in USD "
  amountUSD: BigDecimal!

  " The pool involving this transaction "
  pool: LiquidityPool!
}

"Collateral In for trading"
type CollateralIn implements Event @entity(immutable: true) @transaction {
  " collateralIn-{ Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: DerivPerpProtocol!

  " The position this transaction belongs to as relates to Long or Short but not LP "
  position: Position

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Account that controls this transaction "
  account: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool "
  inputTokens: [Token!]!

  " Output token of the pool. E.g. the UNI-LP token "
  outputToken: Token

  " Amount of input tokens in the token's native unit "
  inputTokenAmounts: [BigInt!]!

  " Amount of output tokens in the token's native unit "
  outputTokenAmount: BigInt

  " USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool) "
  amountUSD: BigDecimal!

  " The pool involving this transaction "
  pool: LiquidityPool!
}

"Collateral out for trading"
type CollateralOut implements Event @entity(immutable: true) @transaction {
  " collateralOut-{ Transaction hash }-{ Log index }"
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: DerivPerpProtocol!

  " The positionthis transaction belongs to as it relates to long or short, but not LP"
  position: Position!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Account that controls this transaction "
  account: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool "
  inputTokens: [Token!]!

  " Output token of the pool (not output token of the event/transaction). E.g. the UNI-LP token "
  outputToken: Token

  " Amount of input tokens in the token's native unit "
  inputTokenAmounts: [BigInt!]!

  " Amount of output tokens in the token's native unit "
  outputTokenAmount: BigInt

  " USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool) "
  amountUSD: BigDecimal!

  " The pool involving this transaction "
  pool: LiquidityPool!
}

#This only applies to protocols that have a DEX (e.g. DYDX).
type Swap implements Event @entity(immutable: true) @transaction {
  " swap-{ Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: DerivPerpProtocol!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Account that controls this transaction "
  account: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token deposited into pool "
  tokenIn: Token!

  " Amount of token deposited into pool in native units "
  amountIn: BigInt!

  " Amount of token deposited into pool in USD "
  amountInUSD: BigDecimal!

  " Token withdrawn from pool "
  tokenOut: Token!

  " Amount of token withdrawn from pool in native units "
  amountOut: BigInt!

  " Amount of token withdrawn from pool in USD "
  amountOutUSD: BigDecimal!

  " The contract address for the trading pair or pool "
  tradingPair: Bytes!

  " The pool involving this transaction "
  pool: LiquidityPool!
}

type Liquidate implements Event @entity(immutable: true) @transaction {
  " liquidate-{ Transaction hash }-{ Log index }"
  id: Bytes!

  " Transaction hash of the transaction that emitted this event "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: DerivPerpProtocol!

  " The position this Liquidate belongs to"
  position: Position!

  " Address that received the tokens "
  to: Bytes!

  " Address that sent the tokens "
  from: Bytes!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that carried out the liquidation "
  account: Account!

  " Account that got liquidated "
  liquidatee: Account!

  " Asset repaid (borrowed) "
  asset: Token!

  " Amount of collateral liquidated in native units "
  amount: BigInt!

  " Amount of collateral liquidated in USD "
  amountUSD: BigDecimal!

  " Amount of profit from liquidation in USD "
  profitUSD: BigDecimal!

  " The pool involving this transaction "
  pool: LiquidityPool!
}

# An account is a unique Ethereum address
# Helps to accumulate total unique users
type Account @entity @regularPolling {
  " Address of the account "
  id: Bytes!

  " All premium paid to enter a position. "
  cumulativeEntryPremiumUSD: BigDecimal!

  " All premium paid to exit a position. "
  cumulativeExitPremiumUSD: BigDecimal!

  " All premium paid. "
  cumulativeTotalPremiumUSD: BigDecimal!

  " All premium paid to deposit in liquidity pools. "
  cumulativeDepositPremiumUSD: BigDecimal!

  " All premium paid to withdraw from liquidity pools. "
  cumulativeWithdrawPremiumUSD: BigDecimal!

  " All premium paid to enter and exit liquidity pool. "
  cumulativeTotalLiquidityPremiumUSD: BigDecimal!

  " All Position events occurred in this account "
  positions: [Position!]! @derivedFrom(field: "account")

  " Total number of long positions (not cumulative) "
  longPositionCount: Int!

  " Total number of short positions (not cumulative) "
  shortPositionCount: Int!

  " Total number of open positions (not cumulative) "
  openPositionCount: Int!

  " Total number of closed positions "
  closedPositionCount: Int!

  " Total number of liquidations "
  cumulativeUniqueLiquidatees: Int!

  " All deposit (add liquidity) events occurred in this account "
  deposits: [Deposit!]! @derivedFrom(field: "account")

  " Number of deposits in this account "
  depositCount: Int!

  " All withdraw (remove liquidity) events occurred in this account "
  withdraws: [Withdraw!]! @derivedFrom(field: "account")

  " Number of withdraws in this account "
  withdrawCount: Int!

  " All borrows events occurred in this account "
  borrows: [Borrow!]! @derivedFrom(field: "account")

  " Number of borrows this account made "
  borrowCount: Int!
  " All collateral put into protocol for trading events occurred in this account "
  collateralIn: [CollateralIn!]! @derivedFrom(field: "account")

  " Number of times collateral was put into protocol for trading in this account "
  collateralInCount: Int!

  " All collateral taken out from trading events occurred in this account "
  collateralOut: [CollateralOut!]! @derivedFrom(field: "account")

  " Number of times collateral was taken out from trading in this account "
  collateralOutCount: Int!

  " All swaps events occurred in this account "
  swaps: [Swap!]! @derivedFrom(field: "account")

  " Number of swaps in this account "
  swapCount: Int!

  " All liquidation events where this account was the liquidator "
  liquidates: [Liquidate!]! @derivedFrom(field: "account")

  " Number of times this account liquidated a position "
  liquidateCount: Int!

  " All liquidation events where this account got liquidated "
  liquidations: [Liquidate!]! @derivedFrom(field: "liquidatee")

  " Number of times this account has been liquidated "
  liquidationCount: Int!
}

# Helper entity for calculating daily/hourly active users
type ActiveAccount @entity(immutable: true) {
  " { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } "
  id: Bytes!
}

enum PositionSide {
  " Position opened as long "
  LONG

  " Position opened as short "
  SHORT
}

# A position is defined as who has what position in the protocol and distribution of longs and shorts at a positional level
type Position @entity @regularPolling {
  " { Account address }-{ Pool address }-{ Position Side }-{ Counter } "
  id: Bytes!

  " Account that owns this position "
  account: Account!

  " The market in which this position was opened "
  liquidityPool: LiquidityPool!

  " The asset in which this position was used as collateral "
  collateral: Token!

  " The asset in which this position is long or short "
  asset: Token!

  " The hash of the transaction that opened this position "
  hashOpened: Bytes!

  " The hash of the transaction that closed this position (null if open) "
  hashClosed: Bytes

  " Block number of when the position was opened "
  blockNumberOpened: BigInt!

  " Block number of when the position was closed (null if open) "
  blockNumberClosed: BigInt

  " Timestamp when the position was opened "
  timestampOpened: BigInt!

  " Timestamp when the position was closed (null if open) "
  timestampClosed: BigInt

  " Side of the position (either long or short) "
  side: PositionSide!

  " Funding rate given by protocol at the time of position open, inform us if this is not provided."
  fundingrateOpen: BigDecimal!

  " Funding rate given by protocol at the time of position open, inform us if this is not provided."
  fundingrateClosed: BigDecimal

  " Multiplier leverage of position e.g. 10X or 2.5X "
  leverage: BigDecimal!

  " Notional value of position, in asset units "
  balance: BigInt!

  " Notional value of collateral position, in collateral units "
  collateralBalance: BigInt!

  " Notional value of position, in USD, at time of open "
  balanceUSD: BigDecimal!

  " Notional value of collateral position, in USD "
  collateralBalanceUSD: BigDecimal!

  " Notional value of position right before position closed, in USD, only useful at close events. "
  closeBalanceUSD: BigDecimal

  " Notional value of collateral position ight before position closed, in USD, only useful at close events "
  closeCollateralBalanceUSD: BigDecimal

  " Realised profit and loss in USD at the time of close or event "
  realisedPnlUSD: BigDecimal

  " All collateral put into protocol for trading events occurred in this account "
  collateralIn: [CollateralIn!]! @derivedFrom(field: "position")

  " Number of collateral in related to this position "
  collateralInCount: Int!

  " All collateral taken out from trading events occurred in this account "
  collateralOut: [CollateralOut!]! @derivedFrom(field: "position")

  " Number of collateral out related to this position "
  collateralOutCount: Int!

  " Liquidation event related to this position (if exists) "
  liquidation: Liquidate @derivedFrom(field: "position")

  " Number of liquidations related to this position "
  liquidationCount: Int!

  " Position daily snapshots for open positions "
  snapshots: [PositionSnapshot!]! @derivedFrom(field: "position")
}

type PositionSnapshot @entity(immutable: true) @hourlySnapshot {
  " { Position ID }-{ Transaction hash }-{ Log index } "
  id: Bytes!

  " Transaction hash of the transaction that triggered this snapshot "
  hash: Bytes!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Nonce of the transaction that triggered this snapshot "
  nonce: BigInt!

  "Position this snapshot refers to"
  position: Position!

  " Account that owns this position "
  account: Account!

  " Funding rate given by protocol at the time of position at snapshot, inform us if this is not provided. "
  fundingrate: BigDecimal

  " Notional value of position, in asset units "
  balance: BigInt!

  " Notional value of collateral position, in collateral units "
  collateralBalance: BigInt!

  " Notional value of position, in USD, at time of open "
  balanceUSD: BigDecimal!

  " Notional value of collateral position, in USD "
  collateralBalanceUSD: BigDecimal!

  " Realised profit and loss in USD at the time of close or event "
  realisedPnlUSD: BigDecimal

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

###########################
##### Helper Entities #####
###########################

type _TempUsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: Bytes!

  " Number of days since Unix epoch time "
  days: Int!

  " Protocol this snapshot is associated with "
  protocol: DerivPerpProtocol!

  " Daily number of long positions "
  dailyLongPositionCount: Int!

  " Daily number of short positions "
  dailyShortPositionCount: Int!

  " Daily number of open positions "
  dailyOpenPositionCount: Int!

  " Daily number of closed positions "
  dailyClosedPositionCount: Int!

  " Daily number of positions (open and closed) "
  dailyCumulativePositionCount: Int!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Daily number of transactions . Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Daily number of deposits (add liquidity) "
  dailyDepositCount: Int!

  " Daily number of withdrawals (remove liquidity) "
  dailyWithdrawCount: Int!

  " Daily number of borrows for leverage "
  dailyBorrowCount: Int!

  " Daily number of trades (swaps) "
  dailySwapCount: Int!

  " Number of unique daily depositors "
  dailyActiveDepositors: Int!

  " Number of unique daily borrowers "
  dailyActiveBorrowers: Int!

  " Number of unique daily liquidators (accounts that performed liquidation) "
  dailyActiveLiquidators: Int!

  " Number of unique daily liquidatees (accounts that got liquidated) "
  dailyActiveLiquidatees: Int!

  " Daily number of collateral In from traders "
  dailyCollateralIn: Int!

  " Daily number of collateral Out from traders "
  dailyCollateralOut: Int!
}

type _TempUsageMetricsHourlySnapshot @entity {
  " { # of hours since Unix epoch time } "
  id: Bytes!

  " Number of hours since Unix epoch time "
  hours: Int!

  " Protocol this snapshot is associated with "
  protocol: DerivPerpProtocol!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " Total number of deposits (add liquidity) in an hour "
  hourlyDepositCount: Int!

  " Total number of withdrawals (remove liquidity) in an hour "
  hourlyWithdrawCount: Int!

  " Total number of borrows (for additional leverage) in an hour "
  hourlyBorrowCount: Int!

  " Total number of trades (swaps) in an hour "
  hourlySwapCount: Int!
}

# Helper entity for getting positions
type _PositionCounter @entity {
  " { Account address }-{ Pool address }-{ Position Side } "
  id: Bytes!

  " Next count "
  nextCount: Int!
}

# Helper entity to map position key to position id
type _PositionMap @entity {
  " Position Key "
  id: Bytes!

  " Position id "
  positionId: Bytes!
}

# Helper entity for calculating Gains Trade reward emissions
type _CircularBuffer @entity {
  " 'CIRCULAR_BUFFER' "
  id: ID!

  " Array of sorted block numbers sorted continuously "
  blocks: [Int!]!

  " The index in the blocks array which will be used with the newest block to calculate block speed (Usally set to about a day before newest block) "
  windowStartIndex: Int!

  " The next index in the blocks array that will be replaced with the newest block "
  nextIndex: Int!

  " This determines the size of the blocks array. Should be set to contain at least a days worth of blocks according to a 1 day window for measuring speed"
  bufferSize: Int!

  " The current calculated number of blocks per day based on calculated block speed "
  blocksPerDay: BigDecimal!
}

# Helper entity for assets in Mux liquidity pool
type _MuxAsset @entity {
  # id
  id: Bytes!
  isStable: Boolean!
  tokenAddress: Bytes!
  muxTokenAddress: Bytes!
  timestamp: BigInt!
}

# Helper entity to map proxy key to position id for Gmx related trading aggregation
type _ProxyMap @entity {
  " Proxy Key "
  id: Bytes!

  " Position id "
  positionId: Bytes
}
