# Subgraph Schema: Lending Protocol
# Version: 1.1.0

enum Network {
  ARBITRUM
  AURORA
  AVALANCHE
  BSC
  CELO
  CRONOS
  ETHEREUM
  FANTOM
  HARMONY
  MOONBEAM
  MOONRIVER
  OPTIMISM
  POLYGON
  XDAI
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Mirrored from the smart contract "
  name: String!
  symbol: String!
  decimals: Int!
  underlyingAsset: String!
}

enum RewardTokenType {
  DEPOSIT
  BORROW
}

type RewardToken @entity {
  " Smart contract address of the reward token "
  id: ID!

  " Mirrored from the smart contract "
  name: String!
  symbol: String!
  decimals: Int!

  type: RewardTokenType!
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  network: Network!

  type: ProtocolType!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  " Total revenue in USD of all markets on the protocol "
  totalRevenueUSD: BigDecimal!

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  " # of unique daily active users "
  activeUsers: Int!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  " Total number of transaction occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  totalValueLockedUSD: BigDecimal!

  " Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  " Current balance of all deposited assets (not historical cumulative), in USD "
  totalDepositUSD: BigDecimal!

  " Current balance of all borrowed assets (not historical cumulative), in USD. In the case of CDPs, this will be all minted assets "
  totalBorrowUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  supplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  protocolSideRevenueUSD: BigDecimal!

  " Total revenue accrued by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  totalRevenueUSD: BigDecimal!
  
  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

enum LendingType {
  " Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market "
  CDP

  " Pooled protocols pool all users assets into a single market "
  POOLED
}

enum RiskType {
  " Global risk means each users position in a market is combined for one score to determine if they can be liquidated "
  GLOBAL

  " Isolated risk means each users position in a market or CDP is isolated for risk of liquidation "
  ISOLATED
}

type LendingProtocol implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Aave v2 "
  name: String!

  " Slug of protocol, including version. e.g. aave-v2 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  network: Network!

  type: ProtocolType!

  " String of the address of the current price oracle on the protocol "
  protocolPriceOracle: String!

  " Number of total/cumulative unique users "
  totalUniqueUsers: Int!

  " Total revenue in USD of all markets on the lending protocol "
  totalRevenueUSD: BigDecimal!

  totalValueLockedUSD: BigDecimal!

  " The portion of the revenue allocated to the protocol "
  protocolSideRevenueUSD : BigDecimal!

  " The portion of the revenue allocated to the suppliers (depositors) "
  supplySideRevenueUSD: BigDecimal!

  " Total borrow volume in USD (i.e. total loan origination ) "
  totalVolumeUSD: BigDecimal!

  " Current balance of all deposited assets (not historical cumulative), in USD "
  totalDepositUSD: BigDecimal!

  " Current balance of all borrowed assets (not historical cumulative), in USD. In the case of CDPs, this will be all minted assets "
  totalBorrowUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Lending-Specific #####

  " All markets that belong to this protocol "
  markets: [Market!]! @derivedFrom(field: "protocol")

  lendingType: LendingType

  riskType: RiskType
}

###############################
##### Pool-Level Metadata #####
###############################


type Market @entity {
  " Smart contract address of the market "
  id: ID!

  " The protocol this pool belongs to "
  protocol: LendingProtocol!

  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null 
  # and inputToken balances are used to calculate returns

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token!

  " Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon "
  rewardTokens: [RewardToken!]

  " The variable debt token address correlated to the reserve asset "
  vToken: String!

  " The stable debt token address correlated to the reserve asset "
  sToken: String!

  ##### Quantitative Data #####

  " The reserve factor as a percentage "
  reserveFactor: BigInt!

  " The total revenue to be collected on the market denominated in USD "
  totalRevenueUSD: BigDecimal!

  " The total value locked in deposits on this market measured in USD "
  totalValueLockedUSD: BigDecimal!

  " Total borrow volume in USD (i.e. total loan origination ) "
  totalVolumeUSD: BigDecimal!

  " Total amount of tokens locked up in stable rate borrows "
  totalStableValueLocked: BigInt!

  " Total amount of tokens locked up in variable rate borrows "
  totalVariableValueLocked: BigInt!

  " Current balance of all deposited assets (not historical cumulative), in USD "
  totalDepositUSD: BigDecimal!

  " Current balance of all borrowed assets (not historical cumulative), in USD. In the case of CDPs, this will be all minted assets "
  totalBorrowUSD: BigDecimal!

  " Amount of input tokens in the market. The ordering should be the same as the market's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Price per share of input token in USD "
  inputTokenPricesUSD: [BigDecimal!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]!

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Pool snapshots "
  snapshots: [MarketDailySnapshot!]! @derivedFrom(field: "market")

  ##### Lending-Specific #####

  " Name of market "
  name: String

  " Is this market active or is it frozen "
  isActive: Boolean!

  " Can you use the output token as collateral "
  canUseAsCollateral: Boolean!

  " Can you borrow from this market "
  canBorrowFrom: Boolean!

  " The portion of the revenue from this market allocated to the protocol "
  protocolSideRevenueUSD : BigDecimal!

  " The portion of the revenue from this market allocated to the suppliers (depositors) "
  supplySideRevenueUSD: BigDecimal!

  " Maximum loan-to-value ratio as a percentage value (e.g. 75% for DAI in Aave) "
  maximumLTV: BigDecimal!

  " Liquidation threshold as a percentage value (e.g. 80% for DAI in Aave). When it is reached, the position is defined as undercollateralised and could be liquidated "
  liquidationThreshold: BigDecimal!

  " Liquidation penalty (or the liquidation bonus for liquidators) as a percentage value. It is the penalty/bonus price on the collateral when liquidators purchase it as part of the liquidation of a loan that has passed the liquidation threshold "
  liquidationPenalty: BigDecimal!

  " Deposit interest rate in APY percentage "
  depositRate: BigDecimal!

  " Stable borrow interest rate in APY percentage. Leave as null if no stable borrow rate "
  stableBorrowRate: BigDecimal!

  " Variable borrow interest rate in APY percentage "
  variableBorrowRate: BigDecimal!

  deposits: [Deposit!]! @derivedFrom(field: "market")

  withdraws: [Withdraw!]! @derivedFrom(field: "market")

  borrows: [Borrow!]! @derivedFrom(field: "market")

  repays: [Repay!]! @derivedFrom(field: "market")

  liquidates: [Liquidate!]! @derivedFrom(field: "market")
}

#################################
##### Pool-Level Timeseries #####
#################################

type MarketDailySnapshot @entity {
  " { Smart contract address of the market }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The pool this snapshot belongs to "
  market: Market!

  totalValueLockedUSD: BigDecimal!

  " Total borrow volume in USD (i.e. total loan origination ) "
  totalVolumeUSD: BigDecimal!

  " Current balance of all deposited assets (not historical cumulative), in USD "
  totalDepositUSD: BigDecimal!

  " Current balance of all borrowed assets (not historical cumulative), in USD. In the case of CDPs, this will be all minted assets "
  totalBorrowUSD: BigDecimal!

  " Amount of input tokens in the market. The ordering should be the same as the market's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Price per share of input token in USD "
  inputTokenPricesUSD: [BigDecimal!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]!

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]!
  
  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Lending-Specific #####

  " Deposit interest rate in APY percentage "
  depositRate: BigDecimal!

  " Stable borrow interest rate in APY percentage. Leave as null if no stable borrow rate "
  stableBorrowRate: BigDecimal!

  " Variable borrow interest rate in APY percentage "
  variableBorrowRate: BigDecimal!
}

##################################
##### Transaction-Level Data #####
##################################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
interface Event {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received the tokens "
  to: String!

  " Address that sent the tokens "
  from: String!

  " The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in "
  snapshotId: String!

  blockNumber: BigInt!

  timestamp: BigInt!
}

type Deposit implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are deposited into "
  to: String!

  " Address that deposited tokens "
  from: String!

  " The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in "
  snapshotId: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The market this transaction interacted with "
  market: Market!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigInt!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!
}

type Withdraw implements Event @entity {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Market that tokens are withdrawn from "
  from: String!

  " The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in "
  snapshotId: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The market this transaction interacted with "
  market: Market!

  " Token withdrawn "
  asset: Token!

  " Amount of token withdrawn in native units "
  amount: BigInt!

  " Amount of token withdrawn in USD "
  amountUSD: BigDecimal!
}

type Borrow implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Market that tokens are borrowed from "
  from: String!

  " The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in "
  snapshotId: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The market this transaction interacted with "
  market: Market!

  " Token borrowed "
  asset: Token!

  " Amount of token borrowed in native units "
  amount: BigInt!

  " Amount of token borrowed in USD "
  amountUSD: BigDecimal
}

type Repay implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are repaid to "
  to: String!

  " Address that sent tokens "
  from: String!

  " The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in "
  snapshotId: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The market this transaction interacted with "
  market: Market!

  " Token repaid "
  asset: Token!

  " Amount of token repaid in native units "
  amount: BigInt!

  " Amount of token repaid in USD "
  amountUSD: BigDecimal
}

type Liquidate implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are repaid to "
  to: String!

  " Address that carried out the liquidation "
  from: String!

  " The number of days since Unix epoch time, used to signify which financial/metric dailySnapshots this transaction is recorded in "
  snapshotId: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The market this transaction interacted with "
  market: Market!

  " Token liquidated "
  asset: Token!

  " Amount of token liquidated in native units "
  amount: BigInt!

  " Amount of token liquidated in USD "
  amountUSD: BigDecimal

  " Amount of profit from liquidation in USD "
  profitUSD: BigDecimal
}

# An account is a unique Ethereum address
# Helps to accumulate total unique users
type Account @entity {
  " Address of the account "
  id: ID!
}

# Helper entity for calculating daily active users
type DailyActiveAccount @entity {
  " { Days since Unix epoch }-{ Address of the account } "
  id: ID!
}
