enum Network {
  AVALANCHE
  AURORA
  BSC
  CELO
  CRONOS
  ETHEREUM
  FANTOM
  HARMONY
  MOONBEAM
  MOONRIVER
  OPTIMISM
  POLYGON
  XDAI
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity {
  " Smart contract address of the market "
  id: ID!

  " Mirrored from the smart contract "
  name: String!
  symbol: String!
  decimals: Int!
}

enum RewardTokenType {
  DEPOSIT
  BORROW
}

type RewardToken @entity {
  " Smart contract address of the market "
  id: ID!

  " Mirrored from the smart contract "
  name: String!
  symbol: String!
  decimals: Int!

  type: RewardTokenType
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " UUID "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!
  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!
  network: Network!
  type: ProtocolType!
  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type YieldAggregator implements Protocol @entity {
  " UUID "
  id: ID!
  " Name of the protocol, including version. e.g. Yearn v3 "
  name: String!
  " Slug of protocol, including version. e.g. yearn-v3 "
  slug: String!
  network: Network!
  type: ProtocolType!
  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
  ##### Yield-Specific #####

  " All vaults that belong to this protocol "
  vaults: [Vault!]! @derivedFrom(field: "protocol")
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  " # of unique daily active users "
  activeUsers: Int!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  dailyTransactionCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  totalValueLockedUSD: BigDecimal!

  " Protocol treasury should be composed of non-productive protocol assets. This may be an insurance fund, operational budget, or any other assets not directly generating revenue "
  protocolTreasuryUSD: BigDecimal
  " Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal
  " Total volume in USD "
  totalVolumeUSD: BigDecimal!
  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 2.5% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  supplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.5%). OpenSea 10% sell fee. "
  protocolSideRevenueUSD: BigDecimal!

  " Fees paid by the users. e.g. 3.0% of swap fee in Sushiswap "
  feesUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

###############################
##### Pool-Level Metadata #####
###############################

# A pool can be:
# - A liquidity pool in the case of a DEX AMM
# - A market in the case of a lending protocol
# - A vault in the case of a yield aggregator
interface Pool {
  " Smart contract address of the pool "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null
  # and inputToken balances are used to calculate returns

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigDecimal!]!

  " Total supply of output token "
  outputTokenSupply: BigDecimal!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Pool snapshots "
  snapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")
}

#################################
##### Pool-Level Timeseries #####
#################################

interface PoolDailySnapshot {
  " { Smart contract address of the pool }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The pool this snapshot belongs to "
  pool: Pool!

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: BigDecimal!

  " Total supply of output token "
  outputTokenSupply: BigDecimal!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigDecimal!]
  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]
  " Block number of this snapshot "
  blockNumber: BigInt!
  " Timestamp of this snapshot "
  timestamp: BigInt!
}

enum VaultFeeType {
  " One-time fee charged by the protocol during deposit, in percentages of the deposit token "
  DEPOSIT_FEE
  " One-time fee charged by the protocol during withdrawal, in percentages of the withdrawal token "
  WITHDRAWAL_FEE
  " Fees charged by the protocol during harvest, in percentages of the interest accrued "
  PERFORMANCE_FEE
  " Fees charged by the protocol on a periodic basis, in percentages of the total principal "
  MANAGEMENT_FEE
}

type VaultFee @entity {
  id: ID!
  feePercentage: BigDecimal!
  feeType: VaultFeeType!
}

type Vault @entity {
  " Smart contract address of the vault "
  id: ID!
  protocol: YieldAggregator!
  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null
  # and inputToken balances are used to calculate returns

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool "
  inputTokens: [Token!]!
  " Token that is minted to track ownership of position in protocol "
  outputToken: Token
  " Aditional tokens that are given as reward for position in a protocol "
  rewardTokens: [RewardToken!]
  ##### Quantitative Data #####
  totalValueLockedUSD: BigDecimal!
  " Total volume in USD "
  totalVolumeUSD: BigDecimal!
  " Amount of input tokens in the vault. The ordering should be the same as the vault's `inputTokens` field. "
  inputTokenBalances: [BigDecimal!]!
  " Total supply of output token "
  outputTokenSupply: BigDecimal!
  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!
  " Creation timestamp "
  createdTimestamp: BigInt!
  " Creation block number "
  createdBlockNumber: BigInt!
  " Vault snapshots "
  snapshots: [VaultDailySnapshot!]! @derivedFrom(field: "vault")
  ##### Yield-Specific #####
  name: String

  symbol: String
  depositLimit: BigInt!
  fees: [VaultFee!]!
  deposits: [Deposit!]! @derivedFrom(field: "vault")
  withdraws: [Withdraw!]! @derivedFrom(field: "vault")
}

type VaultDailySnapshot @entity {
  " { Smart contract address of the vault }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The vault this snapshot belongs to "
  vault: Vault!

  totalValueLockedUSD: BigDecimal!

  " Total deposit volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: BigDecimal!

  " Total supply of output token "
  outputTokenSupply: BigDecimal!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigDecimal!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
##### Transaction-Level Data #####
##################################

interface Transaction {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash "
  hash: String!

  " Transaction log index "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Address that sent tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!
}

type Deposit implements Transaction @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash "
  hash: String!

  " Transaction log index "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are deposited into "
  to: String!

  " Address that deposited tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigDecimal!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!

  ##### Yield-Specific #####

  " The vault involving this transaction "
  vault: Vault!
}

type Withdraw implements Transaction @entity {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash "
  hash: String!

  " Transaction log index "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Market that tokens are withdrawn from "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  " Token withdrawn "
  asset: Token!

  " Amount of token withdrawn in native units "
  amount: BigDecimal!

  " Amount of token withdrawn in USD "
  amountUSD: BigDecimal!

  ##### Yield-Specific #####

  " The vault involving this transaction "
  vault: Vault!
}

# An account is a unique Ethereum address
type _Account @entity {
  " Address of the account "
  id: ID!
}

type _DailyActiveAccount @entity {
  " { Days since Unix epoch }-{ Address of the account } "
  id: ID!
}
