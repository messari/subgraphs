# Subgraph Schema: Layer One
# Version: 1.0.0
# See https://github.com/messari/subgraphs/blob/master/docs/Schema.md for details

enum SubgraphNetwork {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  CLOVER
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}


type STATS @entity {
  " Number of times entity has been used in a time data entity "
	count: BigInt!

	" The average of all the values "
	mean: BigInt!
  " The middle value when ordered from least to greatest "
	median: BigInt!

	" The maximum value in this entity "
	max: BigInt!
  " The minimum value in this data set "
	min: BigInt!

  "  " 
	var: BigInt!
	q3: BigInt!
	q1: BigInt

  ##### Add Ons #####
  
  " values in order from smallest to largest "
  values: [BigInt!]!

  " The sum of all the values "
  sum: BigInt!
}

##########################
#### Network Metadata ####
##########################

type Network @entity {
  " Name of the network being indexed "
  id: ID!

  " The verison of the schema "
  schemaVersion: String!

  " The version of the subgraph "
  subgraphVersion: String!

  " The version of the methodology "
  methodologyVersion: String!

  #### Quantitative Data ####

  " Number of cumulative unique authors (see type Author for explanation) "
  cumulativeUniqueAuthors: Int!

  " The total number of blocks in the blockchain "
  blockHeight: Int!

  " Total difficulty to reach the current block "
  cumulativeDifficulty: BigInt!

  " Total gas used "
  cumulativeGasUsed: BigInt!

  " Current gas limit "
  gasLimit: BigInt!

  " Total burnt fees on the network in native asset "
  cumulativeBurntFees: BigInt!

  " Total rewards emitted on the network in native asset "
  cumulativeRewards: BigInt!

  " Total number of transactions that have occured on this network "
  cumulativeTransactions: Int!

  " Total size of the network in native units (e.g. Bytes in Arweave and Ethereum) "
  cumulativeSize: BigInt!

  " Current supply of the native asset "
  totalSupply: BigInt!

  " Current blocks per day emission "
  blocksPerDay: BigDecimal!

  #### Snapshots ####

  " Daily metrics for this blockchain "
  dailySnapshots: [DailySnapshot!]! @derivedFrom(field: "network")

  " Hourly metrics for this blockchain "
  hourlySnapshots: [HourlySnapshot!]! @derivedFrom(field: "network")
}

###############################
#### Blockchain Timeseries ####
###############################

type DailySnapshot @entity {
  " { number of days since UNIX epoch time } "
  id: ID!

  " ID of the network this snapshot belongs to "
  network: Network!

  #### Quantitative Data ####

  " Block height at this day (aka, blockNumber) "
  blockHeight: Int!

  " First timestamp of this entity (used to calculate averages) "
  firstTimestamp: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Number of cumulative unique authors (see type Author for explanation) "
  cumulativeUniqueAuthors: Int!

  " Total difficulty up until this day "
  cumulativeDifficulty: BigInt!

  " Total amount of fees burned "
  cumulativeBurntFees: BigInt!

  " Total amount of rewards emitted "
  cumulativeRewards: BigInt!

  " Total size of the entire network in this day (in native units) "
  cumulativeSize: BigInt!

  " Total amount of the native asset in circulation during this day "
  totalSupply: BigInt!

  " gas price at the end of this hour in network native gas units "
  gasPrice: BigInt!

  #### Daily Metrics ####

  " Number of unique daily active authors "
  dailyActiveAuthors: Int!

  " Blocks created during this day (note, this is different from blocksPerDay) "
  dailyBlocks: Int!

  " Difficulty during this day "
  dailyDifficulty: BigInt!

  " Average difficulty for this day "
  dailyMeanDifficulty: BigDecimal!

  " Sum of all gas used during this day "
  dailyCumulativeGasUsed: BigInt!

  " Sum of all gas limit during this day "
  dailyCumulativeGasLimit: BigInt!

  " Block utilization aggregated across this day "
  dailyBlockUtilization: BigDecimal!

  " Mean of gas used per block during this day "
  dailyMeanGasUsed: BigDecimal!

  " Mean of gas limit per block during this day "
  dailyMeanGasLimit: BigDecimal!

  " Amount of burnt fees for this day "
  dailyBurntFees: BigInt!

  " New rewards emitted on this day "
  dailyRewards: BigInt!

  " Daily mean block reward emitted "
  dailyMeanRewards: BigDecimal!

  " New supply added during this day "
  dailySupplyIncrease: BigInt!

  " Daily mean block interval time in seconds during this hour "
  dailyMeanBlockInterval: BigDecimal!

  " Cumulative size of all blocks created in this day "
  dailyCumulativeSize: BigInt!

  " Daily mean size in bytes of a block during this day "
  dailyMeanBlockSize: BigDecimal!

  " Daily chunk count "
  dailyChunkCount: Int!

  " Number of transactions during this day "
  dailyTransactionCount: Int!

  #### Helpers ####

  " Keep track of the first supply of this snapshot "
  firstSupply: BigInt!
}

type HourlySnapshot @entity {
  " { number of hours since UNIX epoch time } "
  id: ID!

  " ID of the network this snapshot belongs to "
  network: Network!

  #### Quantitative Data ####

  " Block height at this hour (aka, blockNumber) "
  blockHeight: Int!

  " First timestamp of this entity (used to calculate averages) "
  firstTimestamp: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Number of cumulative unique authors (see type Author for explanation) "
  cumulativeUniqueAuthors: Int!

  " Total difficulty up until this hour "
  cumulativeDifficulty: BigInt!

  " Total amount of fees burned "
  cumulativeBurntFees: BigInt!

  " Total amount of rewards emitted "
  cumulativeRewards: BigInt!

  " Total size of the entire network in this hour (in native units) "
  cumulativeSize: BigInt!

  " Total amount of the native asset in circulation during this hour "
  totalSupply: BigInt!

  " gas price at the end of this hour in network native gas units "
  gasPrice: BigInt!

  #### Hourly Metrics ####

  " Number of unique hourly active authors "
  hourlyActiveAuthors: Int!

  " Blocks created during this hour "
  hourlyBlocks: Int!

  " Difficulty during this hour "
  hourlyDifficulty: BigInt!

  " Average difficulty for this hour "
  hourlyMeanDifficulty: BigDecimal!

  " Sum of all gas used during this hour "
  hourlyCumulativeGasUsed: BigInt!

  " Sum of all gas limit during this hour "
  hourlyCumulativeGasLimit: BigInt!

  " Block utilization aggregated across this hour "
  hourlyBlockUtilization: BigDecimal!

  " Mean of gas used per block during this hour "
  hourlyMeanGasUsed: BigDecimal!

  " Mean of gas limit per block during this hour "
  hourlyMeanGasLimit: BigDecimal!

  " Amount of burnt fees for this hour "
  hourlyBurntFees: BigInt!

  " New rewards emitted on this hour "
  hourlyRewards: BigInt!

  " Hourly mean block reward emitted "
  hourlyMeanRewards: BigDecimal!

  " New supply added during this hour "
  hourlySupplyIncrease: BigInt!

  " Hourly mean block interval time in seconds during this hour "
  hourlyMeanBlockInterval: BigDecimal!

  " Cumulative size of all blocks created in this hour "
  hourlyCumulativeSize: BigInt!

  " hourly mean size in bytes of a block during this hour "
  hourlyMeanBlockSize: BigDecimal!

  " Hourly chunk count "
  hourlyChunkCount: Int!

  " Number of transactions during this hour "
  hourlyTransactionCount: Int!

  #### Helpers ####

  " Keep track of the first supply of this snapshot "
  firstSupply: BigInt!
}

##########################
#### Block-level Data ####
##########################

type Block @entity(immutable: true) {
  " { block number } "
  id: ID!

  " Hash of this block "
  hash: Bytes!

  " Timestamp of the block "
  timestamp: BigInt!

  " Author of this block (the entity that successfully found this block) "
  author: Author!

  " Data size of the block in Bytes "
  size: BigInt!

  " Minimum gasUsed multiplier for transaction to be included (note, post London upgrade) "
  baseFeePerGas: BigInt!

  " Amount of effort required to create this block "
  difficulty: BigInt!

  " Total gas limit provided from all transactions this block "
  gasLimit: BigInt!

  " Total gas used in this block "
  gasUsed: BigInt!

  " Percentage of gas filled in this block (e.g. gasUsed / gasLimit) "
  blockUtilization: BigDecimal!

  " The price of gas in this block in network native gas units "
  gasPrice: BigInt!

  " Burnt fees in native asset (baseFeePerGas * gasUsed) (note, post London upgrade) "
  burntFees: BigInt!

  " Number of chunks in this block (e.g. shards on NEAR) "
  chunkCount: Int!

  " Number of transactions in this block "
  transactionCount: Int!

  " Rewards emitted in this block "
  rewards: BigInt!
}

# This is the node that found the next block (e.g. miner or validator)
type Author @entity {
  " Address of the author "
  id: Bytes!

  " Number of blocks created "
  cumulativeBlocksCreated: Int!

  " Total difficulty secured on blockchain "
  cumulativeDifficulty: BigInt!

  " A mapping to every block that this author has generated "
  blocks: [Block!]! @derivedFrom(field: "author")
}

#################
#### Helpers ####
#################

# Helper entity for calculating daily/hourly active authors
type ActiveAuthor @entity(immutable: true) {
  " { daily/hourly }-{ Address of the author }-{ Days/hours since Unix epoch } "
  id: ID!
}

# Helper entitiy for NEAR protocol to keep track of chunks for metric aggregation
# Chunks are shards within a block on NEAR protocol: https://coinmarketcap.com/alexandria/glossary/chunk-near
type Chunk @entity(immutable: true) {
  " { chunk hash } "
  id: Bytes!

  " The block this chunk belongs to "
  block: Block!

  " The gas used in this chunk "
  gasUsed: BigInt!

  " The gas limit in this chunk "
  gasLimit: BigInt!

  " The fees burnt in this chunk, also the total amount of fees "
  burntFees: BigInt!

  " Gas utilization within this chunk (e.g. gasUsed / gasLimit) "
  chunkUtilization: BigDecimal!
}

type _CircularBuffer @entity {
  id: ID!
  blocks: [Int!]!
  windowStartIndex: Int!
  nextIndex: Int!
  bufferSize: Int!
  blocksPerDay: BigDecimal!
}
