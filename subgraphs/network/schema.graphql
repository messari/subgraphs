# Subgraph Schema: Layer One
# Version: 1.0.0
# See https://github.com/messari/subgraphs/blob/master/docs/Schema.md for details

enum SubgraphNetwork {
  ARBITRUM_ONE
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  CHAPEL
  CLOVER
  COSMOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  MOONBEAM
  MOONRIVER
  MUMBAI
  NEAR_MAINNET
  OPTIMISM
  MATIC # aka Polygon
  POA # aka Proof of Authority (poa-core)
  XDAI # aka Gnosis Chain
}

##########################
#### Network Metadata ####
##########################

type Network @entity {
  " Name of the network being indexed "
  id: ID!

  " The verison of the schema "
  schemaVersion: String!

  " The version of the subgraph "
  subgraphVersion: String!

  " The version of the methodology "
  methodologyVersion: String!

  #### Quantitative Data ####

  " Number of cumulative unique authors "
  cumulativeUniqueAuthors: Int!

  " The total number of blocks in the blockchain "
  blockHeight: Int!

  " Total difficulty to reach the current block "
  cumulativeDifficulty: BigInt!

  " Total gas used "
  cumulativeGasUsed: BigInt!

  " Current gas limit "
  gasLimit: BigInt!

  " Total burnt fees on the network in native asset "
  cumulativeBurntFees: BigInt!

  " Total rewards emitted on the network in native asset "
  cumulativeRewards: BigInt

  " Current blocks per day emission "
  blocksPerDay: BigDecimal!

  #### Snapshots ####

  " Daily metrics for this blockchain "
  dailySnapshots: [DailySnapshot!]! @derivedFrom(field: "network")

  " Hourly metrics for this blockchain "
  hourlySnapshots: [HourlySnapshot!]! @derivedFrom(field: "network")
}

###############################
#### Blockchain Timeseries ####
###############################

type DailySnapshot @entity {
  " { number of days since UNIX epoch time } "
  id: ID!

  " ID of the network this snapshot belongs to "
  network: Network!

  " Number of cumulative ununique authors "
  cumulativeUniqueAuthors: Int!

  " Number of unique daily active authors "
  dailyActiveAuthors: Int!

  " Block height at this day (aka, blockNumber) "
  blockHeight: Int!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Blocks created during this day (note, this is different from blocksPerDay) "
  dailyBlocks: Int!

  " Blocks/day calculated at the last block this day "
  blocksPerDay: BigDecimal!

  " Total difficulty up until this day "
  cumulativeDifficulty: BigInt!

  " Difficulty during this day "
  dailyDifficulty: BigInt!

  " Average difficulty for this day "
  dailyMeanDifficulty: BigDecimal!

  " Sum of all gas used during this day "
  dailyCumulativeGasUsed: BigInt!

  " Sum of all gas limit during this day "
  dailyCumulativeGasLimit: BigInt!

  " Mean of gas used per block during this day "
  dailyMeanGasUsed: BigDecimal!

  " Mean of gas limit per block during this day "
  dailyMeanGasLimit: BigDecimal!

  " Total amount of fees burned "
  cumulativeBurntFees: BigInt!

  " Amount of burnt fees for this day "
  dailyBurntFees: BigInt!

  " Total rewards emitted up until this day "
  cumulativeRewards: BigInt

  " Rewards emitted for this day (ie, new supply this day) "
  dailyRewards: BigInt

  " First timestamp of this entity (used to calculate averages) "
  firstTimestamp: BigInt!

  " Daily mean block interval time in seconds during this hour "
  dailyMeanBlockInterval: BigDecimal!

  " Cumulative size of all blocks created in this day "
  dailyCumulativeSize: BigInt!

  " Daily mean size in bytes of a block during this day "
  dailyMeanBlockSize: BigDecimal!

  " All of the blocks created during this day "
  blocks: [Block!]! @derivedFrom(field: "day")
}

type HourlySnapshot @entity {
  " { number of hours since UNIX epoch time } "
  id: ID!

  " ID of the network this snapshot belongs to "
  network: Network!

  " Number of cumulative ununique authors "
  cumulativeUniqueAuthors: Int!

  " Number of unique hourly active authors "
  hourlyActiveAuthors: Int!

  " Block height at this hour (ie, blockNumber) "
  blockHeight: Int!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Blocks created during this hour "
  hourlyBlocks: Int!

  " Blocks/day calculated at the last block this hour "
  blocksPerDay: BigDecimal!

  " Total difficulty up until this hour "
  cumulativeDifficulty: BigInt!

  " Difficulty during this hour "
  hourlyDifficulty: BigInt!

  " Average difficulty for this hour "
  hourlyMeanDifficulty: BigDecimal!

  " Sum of all gas used during this hour "
  hourlyCumulativeGasUsed: BigInt!

  " Sum of all gas limit during this hour "
  hourlyCumulativeGasLimit: BigInt!

  " Mean of gas used per block during this hour "
  hourlyMeanGasUsed: BigDecimal!

  " Mean of gas limit per block during this hour "
  hourlyMeanGasLimit: BigDecimal!

  " Total amount of fees burned "
  cumulativeBurntFees: BigInt!

  " Amount of burnt fees for this hour "
  hourlyBurntFees: BigInt!

  " Total rewards emitted up until this hour "
  cumulativeRewards: BigInt

  " Rewards emitted for this hour (ie, new supply this hour) "
  hourlyRewards: BigInt

  " First timestamp of this entity (used to calculate averages) "
  firstTimestamp: BigInt!

  " Hourly mean block interval time in seconds during this hour "
  hourlyMeanBlockInterval: BigDecimal!

  " Cumulative size of all blocks created in this hour "
  hourlyCumulativeSize: BigInt!

  " Hourly mean size of a block during this hour "
  hourlyMeanBlockSize: BigDecimal!

  " All of the blocks created during this day "
  blocks: [Block!]! @derivedFrom(field: "hour")
}

##########################
#### Block-level Data ####
##########################

type Block @entity {
  " { block number } "
  id: ID!

  " Hash of this block "
  hash: String!

  " Timestamp of the block "
  timestamp: BigInt!

  " Author of this block "
  author: Author!

  " Data size of the block in bytes "
  size: BigInt

  " Minimum gasUsed multiplier for transaction to be included (note, post London upgrade) "
  baseFeePerGas: BigInt

  " Amount of effort required to create this block "
  difficulty: BigInt!

  " Total difficulty on chain until this block "
  cumulativeDifficulty: BigInt!

  " Total gas limit provided from all transactions this block "
  gasLimit: BigInt!

  " Total gas used in this block "
  gasUsed: BigInt!

  " Percentage of gas filled in this block (0-100)"
  gasFilledPercentage: BigDecimal!

  " Reward in native asset for this block "
  reward: BigInt

  " Hash of the previous block (TODO: is this necessary??) "
  parentHash: String!

  " Burnt fees in native asset (baseFeePerGas * gasUsed) (note, post London upgrade) "
  burntFees: BigInt!

  " The day this block was created (in days since UNIX epoch time) "
  day: DailySnapshot!

  " The hour this block was created (in hours since UNIX epoch time) "
  hour: HourlySnapshot!
}

# This is the entity that found the next block (ie, in mainnet this is a miner)
type Author @entity {
  " Address of the author "
  id: ID!

  " Number of blocks created "
  cumulativeBlocksCreated: Int!

  " Total difficulty secured on blockchain "
  cumulativeDifficulty: BigInt!

  " Total amount of native asset created "
  cumulativeRewards: BigInt

  " A mapping to every block that this author has generated "
  blocks: [Block!]! @derivedFrom(field: "author")
}

enum IntervalType {
  " For daily snapshot identifying "
  DAILY

  " For hourly snapshot identifying "
  HOULRY
}

# Helper entity for calculating daily/hourly active authors
type ActiveAuthor @entity {
  " { daily/hourly }-{ Address of the author }-{ Days/hours since Unix epoch } "
  id: ID!
}

type _CircularBuffer @entity {
  id: ID!
  blocks: [Int!]!
  windowStartIndex: Int!
  nextIndex: Int!
  bufferSize: Int!
  blocksPerDay: BigDecimal!
}
