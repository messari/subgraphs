import * as BSC from "../config/bsc";
import * as FANTOM from "../config/fantom";
import * as POLYGON from "../config/polygon";
import * as MAINNET from "../config/mainnet";
import * as OPTIMISM from "../config/optimism";
import * as ARBITRUM_ONE from "../config/arbitrumOne";

import { Address, BigDecimal, BigInt, TypedMap } from "@graphprotocol/graph-ts";
import { UniswapPair__getReservesResult } from "../../../generated/Factory/UniswapPair";
import { SushiSwapPair__getReservesResult } from "../../../generated/Factory/SushiSwapPair";

///////////////////////////////////////////////////////////////////////////
/////////////////////////////////// COMMON ////////////////////////////////
///////////////////////////////////////////////////////////////////////////

export const BIGINT_ZERO = BigInt.fromI32(0);
export const BIGINT_TEN = BigInt.fromI32(10);
export const BIGINT_TEN_THOUSAND = BigInt.fromI32(10000);

export const BIGDECIMAL_ZERO = new BigDecimal(BIGINT_ZERO);

export const DEFAULT_USDC_DECIMALS = 6;
export const DEFAULT_DECIMALS = BigInt.fromI32(18);

export const ZERO_ADDRESS_STRING = "0x0000000000000000000000000000000000000000";

export const ZERO_ADDRESS = Address.fromString(
  "0x0000000000000000000000000000000000000000"
);
export const CHAIN_LINK_USD_ADDRESS = Address.fromString(
  "0x0000000000000000000000000000000000000348"
);

export const WHITELIST_TOKENS_LIST: string[] = [
  "WETH",
  "USDT",
  "DAI",
  "USDC",
  "ETH",
  "WBTC",
  "EURS",
  "LINK",
  "gfUSDT",
  "WFTM",
  "fBTC",
  "FRAX",
  "CRV",
];

///////////////////////////////////////////////////////////////////////////
///////////////////////////// CURVE CONTRACT //////////////////////////////
///////////////////////////////////////////////////////////////////////////

export const CURVE_CALCULATIONS_ADDRESS_MAP = new TypedMap<string, Address>();
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  POLYGON.NETWORK_STRING,
  POLYGON.CURVE_CALCULATIONS_ADDRESS
);
CURVE_CALCULATIONS_ADDRESS_MAP.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.CURVE_CALCULATIONS_ADDRESS
);

export const CURVE_REGISTRY_ADDRESS_MAP = new TypedMap<string, Address>();
CURVE_REGISTRY_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(BSC.NETWORK_STRING, BSC.CURVE_REGISTRY_ADDRESS);
CURVE_REGISTRY_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  POLYGON.NETWORK_STRING,
  POLYGON.CURVE_REGISTRY_ADDRESS
);
CURVE_REGISTRY_ADDRESS_MAP.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.CURVE_REGISTRY_ADDRESS
);

export const CURVE_POOL_REGISTRY_ADDRESS_MAP = new TypedMap<string, Address>();
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  POLYGON.NETWORK_STRING,
  POLYGON.CURVE_POOL_REGISTRY_ADDRESS
);
CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.CURVE_POOL_REGISTRY_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////// SUSHISWAP CONTRACT //////////////////////////
///////////////////////////////////////////////////////////////////////////

export const SUSHISWAP_DEFAULT_RESERVE_CALL =
  new SushiSwapPair__getReservesResult(BIGINT_ZERO, BIGINT_ZERO, BIGINT_ZERO);

export const SUSHISWAP_CALCULATIONS_ADDRESS_MAP = new TypedMap<
  string,
  Address
>();
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  POLYGON.NETWORK_STRING,
  POLYGON.SUSHISWAP_CALCULATIONS_ADDRESS
);
SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.SUSHISWAP_CALCULATIONS_ADDRESS
);

export const SUSHISWAP_WETH_ADDRESS = new TypedMap<string, Address>();
SUSHISWAP_WETH_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(BSC.NETWORK_STRING, BSC.SUSHISWAP_WETH_ADDRESS);
SUSHISWAP_WETH_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(
  POLYGON.NETWORK_STRING,
  POLYGON.SUSHISWAP_WETH_ADDRESS
);
SUSHISWAP_WETH_ADDRESS.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.SUSHISWAP_WETH_ADDRESS
);

export const SUSHISWAP_ROUTER_ADDRESS_MAP = new TypedMap<
  string,
  TypedMap<string, Address>
>();
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  POLYGON.NETWORK_STRING,
  POLYGON.SUSHISWAP_ROUTER_ADDRESS
);
SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.SUSHISWAP_ROUTER_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////// UNISWAP CONTRACT ////////////////////////////
///////////////////////////////////////////////////////////////////////////

export const UNISWAP_DEFAULT_RESERVE_CALL = new UniswapPair__getReservesResult(
  BIGINT_ZERO,
  BIGINT_ZERO,
  BIGINT_ZERO
);

export const UNISWAP_ROUTER_CONTRACT_ADDRESSES = new TypedMap<
  string,
  TypedMap<string, Address>
>();
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  MAINNET.NETWORK_STRING,
  MAINNET.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  BSC.NETWORK_STRING,
  BSC.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SPOOKY_SWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.UNISWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  POLYGON.NETWORK_STRING,
  POLYGON.QUICKSWAP_ROUTER_ADDRESS
);
UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.UNISWAP_ROUTER_ADDRESS
);

export const UNISWAP_PATH_OVERRIDES = new TypedMap<
  string,
  TypedMap<Address, Address[]>
>();
UNISWAP_PATH_OVERRIDES.set(
  MAINNET.NETWORK_STRING,
  MAINNET.UNISWAP_PATH_OVERRIDE
);
UNISWAP_PATH_OVERRIDES.set(BSC.NETWORK_STRING, BSC.UNISWAP_PATH_OVERRIDE);
UNISWAP_PATH_OVERRIDES.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SPOOKY_SWAP_PATH_OVERRIDE
);
UNISWAP_PATH_OVERRIDES.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.UNISWAP_PATH_OVERRIDE
);
UNISWAP_PATH_OVERRIDES.set(
  POLYGON.NETWORK_STRING,
  POLYGON.QUICKSWAP_PATH_OVERRIDE
);
UNISWAP_PATH_OVERRIDES.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.UNISWAP_PATH_OVERRIDE
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////// YEARNLENS CONTRACT //////////////////////////
///////////////////////////////////////////////////////////////////////////

export const YEARN_LENS_CONTRACT_ADDRESS = new Map<string, string>();
YEARN_LENS_CONTRACT_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  BSC.NETWORK_STRING,
  BSC.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  POLYGON.NETWORK_STRING,
  POLYGON.YEARN_LENS_CONTRACT_ADDRESS
);
YEARN_LENS_CONTRACT_ADDRESS.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.YEARN_LENS_CONTRACT_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////// CHAINLINK CONTRACT //////////////////////////
///////////////////////////////////////////////////////////////////////////

export const CHAIN_LINK_CONTRACT_ADDRESS = new Map<string, Address>();
CHAIN_LINK_CONTRACT_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  BSC.NETWORK_STRING,
  BSC.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  POLYGON.NETWORK_STRING,
  POLYGON.CHAIN_LINK_CONTRACT_ADDRESS
);
CHAIN_LINK_CONTRACT_ADDRESS.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.CHAIN_LINK_CONTRACT_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
//////////////////////////// AAVE ORACLE CONTRACT /////////////////////////
///////////////////////////////////////////////////////////////////////////

export const AAVE_ORACLE_CONTRACT_ADDRESS = new Map<string, Address>();
AAVE_ORACLE_CONTRACT_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.AAVE_ORACLE_CONTRACT_ADDRESS
);
AAVE_ORACLE_CONTRACT_ADDRESS.set(
  BSC.NETWORK_STRING,
  BSC.AAVE_ORACLE_CONTRACT_ADDRESS
);
AAVE_ORACLE_CONTRACT_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.AAVE_ORACLE_CONTRACT_ADDRESS
);
AAVE_ORACLE_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.AAVE_ORACLE_CONTRACT_ADDRESS
);
AAVE_ORACLE_CONTRACT_ADDRESS.set(
  POLYGON.NETWORK_STRING,
  POLYGON.AAVE_ORACLE_CONTRACT_ADDRESS
);
AAVE_ORACLE_CONTRACT_ADDRESS.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.AAVE_ORACLE_CONTRACT_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
//////////////////////////// 1Inch ORACLE CONTRACT ////////////////////////
///////////////////////////////////////////////////////////////////////////

export const ONE_INCH_ORACLE_CONTRACT_ADDRESS = new Map<string, Address>();
ONE_INCH_ORACLE_CONTRACT_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.ONE_INCH_ORACLE_CONTRACT_ADDRESS
);
ONE_INCH_ORACLE_CONTRACT_ADDRESS.set(
  BSC.NETWORK_STRING,
  BSC.ONE_INCH_ORACLE_CONTRACT_ADDRESS
);
ONE_INCH_ORACLE_CONTRACT_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.ONE_INCH_ORACLE_CONTRACT_ADDRESS
);
ONE_INCH_ORACLE_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.ONE_INCH_ORACLE_CONTRACT_ADDRESS
);
ONE_INCH_ORACLE_CONTRACT_ADDRESS.set(
  POLYGON.NETWORK_STRING,
  POLYGON.ONE_INCH_ORACLE_CONTRACT_ADDRESS
);
ONE_INCH_ORACLE_CONTRACT_ADDRESS.set(
  OPTIMISM.NETWORK_STRING,
  OPTIMISM.ONE_INCH_ORACLE_CONTRACT_ADDRESS
);

///////////////////////////////////////////////////////////////////////////
///////////////////////////////// HELPERS /////////////////////////////////
///////////////////////////////////////////////////////////////////////////

export const USDC_DECIMALS_MAP = new TypedMap<string, BigInt>();
USDC_DECIMALS_MAP.set(MAINNET.NETWORK_STRING, MAINNET.USDC_DECIMALS);
USDC_DECIMALS_MAP.set(BSC.NETWORK_STRING, BSC.USDC_DECIMALS);
USDC_DECIMALS_MAP.set(FANTOM.NETWORK_STRING, FANTOM.USDC_DECIMALS);
USDC_DECIMALS_MAP.set(ARBITRUM_ONE.NETWORK_STRING, ARBITRUM_ONE.USDC_DECIMALS);
USDC_DECIMALS_MAP.set(POLYGON.NETWORK_STRING, POLYGON.USDC_DECIMALS);
USDC_DECIMALS_MAP.set(OPTIMISM.NETWORK_STRING, OPTIMISM.USDC_DECIMALS);

export const WHITELIST_TOKENS_MAP = new TypedMap<
  string,
  TypedMap<string, Address>
>();
WHITELIST_TOKENS_MAP.set(MAINNET.NETWORK_STRING, MAINNET.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(BSC.NETWORK_STRING, BSC.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(FANTOM.NETWORK_STRING, FANTOM.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.WHITELIST_TOKENS
);
WHITELIST_TOKENS_MAP.set(POLYGON.NETWORK_STRING, POLYGON.WHITELIST_TOKENS);
WHITELIST_TOKENS_MAP.set(OPTIMISM.NETWORK_STRING, OPTIMISM.WHITELIST_TOKENS);


export const HARDCODED_STABLES: Address[] = [
  Address.fromString("0x1075bea848451a13fd6f696b5d0fda52743e6439"), // aETHb
  Address.fromString("0x18b497f4d5f84958b3ba7911401e145397d73604"), // deusdc-3ep
  Address.fromString("0x1a76fe224963818bb3aaa9d6c0603c6178804bf6"), // deUSDC
  Address.fromString("0x2240928ce2010b6d069d381a1c82e57bbf887662"), // arth3eps
  Address.fromString("0x2aa50d69f00d48ee9cfb97c702f2bce09a11cdc9"), // USDM
  Address.fromString("0x2c31c265b83c67d4ec5266f621d576d4a7c123ea"), // metamim
  Address.fromString("0x2d871631058827b703535228fb9ab5f35cf19e76"), // deFRAX
  Address.fromString("0x3d4350cd54aef9f9b2c29435e0fa809957b3f30a"), // UST (wormhole)
  Address.fromString("0x3f56e0c36d275367b8c502090edf38289b3dea0d"), // MAI stablecoin
  Address.fromString("0x469f70cc3f3c3ec11b842c02878c0778a79a34f5"), // usx3eps
  Address.fromString("0x52d36668ec4cedd02e3de25b12ecaf4be789198b"), // usdnv3EPS
  Address.fromString("0x59a48b66228e601a6873c9faee96a15e59756fbe"), // usds eps
  Address.fromString("0x5b5bd8913d766d005859ce002533d4838b0ebbb5"), // val3EPS
  Address.fromString("0x5ee318b2ad8b45675dc169c68a273caf8fb26ee0"), // AUSD/val3EPS
  Address.fromString("0x655853e962dd3cc97077163b19d45375d02a0c19"), // frax3eps
  Address.fromString("0x67ff854d61b0f7a4aa3bf4da1f960439fc1df637"), // usds eps
  Address.fromString("0x7b1cf59492391b416c160ad9788d0983def4f23a"), // USDS+USDC+BUSD+USDT
  Address.fromString("0x7ee5010cbd5e499b7d66a7cba2ec3bde5fca8e00"), // ARTH.usd
  Address.fromString("0x8602f98f7738afe9edb37ca945f9b3e1ab2e1204"), // defrax-3ep
  // Address.fromString("0x88fd584df3f97c64843cd474bdc6f78e398394f4"), // ARTH USD Rebase
  Address.fromString("0x8b02998366f7437f6c4138f4b543ea5c000cd608"), // ARTH USD (Rebase)
  Address.fromString("0x8eb98a16f9a6aa139b3021e23debd7f24ddad06b"), // usdd/busd
  Address.fromString("0x90c97f71e18723b0cf0dfa30ee176ab653e89f40"), // FRAX
  Address.fromString("0xaa7dfcfa0f90213aff443a7a27c32d386c1f4786"), // nBUSD/3EPS
  Address.fromString("0xaf4de8e872131ae328ce21d909c74705d3aaf452"), // Ellipsis.finance BUSD/USDC/USDT
  Address.fromString("0xb38b49bae104bbb6a82640094fd61b341a858f78"), // ARTH.usd/3EPS
  Address.fromString("0xb5102cee1528ce2c760893034a4603663495fd72"), // dForce USD
  Address.fromString("0xb69a424df8c737a122d0e60695382b3eec07ff4b"), // ARTH
  Address.fromString("0xb7d9b83c7dc3c7fab2d0159f8b3fa7c4fb081741"), // Decentralized USD / 3EPS
  Address.fromString("0xc1a52e938ffd0eda3c6ad78ce86179adc9d59feb"), // czusd3eps
  Address.fromString("0xd17479997f34dd9156deef8f95a52d81d265be9c"), // USDD
  Address.fromString("0xd295f4b58d159167db247de06673169425b50ef2"), // USDL
  Address.fromString("0xdcecf0664c33321ceca2effce701e710a2d28a3f"), // AUSD
  Address.fromString("0xde7d1ce109236b12809c45b23d22f30dba0ef424"), // Spice USD
  Address.fromString("0xe04fe47516c4ebd56bc6291b15d46a47535e736b"), // Duet USD
  Address.fromString("0xe1c7c46b666506c6690dce134fcba3f09456e4a9"), // Ellipsis valBUSD/valUSDC/valUSDT
  Address.fromString("0xe68b79e51bf826534ff37aa9cee71a3842ee9c70"), // CZUSD

];
export const BIGDECIMAL_USD_PRICE = BigDecimal.fromString("1000000")
