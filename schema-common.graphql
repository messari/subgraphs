##### SCHEMA GUIDELINES
### Version: 1.0.0
#
### Usage
# - This schema is intended to be a "master" document for standardization work. It includes all possible protocol
#   categories and entities. To implement a specific protocol, you should only include entities that are relevant
#   to that particular protocol. For example, to implement Aave, you should only include the lending protocol
#   entities and leave out the rest.
#
### Naming Conventions
# - Enum values should be in all caps
# - Common types
#   - hash/address: String
#   - block height: BigInt
#   - timestamp: unix timestamp in BigInt
#   - token amount: All token amounts should be BigInt to preserve precision (i.e. in wei)
#   - dollar amount: All USD amounts (including prices) should be BigDecimal
# - Certain prefixes may be used to indicate a particular type of value.
#   * total - indicates this is a cumulative value (e.g. totalSharesMinted, totalGrossReturns)
#   * balance - indicates this is a spot balance (e.g. balanceTokensInvested, balanceTokensIdle)
#   * delta - indicates this value is the difference between the prior state and the current state (e.g. deltaPricePerShare)
#   * current - used exclusively in Update entities. Similar to balance, current indicates the state of a field or value at the
#               time of the update. These values are populated in every update whether they changed or not.
#   * new - used exclusively in Update entities. Fields with this prefix will only be populated if they have changed since the
#           last Update. If there has been no change, the value will be null.
# - Use plurals when referring to Tokens or Shares (e.g. totalShares, balanceTokens)
#
### Quantitative Data
# - There are 3 ways in which quantitative data are stored and fetched:
#   1. Real-time: you can get real-time data by querying on specific entities. For example, get `totalValueLockedUSD`
#      from a `Pool`.
#   2. Point-in-time: you can get point-in-time (including historical) data on specific entities using time-travel queries.
#   3. Time-series: the best way to get time-series data is by querying snapshots. For example, get `totalValueLockedUSD` from
#      `PoolDailySnapshot`.
#

enum Network {
  ARBITRUM
  AURORA
  AVALANCHE
  BSC
  CELO
  CRONOS
  ETHEREUM
  FANTOM
  HARMONY
  MOONBEAM
  MOONRIVER
  OPTIMISM
  POLYGON
  XDAI
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity {
  " Smart contract address of the market "
  id: ID!

  " Mirrored from the smart contract "
  name: String!
  symbol: String!
  decimals: Int!
}

enum RewardTokenType {
  DEPOSIT
  BORROW
}

type RewardToken @entity {
  " Smart contract address of the market "
  id: ID!

  " Mirrored from the smart contract "
  name: String!
  symbol: String!
  decimals: Int!

  type: RewardTokenType!
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  network: Network!

  type: ProtocolType!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  totalValueLockedUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  " # of unique daily active users "
  activeUsers: Int!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  " Total number of transaction occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  protocol: Protocol!

  totalValueLockedUSD: BigDecimal!

  " Protocol treasury should be composed of non-productive protocol assets. This may be an insurance fund, operational budget, or any other assets not directly generating revenue "
  protocolTreasuryUSD: BigDecimal

  " Only relevant for protocols with PCV. "
  protocolControlledValueUSD: BigDecimal

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  " Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  supplySideRevenueUSD: BigDecimal!

  " Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee. "
  protocolSideRevenueUSD: BigDecimal!

  " Fees paid by the users. e.g. 0.30% of swap fee in Sushiswap "
  feesUSD: BigDecimal!
  
  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

###############################
##### Pool-Level Metadata #####
###############################

# A pool can be:
# - A liquidity pool in the case of a DEX AMM
# - A market in the case of a lending protocol
# - A vault in the case of a yield aggregator
interface Pool {
  " Smart contract address of the pool "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null 
  # and inputToken balances are used to calculate returns

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD (volume is defined differently according to the protocol category) "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Pool snapshots "
  snapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")
}

#################################
##### Pool-Level Timeseries #####
#################################

interface PoolDailySnapshot {
  " { Smart contract address of the pool }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The pool this snapshot belongs to "
  pool: Pool!

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: BigInt!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
##### Transaction-Level Data #####
##################################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
interface Event {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Address that sent tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!
}

type Deposit implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are deposited into "
  to: String!

  " Address that deposited tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigInt!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!

  " The pool involving this transaction "
  pool: Pool!
}

type Withdraw implements Event @entity {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Market that tokens are withdrawn from "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  " Token withdrawn "
  asset: Token!

  " Amount of token withdrawn in native units "
  amount: BigInt!

  " Amount of token withdrawn in USD "
  amountUSD: BigDecimal!

  " The pool involving this transaction "
  pool: Pool!
}

###############################################################################
################################# DEX AMM #####################################
###############################################################################

type DexAmmProtocol implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  network: Network!

  type: ProtocolType!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  totalValueLockedUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### DexAmm-Specific #####

  " All pools that belong to this protocol "
  pools: [Pool!]! @derivedFrom(field: "protocol")
}

enum LiquidityPoolFeeType {
  " Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1. "
  TRADING_FEE

  " Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1. "
  PROTOCOL_FEE

  " Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code. "
  TIERED_FEE

  " Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code. "
  DYNAMIC_FEE
}

type LiquidityPoolFee @entity {
  id: ID!

  feePercentage: BigDecimal!

  feeType: LiquidityPoolFeeType!
}

type LiquidityPool implements Pool @entity {
  " Smart contract address of the pool "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Total swap volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Pool snapshots "
  snapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")

  ##### DexAmm-Specific #####

  " Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) "
  name: String

  " Symbol of liquidity pool (e.g. 3CRV) "
  symbol: String

  " Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee. ) "
  fees: [LiquidityPoolFee!]!

  deposits: [Deposit!]! @derivedFrom(field: "pool")

  withdraws: [Withdraw!]! @derivedFrom(field: "pool")

  swaps: [Swap!]! @derivedFrom(field: "pool")
}

type Swap implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Market that tokens are withdrawn from "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  " Token deposited into pool "
  tokenIn: Token!

  " Amount of token deposited into pool in native units "
  amountIn: BigInt!

  " Amount of token deposited into pool in USD "
  amountInUSD: BigDecimal!

  " Token withdrawn from pool "
  tokenOut: Token!

  " Amount of token withdrawn from pool in native units "
  amountOut: BigInt!

  " Amount of token withdrawn from pool in USD "
  amountOutUSD: BigDecimal!

  ##### DexAmm-Specific #####

  " The pool involving this transaction "
  pool: LiquidityPool!
}


###############################################################################
################################# Lending #####################################
###############################################################################

enum LendingType {
  " Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market "
  CDP

  " Pooled protocols pool all users assets into a single market "
  POOLED
}

enum RiskType {
  " Global risk means each users position in a market is combined for one score to determine if they can be liquidated "
  GLOBAL

  " Isolated risk means each users position in a market or CDP is isolated for risk of liquidation "
  ISOLATED
}

type LendingProtocol implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Aave v2 "
  name: String!

  " Slug of protocol, including version. e.g. aave-v2 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  network: Network!

  type: ProtocolType!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  totalValueLockedUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Lending-Specific #####

  " All markets that belong to this protocol "
  markets: [Market!]! @derivedFrom(field: "protocol")

  lendingType: LendingType

  riskType: RiskType
}

type Market implements Pool @entity {
  " Smart contract address of the market "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null 
  # and inputToken balances are used to calculate returns

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Total borrow volume in USD (i.e. total loan origination ) "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the market. The ordering should be the same as the market's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Pool snapshots "
  snapshots: [MarketDailySnapshot!]! @derivedFrom(field: "market")

  ##### Lending-Specific #####

  " Name of market "
  name: String

  isActive: Boolean!

  canUseAsCollateral: Boolean!

  canBorrowFrom: Boolean!

  " Maximum loan-to-value ratio as a percentage value "
  maximumLTV: BigDecimal!

  " Liquidation threshold as a percentage value "
  liquidationThreshold: BigDecimal!

  " Liquidation penalty as a percentage value "
  liquidationPenalty: BigDecimal!

  " Deposit interest rate in percentage "
  depositRate: BigDecimal!

  " Borrow interest rate in percentage "
  stableBorrowRate: BigDecimal!

  " Borrow interest rate in percentage "
  variableBorrowRate: BigDecimal!

  deposits: [Deposit!]! @derivedFrom(field: "market")

  withdraws: [Withdraw!]! @derivedFrom(field: "market")

  borrows: [Borrow!]! @derivedFrom(field: "market")

  repays: [Repay!]! @derivedFrom(field: "market")

  liquidations: [Liquidation!]! @derivedFrom(field: "market")
}

type MarketDailySnapshot implements PoolDailySnapshot @entity {
  " { Smart contract address of the market }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The market this snapshot belongs to "
  market: Market!

  totalValueLockedUSD: BigDecimal!

  " Amount of input tokens in the market. The ordering should be the same as the market's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Price per share of input token in USD "
  inputTokenPricesUSD: [BigDecimal!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]
  
  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Lending-Specific #####

  " Deposit interest rate in percentage "
  depositRate: BigDecimal!

  " Borrow interest rate in percentage "
  stableBorrowRate: BigDecimal!

  " Borrow interest rate in percentage "
  variableBorrowRate: BigDecimal!
}

type Borrow implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Address that received tokens "
  to: String!

  " Market that tokens are borrowed from "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The market involving this transaction "
  market: Market!

  " Token borrowed "
  asset: Token!

  " Amount of token borrowed in native units "
  amount: BigInt!

  " Amount of token borrowed in USD "
  amountUSD: BigDecimal
}

type Repay implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are repaid to "
  to: String!

  " Address that sent tokens "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The market involving this transaction "
  market: Market!

  " Token repaid "
  asset: Token!

  " Amount of token repaid in native units "
  amount: BigInt!

  " Amount of token repaid in USD "
  amountUSD: BigDecimal
}

type Liquidation implements Event @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: Protocol!

  " Market that tokens are repaid to "
  to: String!

  " Address that carried out the liquidation "
  from: String!

  blockNumber: BigInt!

  timestamp: BigInt!

  ##### Lending-Specific #####

  " The market involving this transaction "
  market: Market!

  " Token liquidated "
  asset: Token!

  " Amount of token liquidated in native units "
  amount: BigInt!

  " Amount of token liquidated in USD "
  amountUSD: BigDecimal

  " Amount of profit from liquidation in USD "
  profitUSD: BigDecimal
}

###############################################################################
################################## Yield ######################################
###############################################################################

type YieldAggregator implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Yearn v3 "
  name: String!

  " Slug of protocol, including version. e.g. yearn-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  network: Network!

  type: ProtocolType!

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  totalValueLockedUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### Yield-Specific #####

  " All vaults that belong to this protocol "
  vaults: [Vault!]! @derivedFrom(field: "protocol")
}

enum VaultFeeType {
  " One-time fee charged by the protocol during deposit, in percentages of the deposit token "
  DEPOSIT_FEE

  " One-time fee charged by the protocol during withdrawal, in percentages of the withdrawal token "
  WITHDRAWAL_FEE

  " Fees charged by the protocol during harvest, in percentages of the interest accrued "
  PERFORMANCE_FEE

  " Fees charged by the protocol on a periodic basis, in percentages of the total principal "
  MANAGEMENT_FEE
}

type VaultFee @entity {
  id: ID!

  feePercentage: BigDecimal!

  feeType: VaultFeeType!
}

type Vault implements Pool @entity {
  " Smart contract address of the vault "
  id: ID!

  protocol: YieldAggregator!

  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null 
  # and inputToken balances are used to calculate returns

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Total deposit volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the vault. The ordering should be the same as the vault's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Vault snapshots "
  snapshots: [VaultDailySnapshot!]! @derivedFrom(field: "vault")

  ##### Yield-Specific #####

  name: String

  symbol: String

  depositLimit: BigInt!

  fees: [VaultFee!]!

  deposits: [Deposit!]! @derivedFrom(field: "vault")

  withdraws: [Withdraw!]! @derivedFrom(field: "vault")
}

type VaultDailySnapshot implements PoolDailySnapshot @entity {
  " { Smart contract address of the vault }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The vault this snapshot belongs to "
  vault: Vault!

  totalValueLockedUSD: BigDecimal!

  " Total deposit volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]
  
  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

###############################################################################
################################# Generic #####################################
###############################################################################

# The GenericProtocol entities are meant to serve as a template for any protocols
# that don't fall into one of the existing categories. The entities and fields
# are designed to be as generic as possible so they can cover as many protocols
# as possible.
type GenericProtocol implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  network: Network!

  type: ProtocolType!

  " All pools that belong to this protocol "
  pools: [Pool!]! @derivedFrom(field: "protocol")

  " # of total/cumulative unique users "
  totalUniqueUsers: Int!

  totalValueLockedUSD: BigDecimal!

  usageMetrics: [UsageMetricsDailySnapshot!]! @derivedFrom(field: "protocol")

  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type GenericPool implements Pool @entity {
  " Smart contract address of the pool "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  " Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool "
  inputTokens: [Token!]!

  " Token that is minted to track ownership of position in protocol "
  outputToken: Token

  " Aditional tokens that are given as reward for position in a protocol "
  rewardTokens: [RewardToken!]

  ##### Quantitative Data #####

  totalValueLockedUSD: BigDecimal!

  " Total volume in USD "
  totalVolumeUSD: BigDecimal!

  " Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
  inputTokenBalances: [BigInt!]!

  " Total supply of output token "
  outputTokenSupply: BigInt!

  " Price per share of output token in USD "
  outputTokenPriceUSD: BigDecimal!

  " Total amount of reward token emissions in a day, in token's native amount "
  rewardTokenEmissionsAmount: [BigInt!]

  " Total amount of reward token emissions in a day, normalized to USD "
  rewardTokenEmissionsUSD: [BigDecimal!]

  blockNumber: BigInt!

  timestamp: BigInt!

  " Pool snapshots "
  snapshots: [PoolDailySnapshot!]! @derivedFrom(field: "pool")

  deposits: [Deposit!]! @derivedFrom(field: "pool")

  withdraws: [Withdraw!]! @derivedFrom(field: "pool")
}
