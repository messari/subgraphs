syntax = "proto3";

package eth.messari.uni.v1;

// Subgraph Schema: DEX AMM
// Version: 1.2.1
// See https://github.com/messari/subgraphs/blob/master/docs/Schema.md for details

enum Network {
    ARBITRUM_ONE = 1;
    AURORA = 2;
    AVALANCHE = 3;
    BSC = 4;
    CELO = 5;
    CRONOS = 6;
    MAINNET = 7; 
    FANTOM = 8;
    FUSE = 9;
    MOONBEAM = 10;
    MOONRIVER = 11;
    NEAR_MAINNET = 12;
    OPTIMISM = 13;
    MATIC = 14; 
    XDAI = 15; 
}
  
enum ProtocolType {
    EXCHANGE = 1;
    LENDING = 2;
    YIELD = 3;
    BRIDGE = 4;
    GENERIC = 5;
    # Will add more
}

message Token {
    // Smart contract address of the token
    string id = 1;

    // Name of the token, mirrored from the smart contract
    string name = 2;

    // Symbol of the token, mirrored from the smart contract
    string symbol = 3;

    // The number of decimal places this token uses, default to 18
    uint64 decimals = 4;

    // Optional field to track the price of a token, mostly for caching purposes
    double lastPriceUSD = 5;

    // Optional field to track the block number of the last token price
    uint64 lastPriceBlockNumber = 6;
}

enum RewardTokenType {
    // For reward tokens awarded to LPs/lenders
    DEPOSIT = 1;
    // For reward tokens awarded to borrowers 
    BORROW = 2;
}

message RewardToken {
    // { Reward token type }-{ Smart contract address of the reward token }
    string id = 1;

    // Reference to the actual token
    Token token = 2;

    // The type of the reward token
    RewardTokenType Type = 3;
}

// Note that trading fee is the fee paid *by* the users, whereas LP fee and
// protocol fee are fees paid *to* the corresponding parties.
// Most of the time, trading fee = liquidity provider fee + protocol fee,
// but not always. Thus we explicitly specify all different fee types.
enum LiquidityPoolFeeType {
  // Total fixed fee paid by the user per trade, as a percentage of the traded amount. e.g. 0.3% for Uniswap v2, 0.3% for Sushiswap, 0.04% for Curve v1.
  FIXED_TRADING_FEE = 1;

  // Some protocols use tiered fees instead of fixed fee (e.g. DYDX, DODO). Set `feePercentage` as 0 but handle the tiered fees in the mapping code.
  TIERED_TRADING_FEE = 2;

  // Some protocols use dynamic fees instead of fixed fee (e.g. Balancer v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.
  DYNAMIC_TRADING_FEE = 3;

  // Fixed fee that's paid to the LP, as a percentage of the traded amount. e.g. 0.25% for Sushiswap, 0.02% for Curve v1.
  FIXED_LP_FEE = 4;

  // Some protocols use dynamic LP fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.
  DYNAMIC_LP_FEE = 5;

  // Fixed fee that's paid to the protocol, as a percentage of the traded amount. e.g. 0.05% for Sushiswap, 0.02% for Curve v1.
  FIXED_PROTOCOL_FEE = 6;

  // Some protocols use dynamic protocol fees (e.g., Bancor v2). Set `feePercentage` as 0 but handle the dynamic fees in the mapping code.
  DYNAMIC_PROTOCOL_FEE = 7;
}

message LiquidityPoolFee {
    // { Fee type }-{ Pool address }
    string id = 1;

    // Fee as a percentage of the trade (swap) amount. Does not always apply
    double feePercentage = 2;

    // Type of fee this pool uses
    LiquidityPoolFeeType feetype = 3;
}

message Protocol {
    // Smart contract address of the protocol's main contract (Factory, Registry, etc) 
    string id = 1;

    // Name of the protocol, including version. e.g. Uniswap v3
    string name = 2;

    // Slug of protocol, including version. e.g. uniswap-v3
    string slug = 3;

    // Version of the subgraph schema, in SemVer format (e.g. 1.0.0)
    string schemaVersion = 4;

    // Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)
    string subgraphVersion = 5;

    // Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)
    string methodologyVersion = 6;

    // The blockchain network this subgraph is indexing on
    Network network = 7;

    // The type of protocol (e.g. DEX, Lending, Yield, etc)
    ProtocolType type = 8;

    ///// Quantitative Data /////

    // Current TVL (Total Value Locked) of the entire protocol
    double totalValueLockedUSD = 9;

    // Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
    double protocolControlledValueUSD = 10;

    // Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
    double cumulativeSupplySideRevenueUSD = 11;

    // Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
    double cumulativeProtocolSideRevenueUSD = 12;

    // All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
    double cumulativeTotalRevenueUSD = 13;
    
    // # of cumulative unique users
    uint64 cumulativeUniqueUsers = 14;

    ##### Snapshots #####

    // Daily usage metrics for this protocol
    repeated UsageMetricsDailySnapshot dailyUsageMetrics = 15;

    // Hourly usage metrics for this protocol
    repeated UsageMetricsHourlySnapshot hourlyUsageMetrics = 16;

    // Daily financial metrics for this protocol
    repeated FinancialsDailySnapshot financialMetrics = 17;
}

///////////////////////////////
///// Protocol Timeseries /////
///////////////////////////////

message UsageMetricsDailySnapshot {
    // ID is # of days since Unix epoch time
    string id = 1;
    // Protocol this snapshot is associated with
    Protocol protocol = 2;
    // # of unique daily active users
    uint64 dailyActiveUsers = 3;
    // # of cumulative unique users
    uint64 cumulativeUniqueUsers = 4;
    // Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.
    uint64 dailyTransactionCount = 5;
    // Total number of deposits (add liquidity) in a day
    uint64 dailyDepositCount = 6;
    // Total number of withdrawals (remove liquidity) in a day
    uint64 dailyWithdrawCount = 7;
    // Total number of trades (swaps) in a day
    uint64 dailySwapCount = 8;
    // Block number of this snapshot
    uint64 blockNumber = 9;
    // Timestamp of this snapshot
    uint64 timestamp = 10;
  }

message UsageMetricsHourlySnapshot {
    // { # of hours since Unix epoch time }
    string id = 1;

    // Protocol this snapshot is associated with
    string protocol = 2;

    // # of unique hourly active users
    uint64 hourlyActiveUsers = 3;

    // # of cumulative unique users
    uint64 cumulativeUniqueUsers = 4;

    // Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
    uint64 hourlyTransactionCount = 5;

    // Total number of deposits (add liquidity) in an hour
    uint64 hourlyDepositCount = 6;

    // Total number of withdrawals (remove liquidity) in an hour
    uint64 hourlyWithdrawCount = 7;

    // Total number of trades (swaps) in an hour
    uint64 hourlySwapCount = 8;

    // Block number of this snapshot
    uint64 blockNumber = 9;

    // Timestamp of this snapshot
    uint64 timestamp = 10;
  }
  
message FinancialsDailySnapshot @entity {
    // ID is # of days since Unix epoch time "
    string id = 1;
    // Protocol this snapshot is associated with "
    Protocol protocol = 2;
    // Current TVL (Total Value Locked) of the entire protocol "
    double totalValueLockedUSD = 3;
    // Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
    double protocolControlledValueUSD = 4;
    // All trade volume occurred in a given day, in USD "
    double dailyVolumeUSD = 5;
    // All historical trade volume in USD "
    double cumulativeVolumeUSD = 6;
    // Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
    double dailySupplySideRevenueUSD = 7;
    // Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
    double cumulativeSupplySideRevenueUSD = 8;
    // Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
    double dailyProtocolSideRevenueUSD = 9;
    // Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
    double cumulativeProtocolSideRevenueUSD = 10;
    // All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
    double dailyTotalRevenueUSD = 11;
    // All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
    double cumulativeTotalRevenueUSD = 12;
    // Block number of this snapshot
    uint64 blockNumber = 13;
    // Timestamp of this snapshot
    uint64 timestamp = 14;
  }

/////////////////////////////////
///// Pool-Level Timeseries /////
/////////////////////////////////
  
message LiquidityPoolDailySnapshot {
    // { Smart contract address of the pool }-{ # of days since Unix epoch time } "
    string id = 1;
    // The protocol this snapshot belongs to "
    Protocol protocol = 2;
    // The pool this snapshot belongs to "
    LiquidityPool pool = 3;
    // Block number of this snapshot "
    uint64 blockNumber = 4;
    // Timestamp of this snapshot "
    uint64 timestamp = 5;
  
    //// Quantitative Data /////
  
    // Current TVL (Total Value Locked) of this pool "
    double totalValueLockedUSD = 6;
    // All trade volume occurred in a given day, in USD "
    double dailyVolumeUSD = 7;
    // All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. "
    string dailyVolumeByTokenAmount = 8;
    // All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. "
    double dailyVolumeByTokenUSD = 9;
    // All historical trade volume occurred in this pool, in USD "
    double cumulativeVolumeUSD = 10;

    // Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
    repeated string inputTokenBalances = 11;
    // Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 33.3/33.3/33.3 for a Curve pool, 10/10/80 for a Balancer pool "
    repeated double inputTokenWeights = 12;
    // Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) "
    string outputTokenSupply = 13;
    // Price per share of output token in USD "
    double outputTokenPriceUSD = 14;
    // Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
    string stakedOutputTokenAmount = 15;
    // Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
    string rewardTokenEmissionsAmount = 16;
    // Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
    double rewardTokenEmissionsUSD = 17;
}
  
message LiquidityPoolHourlySnapshot {
    // { Smart contract address of the pool }-{ # of hours since Unix epoch time }
    string id = 1;

    // The protocol this snapshot belongs to
    Protocol protocol = 2;

    // The pool this snapshot belongs to
    LiquidityPool pool = 3;

    // Block number of this snapshot
    uint64 blockNumber = 4;

    // Timestamp of this snapshot
    uint64 timestamp = 5;
  
    //// Quantitative Data /////
  
    // Current TVL (Total Value Locked) of this pool "
    double totalValueLockedUSD = 6;

    // All trade volume occurred in a given hour, in USD "
    double hourlyVolumeUSD = 7;

    // All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. "
    string hourlyVolumeByTokenAmount = 8;

    // All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. "
    double hourlyVolumeByTokenUSD = 9;

    // All historical trade volume occurred in this pool, in USD "
    double cumulativeVolumeUSD = 10;

    // Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. "
    repeated string inputTokenBalances = 11;

    // Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 33.3/33.3/33.3 for a Curve pool, 10/10/80 for a Balancer pool "
    repeated double inputTokenWeights = 12;
  
    // Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) "
    string outputTokenSupply = 13;
  
    // Price per share of output token in USD "
    double outputTokenPriceUSD = 14;
    
    // Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. "
    double stakedOutputTokenAmount = 15;
  
    // Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. "
    string rewardTokenEmissionsAmount = 16;
  
    // Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. "
    double rewardTokenEmissionsUSD = 17;
}
  
//////////////////////////////////
///// Transaction-Level Data /////
//////////////////////////////////
  
//   """
//   An event is any user action that occurs in a protocol. Generally, they are Ethereum events
//   emitted by a function in the smart contracts, stored in transaction receipts as event logs.
//   However, some user actions of interest are function calls that don't emit events. For example,
//   the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
//   store them as events, although they are not technically Ethereum events emitted by smart
//   contracts.
//   """

message Events {
    repeated Event events = 1;
  }
  
message Event {
    oneof type {
      Swap swap = 1;
      Burn burn = 2;
      Mint mint = 3;
    }
    // { Event type }-{ Transaction hash }-{ Log index }
    string id = 100;
  
    // Transaction hash of the transaction that emitted this event
    string hash = 101;
  
    // Event log index. For transactions that don't emit event, create arbitrary index starting from 0
    uint64 logIndex = 102;
  
    // The protocol this transaction belongs to
    Protocol protocol = 103;
  
    // Address that received the tokens
    string to = 104;
  
    // Address that sent the tokens
    string from = 105;
  
    // Block number of this event
    uint64 blockNumber = 106;
  
    // Timestamp of this event
    uint64 timestamp = 107;
}
  
message Deposit {
    // Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool
    repeated Token inputTokens = 1;
  
    // Output token of the pool. E.g. the UNI-LP token
    Token outputToken = 2;
  
    // Amount of input tokens in the token's native unit
    repeated string inputTokenAmounts = 3;
  
    // Amount of output tokens in the token's native unit
    string outputTokenAmount = 4;
  
    // USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool)
    double amountUSD = 5;
  
    // The pool involving this transaction
    LiquidityPool pool = 6;
}
  
message Withdraw {
    // Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool
    repeated Token inputTokens = 1;
  
    // Output token of the pool (not output token of the event/transaction). E.g. the UNI-LP token
    Token outputToken = 2;
  
    // Amount of input tokens in the token's native unit
    repeated string inputTokenAmounts = 3;
  
    // Amount of output tokens in the token's native unit
    string outputTokenAmount = 4;
  
    // USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)
    double amountUSD = 5;
  
    // The pool involving this transaction
    LiquidityPool pool = 6;
}
  
message Swap {
    // swap-{ Transaction hash }-{ Log index }
    string id = 1;
  
    // Transaction hash of the transaction that emitted this event
    string  hash = 2;
  
    // Event log index. For transactions that don't emit event, create arbitrary index starting from 0
    uint64 logIndex = 3;
  
    // The protocol this transaction belongs to
    Protocol protocol = 4;
  
    // Address that received the tokens
    string to = 5;
  
    // Address that sent the tokens
    string from = 6;
  
    // Block number of this event
    uint64 blockNumber = 7;
  
    // Timestamp of this event
    uint64 timestamp = 8;
  
    // Token deposited into pool
    Token tokenIn = 9;

    // Amount of token deposited into pool in native units
    string amountIn = 10;
  
    // Amount of token deposited into pool in USD
    double amountInUSD = 11;
  
    // Token withdrawn from pool
    Token tokenOut = 12;
  
    // Amount of token withdrawn from pool in native units
    string amountOut = 13;
  
    // Amount of token withdrawn from pool in USD
    double amountOutUSD = 14;
  
    // The pool involving this transaction
    LiquidityPool pool = 15;
}
  
// An account is a unique Ethereum address
// Helps to accumulate total unique users
message Account {
    // Address of the account "
    string id = 1;
}
  
// Helper entity for calculating daily/hourly active users
message ActiveAccount {
    // { Address of the account }-{ Days since Unix epoch }-{ [Optional] HH: hour of the day }
    string id = 1;
}
  
// Added Entities //
  
// This entity is used to track data from the transfer events. Mainly, I want to track the executor of the deposit/withdraw and the liquidity minted/burned "
message _Transfer {
    string id = 1;
    
    uint64 blockNumber = 2;
  
    uint64 timestamp = 3;
  
    string sender = 4;
  
    string type = 5;
  
    string liquidity = 6;
}
  
// Used to keep track of the price of Ether/TVL in USD, pool deposit count, and total unique users "
message _HelperStore {
    string id = 1;
  
    // price of ETH in USD
    string valueDecimal = 2;
  
    // number of deposits, number of unique users
    string valueInt = 3;
  
    // number of days since last reward calculations
    string valueBigInt = 4;
  
    // Contains the address mapping for MasterChef pool id
    string valueString = 5;
}
  
  
message _LiquidityPoolAmount {
    // Smart contract address of the pool
    string id = 1;
  
    // Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool
    string inputTokens = 2;
  
    // Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
    string inputTokenBalances = 3;
  }
  
message _CircularBuffer {
      // 'CIRCULAR_BUFFER' 
      string id = 1;
  
      // Array of sorted block numbers sorted continuously
      string blocks = 2;
  
      // The index in the blocks array which will be used with the newest block to calculate block speed (Usally set to about a day before newest block)
      string windowStartIndex = 3;
  
      // The next index in the blocks array that will be replaced with the newest block
      string nextIndex = 4;
  
      // This determines the size of the blocks array. Should be set to contain at least a days worth of blocks according to a 1 day window for measuring speed
      string bufferSize = 5;
  
      // The current calculated number of blocks per day based on calculated block speed
      string blocksPerDay = 6;
  }
  

// non curve
message LiquidityPool {
    string id  = 1;
    string name = 2; // dai/usdc
    string symbol = 3; // fixme: maybe remove this
    string token0Id = 4;
    string token1Id = 5;
    string lpToken = 6;
    uint64 timestamp = 7;
    LiquidityPoolFee liquidityPoolFee = 8;
    uint64 createdBlockNumber = 9;
}

message LiquidityPoolFee {
    string feeType = 1;
    uint64 feePercentage = 2;
}
